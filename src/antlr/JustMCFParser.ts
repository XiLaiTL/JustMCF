// Generated from ./antlr/JustMCF.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN.js";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer.js";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException.js";
import { NotNull } from "antlr4ts/Decorators.js";
import { NoViableAltException } from "antlr4ts/NoViableAltException.js";
import { Override } from "antlr4ts/Decorators.js";
import { Parser } from "antlr4ts/Parser.js";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext.js";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator.js";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener.js";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor.js";
import { RecognitionException } from "antlr4ts/RecognitionException.js";
import { RuleContext } from "antlr4ts/RuleContext.js";
//import { RuleVersion } from "antlr4ts/RuleVersion.js";
import { TerminalNode } from "antlr4ts/tree/TerminalNode.js";
import { Token } from "antlr4ts/Token.js";
import { TokenStream } from "antlr4ts/TokenStream.js";
import { Vocabulary } from "antlr4ts/Vocabulary.js";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl.js";

import * as Utils from "antlr4ts/misc/Utils.js";

import { JustMCFListener } from "./JustMCFListener.js";
import { JustMCFVisitor } from "./JustMCFVisitor.js";


export class JustMCFParser extends Parser {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly T__22 = 23;
	public static readonly T__23 = 24;
	public static readonly T__24 = 25;
	public static readonly T__25 = 26;
	public static readonly T__26 = 27;
	public static readonly T__27 = 28;
	public static readonly T__28 = 29;
	public static readonly T__29 = 30;
	public static readonly T__30 = 31;
	public static readonly T__31 = 32;
	public static readonly T__32 = 33;
	public static readonly T__33 = 34;
	public static readonly T__34 = 35;
	public static readonly T__35 = 36;
	public static readonly T__36 = 37;
	public static readonly T__37 = 38;
	public static readonly T__38 = 39;
	public static readonly T__39 = 40;
	public static readonly T__40 = 41;
	public static readonly T__41 = 42;
	public static readonly T__42 = 43;
	public static readonly T__43 = 44;
	public static readonly T__44 = 45;
	public static readonly T__45 = 46;
	public static readonly T__46 = 47;
	public static readonly T__47 = 48;
	public static readonly T__48 = 49;
	public static readonly T__49 = 50;
	public static readonly T__50 = 51;
	public static readonly T__51 = 52;
	public static readonly T__52 = 53;
	public static readonly ByteNumber = 54;
	public static readonly ShortNumber = 55;
	public static readonly LongNumber = 56;
	public static readonly FloatNumber = 57;
	public static readonly DoubleNumber = 58;
	public static readonly STRING2 = 59;
	public static readonly TRUE = 60;
	public static readonly FALSE = 61;
	public static readonly NULL = 62;
	public static readonly STRING = 63;
	public static readonly UUID16_ = 64;
	public static readonly NUMBER_INT = 65;
	public static readonly NUMBER = 66;
	public static readonly DOUBLE_SEMICOLON = 67;
	public static readonly NL = 68;
	public static readonly WS = 69;
	public static readonly LeagalCommand = 70;
	public static readonly LineComment = 71;
	public static readonly BlockComment = 72;
	public static readonly NAMSP = 73;
	public static readonly NAMESPACE = 74;
	public static readonly LOCAL = 75;
	public static readonly EXEC = 76;
	public static readonly RUN = 77;
	public static readonly STORE = 78;
	public static readonly ALIGN = 79;
	public static readonly ANCHORED = 80;
	public static readonly EYES = 81;
	public static readonly FEET = 82;
	public static readonly IN = 83;
	public static readonly AS = 84;
	public static readonly AT = 85;
	public static readonly FACING = 86;
	public static readonly POSITIONED = 87;
	public static readonly POS = 88;
	public static readonly ROTATED = 89;
	public static readonly ROT = 90;
	public static readonly IF = 91;
	public static readonly UNLESS = 92;
	public static readonly ALL = 93;
	public static readonly MASKED = 94;
	public static readonly BIOME = 95;
	public static readonly VALUE = 96;
	public static readonly MAX = 97;
	public static readonly ENTITY = 98;
	public static readonly SCORE = 99;
	public static readonly PREDICATE = 100;
	public static readonly BLOCK = 101;
	public static readonly BLOCKS = 102;
	public static readonly MATCHES = 103;
	public static readonly RESULT = 104;
	public static readonly SUCCESS = 105;
	public static readonly SCB = 106;
	public static readonly DISPLAYNAME = 107;
	public static readonly RENDERTYPE = 108;
	public static readonly DISPLAY = 109;
	public static readonly ENABLE = 110;
	public static readonly LIST = 111;
	public static readonly HEARTS = 112;
	public static readonly INTEGER = 113;
	public static readonly DATA = 114;
	public static readonly STORAGE = 115;
	public static readonly RESET = 116;
	public static readonly ADD = 117;
	public static readonly REMOVE = 118;
	public static readonly FUNC = 119;
	public static readonly TAGGED = 120;
	public static readonly DEFAULT = 121;
	public static readonly PLAYER = 122;
	public static readonly PLAYERS = 123;
	public static readonly BOSSBAR = 124;
	public static readonly VISIBLE = 125;
	public static readonly BLUE = 126;
	public static readonly GREEN = 127;
	public static readonly PINK = 128;
	public static readonly PURPLE = 129;
	public static readonly RED = 130;
	public static readonly WHITE = 131;
	public static readonly YELLOW = 132;
	public static readonly COLOR = 133;
	public static readonly NAME = 134;
	public static readonly STYLE = 135;
	public static readonly NOTCHED_6 = 136;
	public static readonly NOTCHED_10 = 137;
	public static readonly NOTCHED_12 = 138;
	public static readonly NOTCHED_20 = 139;
	public static readonly PROGRESS = 140;
	public static readonly SET = 141;
	public static readonly TITLE = 142;
	public static readonly SUBTITLE = 143;
	public static readonly ACTIONBAR = 144;
	public static readonly TIMES = 145;
	public static readonly TEXT = 146;
	public static readonly ITEM = 147;
	public static readonly LOOT = 148;
	public static readonly GIVE = 149;
	public static readonly CLEAR = 150;
	public static readonly FISH = 151;
	public static readonly KILL = 152;
	public static readonly MINE = 153;
	public static readonly MAINHAND = 154;
	public static readonly OFFHAND = 155;
	public static readonly EFFECT = 156;
	public static readonly TAG = 157;
	public static readonly TP = 158;
	public static readonly GET = 159;
	public static readonly ATTR = 160;
	public static readonly BASE = 161;
	public static readonly DESTROY = 162;
	public static readonly KEEP = 163;
	public static readonly REPLACE = 164;
	public static readonly HOLLOW = 165;
	public static readonly OUTLINE = 166;
	public static readonly FORCE = 167;
	public static readonly MOVE = 168;
	public static readonly NORMAL = 169;
	public static readonly FILTERED = 170;
	public static readonly INTERFACE = 171;
	public static readonly WHILE = 172;
	public static readonly ELSE = 173;
	public static readonly FOR = 174;
	public static readonly YIELD = 175;
	public static readonly BREAK = 176;
	public static readonly CONTINUE = 177;
	public static readonly RETURN = 178;
	public static readonly REPLACED = 179;
	public static readonly DIM = 180;
	public static readonly DIMENSION = 181;
	public static readonly ITEM_MODIFIER = 182;
	public static readonly DPOS = 183;
	public static readonly X = 184;
	public static readonly Y = 185;
	public static readonly Z = 186;
	public static readonly DX = 187;
	public static readonly DY = 188;
	public static readonly DZ = 189;
	public static readonly X_ROTATION = 190;
	public static readonly Y_ROTATION = 191;
	public static readonly DISTANCE = 192;
	public static readonly NBT = 193;
	public static readonly SCORES = 194;
	public static readonly TEAM = 195;
	public static readonly TYPE = 196;
	public static readonly LEVEL = 197;
	public static readonly GAMEMODE = 198;
	public static readonly SPECTATOR = 199;
	public static readonly SURVIVAL = 200;
	public static readonly CREATIVE = 201;
	public static readonly ADVENTURE = 202;
	public static readonly ADVANCEMENTS = 203;
	public static readonly ADVANCEMENT = 204;
	public static readonly ADVM = 205;
	public static readonly LIMIT = 206;
	public static readonly SORT = 207;
	public static readonly NEAREST = 208;
	public static readonly FURTHEST = 209;
	public static readonly RANDOM = 210;
	public static readonly ARBITRARY = 211;
	public static readonly SelectorKey = 212;
	public static readonly Pos1 = 213;
	public static readonly BYTE = 214;
	public static readonly SHORT = 215;
	public static readonly INT_ = 216;
	public static readonly LONG = 217;
	public static readonly FLOAT = 218;
	public static readonly DOUBLE = 219;
	public static readonly AcceptableName = 220;
	public static readonly NBTName = 221;
	public static readonly CompareOperation = 222;
	public static readonly RULE_mcfFile = 0;
	public static readonly RULE_fileStatementInner = 1;
	public static readonly RULE_statementInner = 2;
	public static readonly RULE_statement = 3;
	public static readonly RULE_noInExecStatement = 4;
	public static readonly RULE_leagalCommand = 5;
	public static readonly RULE_nameSpaceStatement = 6;
	public static readonly RULE_nameSpaceSettings = 7;
	public static readonly RULE_nameSpaceStatementInner = 8;
	public static readonly RULE_namespaceSetStatement = 9;
	public static readonly RULE_funcTagStatement = 10;
	public static readonly RULE_funcTagSettings = 11;
	public static readonly RULE_funcTagStatementInner = 12;
	public static readonly RULE_funcStatement = 13;
	public static readonly RULE_funcImproveStatement = 14;
	public static readonly RULE_funcImproveParam = 15;
	public static readonly RULE_yieldStatement = 16;
	public static readonly RULE_returnStatement = 17;
	public static readonly RULE_breakStatement = 18;
	public static readonly RULE_continueStatement = 19;
	public static readonly RULE_funcRunStatement = 20;
	public static readonly RULE_funcImproveRunStatement = 21;
	public static readonly RULE_funcImproveRunExpression = 22;
	public static readonly RULE_funcImproveRunParam = 23;
	public static readonly RULE_execStatement = 24;
	public static readonly RULE_execStoreChild = 25;
	public static readonly RULE_execRunChild = 26;
	public static readonly RULE_execChild = 27;
	public static readonly RULE_scbCompareNumber = 28;
	public static readonly RULE_dataIdentifier = 29;
	public static readonly RULE_dataStorageIdentifier = 30;
	public static readonly RULE_dataEntityIdentifier = 31;
	public static readonly RULE_dataBlockIdentifier = 32;
	public static readonly RULE_dataMergeExpression = 33;
	public static readonly RULE_dataOperationExpression = 34;
	public static readonly RULE_dataRightValue = 35;
	public static readonly RULE_dataStatement = 36;
	public static readonly RULE_scbOperationExpression = 37;
	public static readonly RULE_scbSingleOperationExpression = 38;
	public static readonly RULE_scbCoreIdentifier = 39;
	public static readonly RULE_scbIdentifier = 40;
	public static readonly RULE_scbPlayerStatement = 41;
	public static readonly RULE_scbPlayerStatementInner = 42;
	public static readonly RULE_scbObjectiveStatement = 43;
	public static readonly RULE_scbStatementInner = 44;
	public static readonly RULE_bossbarStatement = 45;
	public static readonly RULE_bossbarStatementInner = 46;
	public static readonly RULE_bossbarOperationExpression = 47;
	public static readonly RULE_bossbarIdentifier = 48;
	public static readonly RULE_titleStatement = 49;
	public static readonly RULE_titleStatementInner = 50;
	public static readonly RULE_titleSelectorStatementInner = 51;
	public static readonly RULE_titleIndependentStatementInner = 52;
	public static readonly RULE_displayStatement = 53;
	public static readonly RULE_displayStatementInner = 54;
	public static readonly RULE_displayIndependentStatementInner = 55;
	public static readonly RULE_itemStatement = 56;
	public static readonly RULE_lootStatement = 57;
	public static readonly RULE_lootStatementInner = 58;
	public static readonly RULE_lootSelectorStatementInner = 59;
	public static readonly RULE_lootIndependentStatementInnerGive = 60;
	public static readonly RULE_lootIndependentStatementInnerReplaceEntity = 61;
	public static readonly RULE_lootSource = 62;
	public static readonly RULE_itemStatementInner = 63;
	public static readonly RULE_itemSelectorStatementInner = 64;
	public static readonly RULE_itemIndependentStatementInner = 65;
	public static readonly RULE_giveAndClearIndependentStatementInner = 66;
	public static readonly RULE_attrStatement = 67;
	public static readonly RULE_attrStatementInner = 68;
	public static readonly RULE_attrIndependentStatementInner = 69;
	public static readonly RULE_entityStatement = 70;
	public static readonly RULE_playerName = 71;
	public static readonly RULE_entityDeclareStatementInner = 72;
	public static readonly RULE_tagIndependentStatementInner = 73;
	public static readonly RULE_effectIndependentStatementInner = 74;
	public static readonly RULE_tpIndependentStatementInner = 75;
	public static readonly RULE_entityIndependentStatementInner = 76;
	public static readonly RULE_entityStatementInner = 77;
	public static readonly RULE_entityExpression = 78;
	public static readonly RULE_blockStatement = 79;
	public static readonly RULE_blockStatementInner = 80;
	public static readonly RULE_interfaceStatement = 81;
	public static readonly RULE_dataAssignExistExpression = 82;
	public static readonly RULE_existExpression = 83;
	public static readonly RULE_ifStatement = 84;
	public static readonly RULE_ifElseStatement = 85;
	public static readonly RULE_whileStatement = 86;
	public static readonly RULE_forStatement = 87;
	public static readonly RULE_nbt = 88;
	public static readonly RULE_json = 89;
	public static readonly RULE_nbtPathWithoutCompound = 90;
	public static readonly RULE_nbtPath = 91;
	public static readonly RULE_snbtValue = 92;
	public static readonly RULE_snbt = 93;
	public static readonly RULE_nbtCompound = 94;
	public static readonly RULE_nbtPair = 95;
	public static readonly RULE_nbtList = 96;
	public static readonly RULE_nbtValue = 97;
	public static readonly RULE_nbtByteArr = 98;
	public static readonly RULE_nbtIntArr = 99;
	public static readonly RULE_nbtLongArr = 100;
	public static readonly RULE_nbtString = 101;
	public static readonly RULE_jsonTextValue = 102;
	public static readonly RULE_jsonText = 103;
	public static readonly RULE_jsonObj = 104;
	public static readonly RULE_jsonPair = 105;
	public static readonly RULE_jsonArr = 106;
	public static readonly RULE_jsonValue = 107;
	public static readonly RULE_boolValue = 108;
	public static readonly RULE_number = 109;
	public static readonly RULE_end = 110;
	public static readonly RULE_ends = 111;
	public static readonly RULE_p_ = 112;
	public static readonly RULE_pn_ = 113;
	public static readonly RULE_s_ = 114;
	public static readonly RULE_key = 115;
	public static readonly RULE_pos3Identifier = 116;
	public static readonly RULE_pos2Identifier = 117;
	public static readonly RULE_pos5Identifier = 118;
	public static readonly RULE_pos1 = 119;
	public static readonly RULE_blockIdentifier = 120;
	public static readonly RULE_blockstate = 121;
	public static readonly RULE_blockstateValue = 122;
	public static readonly RULE_blockstateParam = 123;
	public static readonly RULE_nameSpace = 124;
	public static readonly RULE_nameSpaceBlock = 125;
	public static readonly RULE_nameSpaceFunc = 126;
	public static readonly RULE_nameSpaceStorage = 127;
	public static readonly RULE_nameSpaceBossbar = 128;
	public static readonly RULE_nameSpaceBiome = 129;
	public static readonly RULE_nameSpaceDim = 130;
	public static readonly RULE_nameSpacePredicate = 131;
	public static readonly RULE_nameSpaceItem = 132;
	public static readonly RULE_nameSpaceEntity = 133;
	public static readonly RULE_nameSpaceLoot = 134;
	public static readonly RULE_nameSpaceItemModifier = 135;
	public static readonly RULE_nameSpaceAdvancement = 136;
	public static readonly RULE_tagNameSpace = 137;
	public static readonly RULE_tagNameSpaceItem = 138;
	public static readonly RULE_tagNameSpaceBlock = 139;
	public static readonly RULE_tagNameSpaceFunc = 140;
	public static readonly RULE_tagNameSpaceEntity = 141;
	public static readonly RULE_registerName = 142;
	public static readonly RULE_numberType = 143;
	public static readonly RULE_acceptableNameWithoutPointWithKey = 144;
	public static readonly RULE_criterion = 145;
	public static readonly RULE_nbtName = 146;
	public static readonly RULE_acceptableName = 147;
	public static readonly RULE_acceptableNameWithNumber = 148;
	public static readonly RULE_resourceLocation = 149;
	public static readonly RULE_typeName = 150;
	public static readonly RULE_item_slot = 151;
	public static readonly RULE_string = 152;
	public static readonly RULE_item_predicate = 153;
	public static readonly RULE_block_predicate = 154;
	public static readonly RULE_intRange = 155;
	public static readonly RULE_positiveNumberRange = 156;
	public static readonly RULE_numberRange = 157;
	public static readonly RULE_selector = 158;
	public static readonly RULE_selectorWithParams = 159;
	public static readonly RULE_selectorParam = 160;
	public static readonly RULE_selectorType = 161;
	public static readonly RULE_selectorTypes = 162;
	public static readonly RULE_selectorNbtCompound = 163;
	public static readonly RULE_selectorScoresPart = 164;
	public static readonly RULE_selectorScoresPartImprove = 165;
	public static readonly RULE_selectorAdvancementsPart = 166;
	public static readonly RULE_selectorAdvancementsCriteria = 167;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"mcfFile", "fileStatementInner", "statementInner", "statement", "noInExecStatement", 
		"leagalCommand", "nameSpaceStatement", "nameSpaceSettings", "nameSpaceStatementInner", 
		"namespaceSetStatement", "funcTagStatement", "funcTagSettings", "funcTagStatementInner", 
		"funcStatement", "funcImproveStatement", "funcImproveParam", "yieldStatement", 
		"returnStatement", "breakStatement", "continueStatement", "funcRunStatement", 
		"funcImproveRunStatement", "funcImproveRunExpression", "funcImproveRunParam", 
		"execStatement", "execStoreChild", "execRunChild", "execChild", "scbCompareNumber", 
		"dataIdentifier", "dataStorageIdentifier", "dataEntityIdentifier", "dataBlockIdentifier", 
		"dataMergeExpression", "dataOperationExpression", "dataRightValue", "dataStatement", 
		"scbOperationExpression", "scbSingleOperationExpression", "scbCoreIdentifier", 
		"scbIdentifier", "scbPlayerStatement", "scbPlayerStatementInner", "scbObjectiveStatement", 
		"scbStatementInner", "bossbarStatement", "bossbarStatementInner", "bossbarOperationExpression", 
		"bossbarIdentifier", "titleStatement", "titleStatementInner", "titleSelectorStatementInner", 
		"titleIndependentStatementInner", "displayStatement", "displayStatementInner", 
		"displayIndependentStatementInner", "itemStatement", "lootStatement", 
		"lootStatementInner", "lootSelectorStatementInner", "lootIndependentStatementInnerGive", 
		"lootIndependentStatementInnerReplaceEntity", "lootSource", "itemStatementInner", 
		"itemSelectorStatementInner", "itemIndependentStatementInner", "giveAndClearIndependentStatementInner", 
		"attrStatement", "attrStatementInner", "attrIndependentStatementInner", 
		"entityStatement", "playerName", "entityDeclareStatementInner", "tagIndependentStatementInner", 
		"effectIndependentStatementInner", "tpIndependentStatementInner", "entityIndependentStatementInner", 
		"entityStatementInner", "entityExpression", "blockStatement", "blockStatementInner", 
		"interfaceStatement", "dataAssignExistExpression", "existExpression", 
		"ifStatement", "ifElseStatement", "whileStatement", "forStatement", "nbt", 
		"json", "nbtPathWithoutCompound", "nbtPath", "snbtValue", "snbt", "nbtCompound", 
		"nbtPair", "nbtList", "nbtValue", "nbtByteArr", "nbtIntArr", "nbtLongArr", 
		"nbtString", "jsonTextValue", "jsonText", "jsonObj", "jsonPair", "jsonArr", 
		"jsonValue", "boolValue", "number", "end", "ends", "p_", "pn_", "s_", 
		"key", "pos3Identifier", "pos2Identifier", "pos5Identifier", "pos1", "blockIdentifier", 
		"blockstate", "blockstateValue", "blockstateParam", "nameSpace", "nameSpaceBlock", 
		"nameSpaceFunc", "nameSpaceStorage", "nameSpaceBossbar", "nameSpaceBiome", 
		"nameSpaceDim", "nameSpacePredicate", "nameSpaceItem", "nameSpaceEntity", 
		"nameSpaceLoot", "nameSpaceItemModifier", "nameSpaceAdvancement", "tagNameSpace", 
		"tagNameSpaceItem", "tagNameSpaceBlock", "tagNameSpaceFunc", "tagNameSpaceEntity", 
		"registerName", "numberType", "acceptableNameWithoutPointWithKey", "criterion", 
		"nbtName", "acceptableName", "acceptableNameWithNumber", "resourceLocation", 
		"typeName", "item_slot", "string", "item_predicate", "block_predicate", 
		"intRange", "positiveNumberRange", "numberRange", "selector", "selectorWithParams", 
		"selectorParam", "selectorType", "selectorTypes", "selectorNbtCompound", 
		"selectorScoresPart", "selectorScoresPartImprove", "selectorAdvancementsPart", 
		"selectorAdvancementsCriteria",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'->'", "'['", "']'", "'{'", "'}'", "'='", "'('", "')'", "'+1'", 
		"'=>'", "'?=>'", "'?'", "'*'", "'::'", "'|='", "'..'", "'..0'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'><'", "'<<'", "'>>'", "':='", "'/'", 
		"'%'", "'+'", "'-'", "':'", "'.'", "'*+'", "','", "'#'", "'!'", "'&'", 
		"'|'", "'&&'", "'||'", "'[]'", "'n{'", "'n['", "'n[B;'", "'n[I;'", "'n[L;'", 
		"'[B;'", "'[I;'", "'[L;'", "'j{'", "'j['", "';'", "'@'", undefined, undefined, 
		undefined, undefined, undefined, undefined, "'true'", "'false'", "'null'", 
		undefined, undefined, undefined, undefined, "';;'", undefined, undefined, 
		undefined, undefined, undefined, "'namsp'", "'namespace'", "'local'", 
		"'exec'", "'run'", "'store'", "'align'", "'anchored'", "'eyes'", "'feet'", 
		"'in'", "'as'", "'at'", "'facing'", "'positioned'", "'pos'", "'rotated'", 
		"'rot'", "'if'", "'unless'", "'all'", "'masked'", "'biome'", "'value'", 
		"'max'", "'entity'", "'score'", "'predicate'", "'block'", "'blocks'", 
		"'matches'", "'result'", "'successs'", "'scb'", "'displayname'", "'rendertype'", 
		"'display'", "'enable'", "'list'", "'hearts'", "'integer'", "'data'", 
		"'storage'", "'reset'", "'add'", "'remove'", "'func'", "'tagged'", "'default'", 
		"'player'", "'players'", "'bossbar'", "'visible'", "'blue'", "'green'", 
		"'pink'", "'purple'", "'red'", "'white'", "'yellow'", "'color'", "'name'", 
		"'style'", "'notched_6'", "'notched_10'", "'notched_12'", "'notched_20'", 
		"'progress'", "'set'", "'title'", "'subtitle'", "'actionbar'", "'times'", 
		"'text'", "'item'", "'loot'", "'give'", "'clear'", "'fish'", "'kill'", 
		"'mine'", "'mainhand'", "'offhand'", "'effect'", "'tag'", "'tp'", "'get'", 
		"'attr'", "'base'", "'destroy'", "'keep'", "'replace'", "'hollow'", "'outline'", 
		"'force'", "'move'", "'normal'", "'filtered'", "'interface'", "'while'", 
		"'else'", "'for'", "'yield'", "'break'", "'continue'", "'return'", "'replaced'", 
		"'dim'", "'dimension'", "'item_modifier'", "'dpos'", "'x'", "'y'", "'z'", 
		"'dx'", "'dy'", "'dz'", "'x_rotation'", "'y_rotation'", "'distance'", 
		"'nbt'", "'scores'", "'team'", "'type'", "'level'", "'gamemode'", "'spectator'", 
		"'survival'", "'creative'", "'adventure'", "'advancements'", "'advancement'", 
		"'advm'", "'limit'", "'sort'", "'nearest'", "'furthest'", "'random'", 
		"'arbitrary'", undefined, undefined, "'byte'", "'short'", "'int'", "'long'", 
		"'float'", "'double'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "ByteNumber", "ShortNumber", 
		"LongNumber", "FloatNumber", "DoubleNumber", "STRING2", "TRUE", "FALSE", 
		"NULL", "STRING", "UUID16_", "NUMBER_INT", "NUMBER", "DOUBLE_SEMICOLON", 
		"NL", "WS", "LeagalCommand", "LineComment", "BlockComment", "NAMSP", "NAMESPACE", 
		"LOCAL", "EXEC", "RUN", "STORE", "ALIGN", "ANCHORED", "EYES", "FEET", 
		"IN", "AS", "AT", "FACING", "POSITIONED", "POS", "ROTATED", "ROT", "IF", 
		"UNLESS", "ALL", "MASKED", "BIOME", "VALUE", "MAX", "ENTITY", "SCORE", 
		"PREDICATE", "BLOCK", "BLOCKS", "MATCHES", "RESULT", "SUCCESS", "SCB", 
		"DISPLAYNAME", "RENDERTYPE", "DISPLAY", "ENABLE", "LIST", "HEARTS", "INTEGER", 
		"DATA", "STORAGE", "RESET", "ADD", "REMOVE", "FUNC", "TAGGED", "DEFAULT", 
		"PLAYER", "PLAYERS", "BOSSBAR", "VISIBLE", "BLUE", "GREEN", "PINK", "PURPLE", 
		"RED", "WHITE", "YELLOW", "COLOR", "NAME", "STYLE", "NOTCHED_6", "NOTCHED_10", 
		"NOTCHED_12", "NOTCHED_20", "PROGRESS", "SET", "TITLE", "SUBTITLE", "ACTIONBAR", 
		"TIMES", "TEXT", "ITEM", "LOOT", "GIVE", "CLEAR", "FISH", "KILL", "MINE", 
		"MAINHAND", "OFFHAND", "EFFECT", "TAG", "TP", "GET", "ATTR", "BASE", "DESTROY", 
		"KEEP", "REPLACE", "HOLLOW", "OUTLINE", "FORCE", "MOVE", "NORMAL", "FILTERED", 
		"INTERFACE", "WHILE", "ELSE", "FOR", "YIELD", "BREAK", "CONTINUE", "RETURN", 
		"REPLACED", "DIM", "DIMENSION", "ITEM_MODIFIER", "DPOS", "X", "Y", "Z", 
		"DX", "DY", "DZ", "X_ROTATION", "Y_ROTATION", "DISTANCE", "NBT", "SCORES", 
		"TEAM", "TYPE", "LEVEL", "GAMEMODE", "SPECTATOR", "SURVIVAL", "CREATIVE", 
		"ADVENTURE", "ADVANCEMENTS", "ADVANCEMENT", "ADVM", "LIMIT", "SORT", "NEAREST", 
		"FURTHEST", "RANDOM", "ARBITRARY", "SelectorKey", "Pos1", "BYTE", "SHORT", 
		"INT_", "LONG", "FLOAT", "DOUBLE", "AcceptableName", "NBTName", "CompareOperation",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JustMCFParser._LITERAL_NAMES, JustMCFParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JustMCFParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "JustMCF.g4"; }

	// @Override
	public get ruleNames(): string[] { return JustMCFParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return JustMCFParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(JustMCFParser._ATN, this);
	}
	// @RuleVersion(0)
	public mcfFile(): McfFileContext {
		let _localctx: McfFileContext = new McfFileContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, JustMCFParser.RULE_mcfFile);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 336;
			this.s_();
			this.state = 349;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.NAMSP || _la === JustMCFParser.NAMESPACE || _la === JustMCFParser.FUNC || _la === JustMCFParser.INTERFACE) {
				{
				this.state = 337;
				this.fileStatementInner();
				this.state = 343;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 338;
						this.ends();
						this.state = 339;
						this.fileStatementInner();
						}
						}
					}
					this.state = 345;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 0, this._ctx);
				}
				this.state = 347;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
					{
					this.state = 346;
					this.ends();
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fileStatementInner(): FileStatementInnerContext {
		let _localctx: FileStatementInnerContext = new FileStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, JustMCFParser.RULE_fileStatementInner);
		try {
			this.state = 353;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 3, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 351;
				this.nameSpaceStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 352;
				this.nameSpaceStatementInner();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statementInner(): StatementInnerContext {
		let _localctx: StatementInnerContext = new StatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, JustMCFParser.RULE_statementInner);
		try {
			this.state = 357;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 4, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 355;
				this.noInExecStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 356;
				this.statement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, JustMCFParser.RULE_statement);
		try {
			this.state = 387;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 5, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 359;
				this.ifStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 360;
				this.forStatement();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 361;
				this.whileStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 362;
				this.namespaceSetStatement();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 363;
				this.funcRunStatement();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 364;
				this.funcImproveRunStatement();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 365;
				this.yieldStatement();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 366;
				this.returnStatement();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 367;
				this.breakStatement();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 368;
				this.continueStatement();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 369;
				this.execStatement();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 370;
				this.dataStatement();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 371;
				this.scbPlayerStatement();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 372;
				this.scbObjectiveStatement();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 373;
				this.titleStatement();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 374;
				this.bossbarStatement();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 375;
				this.displayStatement();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 376;
				this.lootStatement();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 377;
				this.itemStatement();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 378;
				this.attrStatement();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 379;
				this.entityStatement();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 380;
				this.blockStatement();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 381;
				this.dataOperationExpression();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 382;
				this.dataAssignExistExpression();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 383;
				this.scbOperationExpression();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 384;
				this.bossbarOperationExpression();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 385;
				this.entityExpression();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 386;
				this.leagalCommand();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public noInExecStatement(): NoInExecStatementContext {
		let _localctx: NoInExecStatementContext = new NoInExecStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, JustMCFParser.RULE_noInExecStatement);
		let _la: number;
		try {
			this.state = 401;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 7, this._ctx) ) {
			case 1:
				_localctx = new NoInExecStatementFuncContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 389;
				this.funcStatement();
				}
				break;

			case 2:
				_localctx = new NoInExecStatementRunFuncContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 390;
				(_localctx as NoInExecStatementRunFuncContext)._left = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.T__0 || _la === JustMCFParser.RUN)) {
					(_localctx as NoInExecStatementRunFuncContext)._left = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 391;
				this.funcStatement();
				}
				break;

			case 3:
				_localctx = new NoInExecStatementFuncImproveContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 392;
				this.funcImproveStatement();
				}
				break;

			case 4:
				_localctx = new NoInExecStatementInterfaceContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 393;
				this.interfaceStatement();
				}
				break;

			case 5:
				_localctx = new NoInExecStatementStoreContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 394;
				this.statement();
				this.state = 395;
				this.s_();
				this.state = 397;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 396;
					this.execStoreChild();
					}
					}
					this.state = 399;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << JustMCFParser.T__9) | (1 << JustMCFParser.T__10) | (1 << JustMCFParser.T__11))) !== 0) || _la === JustMCFParser.STORE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leagalCommand(): LeagalCommandContext {
		let _localctx: LeagalCommandContext = new LeagalCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, JustMCFParser.RULE_leagalCommand);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 403;
			this.match(JustMCFParser.LeagalCommand);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceStatement(): NameSpaceStatementContext {
		let _localctx: NameSpaceStatementContext = new NameSpaceStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, JustMCFParser.RULE_nameSpaceStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 405;
			_la = this._input.LA(1);
			if (!(_la === JustMCFParser.NAMSP || _la === JustMCFParser.NAMESPACE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 407;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 8, this._ctx) ) {
			case 1:
				{
				this.state = 406;
				this.acceptableName();
				}
				break;
			}
			this.state = 409;
			this.s_();
			this.state = 424;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.T__1) {
				{
				this.state = 410;
				this.match(JustMCFParser.T__1);
				this.state = 411;
				this.s_();
				this.state = 418;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 95)) & ~0x1F) === 0 && ((1 << (_la - 95)) & ((1 << (JustMCFParser.BIOME - 95)) | (1 << (JustMCFParser.ENTITY - 95)) | (1 << (JustMCFParser.PREDICATE - 95)) | (1 << (JustMCFParser.BLOCK - 95)) | (1 << (JustMCFParser.STORAGE - 95)) | (1 << (JustMCFParser.FUNC - 95)) | (1 << (JustMCFParser.DEFAULT - 95)) | (1 << (JustMCFParser.BOSSBAR - 95)))) !== 0) || _la === JustMCFParser.ITEM || _la === JustMCFParser.LOOT || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & ((1 << (JustMCFParser.DIM - 180)) | (1 << (JustMCFParser.DIMENSION - 180)) | (1 << (JustMCFParser.ITEM_MODIFIER - 180)) | (1 << (JustMCFParser.ADVANCEMENT - 180)) | (1 << (JustMCFParser.ADVM - 180)))) !== 0)) {
					{
					{
					this.state = 412;
					this.nameSpaceSettings();
					this.state = 414;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__33 || _la === JustMCFParser.NL) {
						{
						this.state = 413;
						this.p_();
						}
					}

					}
					}
					this.state = 420;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 421;
				this.match(JustMCFParser.T__2);
				this.state = 422;
				this.s_();
				}
			}

			this.state = 426;
			this.match(JustMCFParser.T__3);
			this.state = 427;
			this.s_();
			this.state = 440;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.NAMSP || _la === JustMCFParser.NAMESPACE || _la === JustMCFParser.FUNC || _la === JustMCFParser.INTERFACE) {
				{
				this.state = 428;
				this.nameSpaceStatementInner();
				this.state = 434;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 429;
						this.ends();
						this.state = 430;
						this.nameSpaceStatementInner();
						}
						}
					}
					this.state = 436;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
				}
				this.state = 438;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
					{
					this.state = 437;
					this.ends();
					}
				}

				}
			}

			this.state = 442;
			this.match(JustMCFParser.T__4);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceSettings(): NameSpaceSettingsContext {
		let _localctx: NameSpaceSettingsContext = new NameSpaceSettingsContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, JustMCFParser.RULE_nameSpaceSettings);
		let _la: number;
		try {
			this.state = 484;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				_localctx = new NameSpaceSettingsFuncContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 444;
				(_localctx as NameSpaceSettingsFuncContext)._type = this.match(JustMCFParser.FUNC);
				this.state = 445;
				this.match(JustMCFParser.T__5);
				this.state = 446;
				this.acceptableName();
				}
				break;

			case 2:
				_localctx = new NameSpaceSettingsBlockContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 447;
				(_localctx as NameSpaceSettingsBlockContext)._type = this.match(JustMCFParser.BLOCK);
				this.state = 448;
				this.match(JustMCFParser.T__5);
				this.state = 449;
				this.acceptableName();
				}
				break;

			case 3:
				_localctx = new NameSpaceSettingsStorageContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 450;
				(_localctx as NameSpaceSettingsStorageContext)._type = this.match(JustMCFParser.STORAGE);
				this.state = 451;
				this.match(JustMCFParser.T__5);
				this.state = 452;
				this.acceptableName();
				}
				break;

			case 4:
				_localctx = new NameSpaceSettingsBossbarContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 453;
				(_localctx as NameSpaceSettingsBossbarContext)._type = this.match(JustMCFParser.BOSSBAR);
				this.state = 454;
				this.match(JustMCFParser.T__5);
				this.state = 455;
				this.acceptableName();
				}
				break;

			case 5:
				_localctx = new NameSpaceSettingsBiomeContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 456;
				(_localctx as NameSpaceSettingsBiomeContext)._type = this.match(JustMCFParser.BIOME);
				this.state = 457;
				this.match(JustMCFParser.T__5);
				this.state = 458;
				this.acceptableName();
				}
				break;

			case 6:
				_localctx = new NameSpaceSettingsEntityContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 459;
				(_localctx as NameSpaceSettingsEntityContext)._type = this.match(JustMCFParser.ENTITY);
				this.state = 460;
				this.match(JustMCFParser.T__5);
				this.state = 461;
				this.acceptableName();
				}
				break;

			case 7:
				_localctx = new NameSpaceSettingsPredicateContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 462;
				(_localctx as NameSpaceSettingsPredicateContext)._type = this.match(JustMCFParser.PREDICATE);
				this.state = 463;
				this.match(JustMCFParser.T__5);
				this.state = 464;
				this.acceptableName();
				}
				break;

			case 8:
				_localctx = new NameSpaceSettingsDimContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 465;
				(_localctx as NameSpaceSettingsDimContext)._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.DIM || _la === JustMCFParser.DIMENSION)) {
					(_localctx as NameSpaceSettingsDimContext)._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 466;
				this.match(JustMCFParser.T__5);
				this.state = 467;
				this.acceptableName();
				}
				break;

			case 9:
				_localctx = new NameSpaceSettingsItemContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 468;
				(_localctx as NameSpaceSettingsItemContext)._type = this.match(JustMCFParser.ITEM);
				this.state = 469;
				this.match(JustMCFParser.T__5);
				this.state = 470;
				this.acceptableName();
				}
				break;

			case 10:
				_localctx = new NameSpaceSettingsLootContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 471;
				(_localctx as NameSpaceSettingsLootContext)._type = this.match(JustMCFParser.LOOT);
				this.state = 472;
				this.match(JustMCFParser.T__5);
				this.state = 473;
				this.acceptableName();
				}
				break;

			case 11:
				_localctx = new NameSpaceSettingsItemModifierContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 474;
				(_localctx as NameSpaceSettingsItemModifierContext)._type = this.match(JustMCFParser.ITEM_MODIFIER);
				this.state = 475;
				this.match(JustMCFParser.T__5);
				this.state = 476;
				this.acceptableName();
				}
				break;

			case 12:
				_localctx = new NameSpaceSettingsDefaultContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 477;
				(_localctx as NameSpaceSettingsDefaultContext)._type = this.match(JustMCFParser.DEFAULT);
				this.state = 478;
				this.match(JustMCFParser.T__5);
				this.state = 479;
				this.acceptableName();
				}
				break;

			case 13:
				_localctx = new NameSpaceSettingsAdvmContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 480;
				(_localctx as NameSpaceSettingsAdvmContext)._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.ADVANCEMENT || _la === JustMCFParser.ADVM)) {
					(_localctx as NameSpaceSettingsAdvmContext)._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 481;
				this.match(JustMCFParser.T__5);
				this.state = 482;
				this.acceptableName();
				}
				break;

			case 14:
				_localctx = new NameSpaceSettingsJustDefaultContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 483;
				(_localctx as NameSpaceSettingsJustDefaultContext)._type = this.match(JustMCFParser.DEFAULT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceStatementInner(): NameSpaceStatementInnerContext {
		let _localctx: NameSpaceStatementInnerContext = new NameSpaceStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, JustMCFParser.RULE_nameSpaceStatementInner);
		try {
			this.state = 490;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 486;
				this.funcTagStatement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 487;
				this.funcTagStatementInner();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 488;
				this.interfaceStatement();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 489;
				this.nameSpaceStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public namespaceSetStatement(): NamespaceSetStatementContext {
		let _localctx: NamespaceSetStatementContext = new NamespaceSetStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, JustMCFParser.RULE_namespaceSetStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 492;
			_la = this._input.LA(1);
			if (!(_la === JustMCFParser.NAMSP || _la === JustMCFParser.NAMESPACE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 494;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 17, this._ctx) ) {
			case 1:
				{
				this.state = 493;
				this.acceptableName();
				}
				break;
			}
			this.state = 496;
			this.s_();
			this.state = 511;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.T__1) {
				{
				this.state = 497;
				this.match(JustMCFParser.T__1);
				this.state = 498;
				this.s_();
				this.state = 505;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 95)) & ~0x1F) === 0 && ((1 << (_la - 95)) & ((1 << (JustMCFParser.BIOME - 95)) | (1 << (JustMCFParser.ENTITY - 95)) | (1 << (JustMCFParser.PREDICATE - 95)) | (1 << (JustMCFParser.BLOCK - 95)) | (1 << (JustMCFParser.STORAGE - 95)) | (1 << (JustMCFParser.FUNC - 95)) | (1 << (JustMCFParser.DEFAULT - 95)) | (1 << (JustMCFParser.BOSSBAR - 95)))) !== 0) || _la === JustMCFParser.ITEM || _la === JustMCFParser.LOOT || ((((_la - 180)) & ~0x1F) === 0 && ((1 << (_la - 180)) & ((1 << (JustMCFParser.DIM - 180)) | (1 << (JustMCFParser.DIMENSION - 180)) | (1 << (JustMCFParser.ITEM_MODIFIER - 180)) | (1 << (JustMCFParser.ADVANCEMENT - 180)) | (1 << (JustMCFParser.ADVM - 180)))) !== 0)) {
					{
					{
					this.state = 499;
					this.nameSpaceSettings();
					this.state = 501;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__33 || _la === JustMCFParser.NL) {
						{
						this.state = 500;
						this.p_();
						}
					}

					}
					}
					this.state = 507;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 508;
				this.match(JustMCFParser.T__2);
				this.state = 509;
				this.s_();
				}
			}

			this.state = 513;
			this.match(JustMCFParser.T__3);
			this.state = 514;
			this.s_();
			this.state = 527;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 23, this._ctx) ) {
			case 1:
				{
				this.state = 515;
				this.statementInner();
				this.state = 521;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 516;
						this.ends();
						this.state = 517;
						this.statementInner();
						}
						}
					}
					this.state = 523;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 21, this._ctx);
				}
				this.state = 525;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
					{
					this.state = 524;
					this.ends();
					}
				}

				}
				break;
			}
			this.state = 529;
			this.match(JustMCFParser.T__4);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public funcTagStatement(): FuncTagStatementContext {
		let _localctx: FuncTagStatementContext = new FuncTagStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, JustMCFParser.RULE_funcTagStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 531;
			this.match(JustMCFParser.FUNC);
			this.state = 532;
			this.tagNameSpaceFunc();
			this.state = 533;
			this.s_();
			this.state = 548;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.T__1) {
				{
				this.state = 534;
				this.match(JustMCFParser.T__1);
				this.state = 535;
				this.s_();
				this.state = 542;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.REPLACE || _la === JustMCFParser.REPLACED) {
					{
					{
					this.state = 536;
					this.funcTagSettings();
					this.state = 538;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__33 || _la === JustMCFParser.NL) {
						{
						this.state = 537;
						this.p_();
						}
					}

					}
					}
					this.state = 544;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 545;
				this.match(JustMCFParser.T__2);
				this.state = 546;
				this.s_();
				}
			}

			this.state = 562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.TAGGED) {
				{
				this.state = 550;
				this.match(JustMCFParser.TAGGED);
				this.state = 551;
				this.tagNameSpaceFunc();
				this.state = 557;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 552;
						this.p_();
						this.state = 553;
						this.tagNameSpaceFunc();
						}
						}
					}
					this.state = 559;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 27, this._ctx);
				}
				this.state = 560;
				this.s_();
				}
			}

			this.state = 564;
			this.match(JustMCFParser.T__3);
			this.state = 565;
			this.s_();
			this.state = 578;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.FUNC) {
				{
				this.state = 566;
				this.funcTagStatementInner();
				this.state = 572;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 29, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 567;
						this.ends();
						this.state = 568;
						this.funcTagStatementInner();
						}
						}
					}
					this.state = 574;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 29, this._ctx);
				}
				this.state = 576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
					{
					this.state = 575;
					this.ends();
					}
				}

				}
			}

			this.state = 580;
			this.match(JustMCFParser.T__4);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public funcTagSettings(): FuncTagSettingsContext {
		let _localctx: FuncTagSettingsContext = new FuncTagSettingsContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, JustMCFParser.RULE_funcTagSettings);
		try {
			this.state = 586;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.REPLACE:
				_localctx = new FuncTagSettingsReplaceContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 582;
				this.match(JustMCFParser.REPLACE);
				this.state = 583;
				this.match(JustMCFParser.T__5);
				this.state = 584;
				this.boolValue();
				}
				break;
			case JustMCFParser.REPLACED:
				_localctx = new FuncTagSettingsReplacedContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 585;
				this.match(JustMCFParser.REPLACED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public funcTagStatementInner(): FuncTagStatementInnerContext {
		let _localctx: FuncTagStatementInnerContext = new FuncTagStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, JustMCFParser.RULE_funcTagStatementInner);
		try {
			this.state = 592;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 33, this._ctx) ) {
			case 1:
				_localctx = new FuncTagSIFuncSContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 588;
				this.funcStatement();
				}
				break;

			case 2:
				_localctx = new FuncTagSIFuncRunSContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 589;
				this.funcRunStatement();
				}
				break;

			case 3:
				_localctx = new FuncTagSIFuncImproveSContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 590;
				this.funcImproveStatement();
				}
				break;

			case 4:
				_localctx = new FuncTagSIFuncTagSContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 591;
				this.funcTagStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public funcStatement(): FuncStatementContext {
		let _localctx: FuncStatementContext = new FuncStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, JustMCFParser.RULE_funcStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 594;
			this.match(JustMCFParser.FUNC);
			this.state = 595;
			this.nameSpaceFunc();
			this.state = 596;
			this.s_();
			this.state = 609;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.TAGGED) {
				{
				this.state = 597;
				this.match(JustMCFParser.TAGGED);
				this.state = 598;
				this.tagNameSpaceFunc();
				this.state = 604;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 599;
						this.p_();
						this.state = 600;
						this.tagNameSpaceFunc();
						}
						}
					}
					this.state = 606;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);
				}
				this.state = 607;
				this.s_();
				}
			}

			this.state = 611;
			this.match(JustMCFParser.T__3);
			this.state = 612;
			this.s_();
			this.state = 625;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 38, this._ctx) ) {
			case 1:
				{
				this.state = 613;
				this.statementInner();
				this.state = 619;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 614;
						this.ends();
						this.state = 615;
						this.statementInner();
						}
						}
					}
					this.state = 621;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 36, this._ctx);
				}
				this.state = 623;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
					{
					this.state = 622;
					this.ends();
					}
				}

				}
				break;
			}
			this.state = 627;
			this.match(JustMCFParser.T__4);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public funcImproveStatement(): FuncImproveStatementContext {
		let _localctx: FuncImproveStatementContext = new FuncImproveStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, JustMCFParser.RULE_funcImproveStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 629;
			this.match(JustMCFParser.FUNC);
			this.state = 630;
			this.nameSpaceFunc();
			this.state = 631;
			this.s_();
			this.state = 632;
			this.match(JustMCFParser.T__6);
			this.state = 633;
			this.s_();
			this.state = 634;
			this.funcImproveParam();
			this.state = 640;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 39, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 635;
					this.p_();
					this.state = 636;
					this.funcImproveParam();
					}
					}
				}
				this.state = 642;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 39, this._ctx);
			}
			this.state = 643;
			this.s_();
			this.state = 644;
			this.match(JustMCFParser.T__7);
			this.state = 648;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 40, this._ctx) ) {
			case 1:
				{
				this.state = 645;
				this.s_();
				this.state = 646;
				this.typeName();
				}
				break;
			}
			this.state = 650;
			this.s_();
			this.state = 651;
			this.match(JustMCFParser.T__3);
			this.state = 652;
			this.s_();
			this.state = 665;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 43, this._ctx) ) {
			case 1:
				{
				this.state = 653;
				this.statementInner();
				this.state = 659;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 654;
						this.ends();
						this.state = 655;
						this.statementInner();
						}
						}
					}
					this.state = 661;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 41, this._ctx);
				}
				this.state = 663;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
					{
					this.state = 662;
					this.ends();
					}
				}

				}
				break;
			}
			this.state = 667;
			this.match(JustMCFParser.T__4);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public funcImproveParam(): FuncImproveParamContext {
		let _localctx: FuncImproveParamContext = new FuncImproveParamContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, JustMCFParser.RULE_funcImproveParam);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 670;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 44, this._ctx) ) {
			case 1:
				{
				this.state = 669;
				this.typeName();
				}
				break;
			}
			this.state = 672;
			this.acceptableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public yieldStatement(): YieldStatementContext {
		let _localctx: YieldStatementContext = new YieldStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, JustMCFParser.RULE_yieldStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 674;
			this.match(JustMCFParser.YIELD);
			this.state = 675;
			this.dataIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnStatement(): ReturnStatementContext {
		let _localctx: ReturnStatementContext = new ReturnStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, JustMCFParser.RULE_returnStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 677;
			this.match(JustMCFParser.RETURN);
			this.state = 682;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 45, this._ctx) ) {
			case 1:
				{
				this.state = 678;
				this.match(JustMCFParser.T__6);
				this.state = 679;
				this.nameSpaceFunc();
				this.state = 680;
				this.match(JustMCFParser.T__7);
				}
				break;
			}
			this.state = 685;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 46, this._ctx) ) {
			case 1:
				{
				this.state = 684;
				this.dataIdentifier();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public breakStatement(): BreakStatementContext {
		let _localctx: BreakStatementContext = new BreakStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, JustMCFParser.RULE_breakStatement);
		let _la: number;
		try {
			this.state = 692;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.BREAK:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 687;
				this.match(JustMCFParser.BREAK);
				}
				break;
			case JustMCFParser.RETURN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 688;
				this.match(JustMCFParser.RETURN);
				this.state = 689;
				this.match(JustMCFParser.T__1);
				this.state = 690;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.WHILE || _la === JustMCFParser.FOR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 691;
				this.match(JustMCFParser.T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public continueStatement(): ContinueStatementContext {
		let _localctx: ContinueStatementContext = new ContinueStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, JustMCFParser.RULE_continueStatement);
		let _la: number;
		try {
			this.state = 706;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 48, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 694;
				this.match(JustMCFParser.CONTINUE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 695;
				this.match(JustMCFParser.RETURN);
				this.state = 696;
				this.match(JustMCFParser.T__1);
				this.state = 697;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.WHILE || _la === JustMCFParser.FOR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 698;
				this.match(JustMCFParser.T__2);
				this.state = 699;
				this.match(JustMCFParser.T__8);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 700;
				this.match(JustMCFParser.RETURN);
				this.state = 701;
				this.match(JustMCFParser.T__6);
				this.state = 702;
				this.nameSpaceFunc();
				this.state = 703;
				this.match(JustMCFParser.T__7);
				this.state = 704;
				this.match(JustMCFParser.T__8);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public funcRunStatement(): FuncRunStatementContext {
		let _localctx: FuncRunStatementContext = new FuncRunStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, JustMCFParser.RULE_funcRunStatement);
		try {
			this.state = 712;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 49, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 708;
				this.match(JustMCFParser.FUNC);
				this.state = 709;
				this.nameSpaceFunc();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 710;
				this.match(JustMCFParser.FUNC);
				this.state = 711;
				this.tagNameSpaceFunc();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public funcImproveRunStatement(): FuncImproveRunStatementContext {
		let _localctx: FuncImproveRunStatementContext = new FuncImproveRunStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, JustMCFParser.RULE_funcImproveRunStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 714;
			this.funcImproveRunExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public funcImproveRunExpression(): FuncImproveRunExpressionContext {
		let _localctx: FuncImproveRunExpressionContext = new FuncImproveRunExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, JustMCFParser.RULE_funcImproveRunExpression);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 716;
			this.match(JustMCFParser.FUNC);
			this.state = 717;
			this.nameSpaceFunc();
			this.state = 718;
			this.match(JustMCFParser.T__6);
			this.state = 719;
			this.s_();
			this.state = 720;
			this.funcImproveRunParam();
			this.state = 726;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 721;
					this.p_();
					this.state = 722;
					this.funcImproveRunParam();
					}
					}
				}
				this.state = 728;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 50, this._ctx);
			}
			this.state = 729;
			this.s_();
			this.state = 730;
			this.match(JustMCFParser.T__7);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public funcImproveRunParam(): FuncImproveRunParamContext {
		let _localctx: FuncImproveRunParamContext = new FuncImproveRunParamContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, JustMCFParser.RULE_funcImproveRunParam);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 732;
			this.dataIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execStatement(): ExecStatementContext {
		let _localctx: ExecStatementContext = new ExecStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, JustMCFParser.RULE_execStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 784;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 57, this._ctx) ) {
			case 1:
				_localctx = new ExecWithRunOrChildContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 735;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 51, this._ctx) ) {
				case 1:
					{
					this.state = 734;
					this.match(JustMCFParser.EXEC);
					}
					break;
				}
				this.state = 737;
				this.s_();
				this.state = 738;
				this.match(JustMCFParser.T__3);
				this.state = 739;
				this.s_();
				this.state = 745;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << JustMCFParser.T__3) | (1 << JustMCFParser.T__9) | (1 << JustMCFParser.T__10) | (1 << JustMCFParser.T__11))) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (JustMCFParser.T__34 - 35)) | (1 << (JustMCFParser.T__52 - 35)) | (1 << (JustMCFParser.NUMBER_INT - 35)) | (1 << (JustMCFParser.NUMBER - 35)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.Pos1 - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					{
					this.state = 740;
					this.execChild();
					this.state = 741;
					this.pn_();
					}
					}
					this.state = 747;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 748;
				this.match(JustMCFParser.T__4);
				this.state = 749;
				this.s_();
				this.state = 755;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 750;
						this.execStoreChild();
						this.state = 751;
						this.s_();
						}
						}
					}
					this.state = 757;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 53, this._ctx);
				}
				this.state = 760;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case JustMCFParser.T__0:
				case JustMCFParser.RUN:
					{
					this.state = 758;
					this.execRunChild();
					}
					break;
				case JustMCFParser.T__9:
				case JustMCFParser.T__10:
				case JustMCFParser.T__11:
				case JustMCFParser.STORE:
					{
					this.state = 759;
					this.execStoreChild();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 762;
				this.s_();
				this.state = 768;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 763;
						this.execStoreChild();
						this.state = 764;
						this.s_();
						}
						}
					}
					this.state = 770;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 55, this._ctx);
				}
				}
				break;

			case 2:
				_localctx = new ExecWithoutRunOrChildContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 771;
				this.match(JustMCFParser.EXEC);
				this.state = 772;
				this.s_();
				this.state = 773;
				this.match(JustMCFParser.T__3);
				this.state = 774;
				this.s_();
				this.state = 778;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 775;
					this.execChild();
					this.state = 776;
					this.pn_();
					}
					}
					this.state = 780;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << JustMCFParser.T__3) | (1 << JustMCFParser.T__9) | (1 << JustMCFParser.T__10) | (1 << JustMCFParser.T__11))) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (JustMCFParser.T__34 - 35)) | (1 << (JustMCFParser.T__52 - 35)) | (1 << (JustMCFParser.NUMBER_INT - 35)) | (1 << (JustMCFParser.NUMBER - 35)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.Pos1 - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0));
				this.state = 782;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execStoreChild(): ExecStoreChildContext {
		let _localctx: ExecStoreChildContext = new ExecStoreChildContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, JustMCFParser.RULE_execStoreChild);
		let _la: number;
		try {
			this.state = 853;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 70, this._ctx) ) {
			case 1:
				_localctx = new ExecStoreResultScoreContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 790;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 58, this._ctx) ) {
				case 1:
					{
					this.state = 786;
					this.match(JustMCFParser.T__9);
					}
					break;

				case 2:
					{
					this.state = 787;
					this.match(JustMCFParser.STORE);
					}
					break;

				case 3:
					{
					{
					this.state = 788;
					this.match(JustMCFParser.STORE);
					this.state = 789;
					this.match(JustMCFParser.RESULT);
					}
					}
					break;
				}
				this.state = 792;
				this.scbIdentifier();
				}
				break;

			case 2:
				_localctx = new ExecStoreSuccessScoreContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 798;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case JustMCFParser.T__10:
					{
					this.state = 793;
					this.match(JustMCFParser.T__10);
					}
					break;
				case JustMCFParser.T__11:
					{
					{
					this.state = 794;
					this.match(JustMCFParser.T__11);
					this.state = 795;
					this.match(JustMCFParser.STORE);
					}
					}
					break;
				case JustMCFParser.STORE:
					{
					{
					this.state = 796;
					this.match(JustMCFParser.STORE);
					this.state = 797;
					this.match(JustMCFParser.SUCCESS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 800;
				this.scbIdentifier();
				}
				break;

			case 3:
				_localctx = new ExecStoreResultDataContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 805;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 60, this._ctx) ) {
				case 1:
					{
					this.state = 801;
					this.match(JustMCFParser.T__9);
					}
					break;

				case 2:
					{
					this.state = 802;
					this.match(JustMCFParser.STORE);
					}
					break;

				case 3:
					{
					{
					this.state = 803;
					this.match(JustMCFParser.STORE);
					this.state = 804;
					this.match(JustMCFParser.RESULT);
					}
					}
					break;
				}
				this.state = 807;
				this.dataIdentifier();
				this.state = 814;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 62, this._ctx) ) {
				case 1:
					{
					this.state = 808;
					this.numberType();
					this.state = 810;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__12) {
						{
						this.state = 809;
						this.match(JustMCFParser.T__12);
						}
					}

					this.state = 812;
					this.number();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new ExecStoreSuccessDataContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 821;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case JustMCFParser.T__10:
					{
					this.state = 816;
					this.match(JustMCFParser.T__10);
					}
					break;
				case JustMCFParser.T__11:
					{
					{
					this.state = 817;
					this.match(JustMCFParser.T__11);
					this.state = 818;
					this.match(JustMCFParser.STORE);
					}
					}
					break;
				case JustMCFParser.STORE:
					{
					{
					this.state = 819;
					this.match(JustMCFParser.STORE);
					this.state = 820;
					this.match(JustMCFParser.SUCCESS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 823;
				this.dataIdentifier();
				this.state = 830;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 65, this._ctx) ) {
				case 1:
					{
					this.state = 824;
					this.numberType();
					this.state = 826;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__12) {
						{
						this.state = 825;
						this.match(JustMCFParser.T__12);
						}
					}

					this.state = 828;
					this.number();
					}
					break;
				}
				}
				break;

			case 5:
				_localctx = new ExecStoreResultBossbarContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 836;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 66, this._ctx) ) {
				case 1:
					{
					this.state = 832;
					this.match(JustMCFParser.T__9);
					}
					break;

				case 2:
					{
					this.state = 833;
					this.match(JustMCFParser.STORE);
					}
					break;

				case 3:
					{
					{
					this.state = 834;
					this.match(JustMCFParser.STORE);
					this.state = 835;
					this.match(JustMCFParser.RESULT);
					}
					}
					break;
				}
				this.state = 838;
				this.bossbarIdentifier();
				this.state = 840;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 67, this._ctx) ) {
				case 1:
					{
					this.state = 839;
					(_localctx as ExecStoreResultBossbarContext)._value = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.VALUE || _la === JustMCFParser.MAX)) {
						(_localctx as ExecStoreResultBossbarContext)._value = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 6:
				_localctx = new ExecStoreSuccessBossbarContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 847;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case JustMCFParser.T__10:
					{
					this.state = 842;
					this.match(JustMCFParser.T__10);
					}
					break;
				case JustMCFParser.T__11:
					{
					{
					this.state = 843;
					this.match(JustMCFParser.T__11);
					this.state = 844;
					this.match(JustMCFParser.STORE);
					}
					}
					break;
				case JustMCFParser.STORE:
					{
					{
					this.state = 845;
					this.match(JustMCFParser.STORE);
					this.state = 846;
					this.match(JustMCFParser.SUCCESS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 849;
				this.bossbarIdentifier();
				this.state = 851;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 69, this._ctx) ) {
				case 1:
					{
					this.state = 850;
					(_localctx as ExecStoreSuccessBossbarContext)._value = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.VALUE || _la === JustMCFParser.MAX)) {
						(_localctx as ExecStoreSuccessBossbarContext)._value = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execRunChild(): ExecRunChildContext {
		let _localctx: ExecRunChildContext = new ExecRunChildContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, JustMCFParser.RULE_execRunChild);
		let _la: number;
		try {
			let _alt: number;
			this.state = 887;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 75, this._ctx) ) {
			case 1:
				_localctx = new ExecDirectRunContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 855;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.T__0 || _la === JustMCFParser.RUN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 856;
				this.s_();
				this.state = 857;
				this.statement();
				}
				break;

			case 2:
				_localctx = new ExecNamedRunContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 859;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.T__0 || _la === JustMCFParser.RUN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 860;
				this.s_();
				this.state = 861;
				this.funcStatement();
				}
				break;

			case 3:
				_localctx = new ExecAnonymousRunContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 863;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.T__0 || _la === JustMCFParser.RUN)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 864;
				this.s_();
				this.state = 866;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 71, this._ctx) ) {
				case 1:
					{
					this.state = 865;
					this.match(JustMCFParser.FUNC);
					}
					break;
				}
				this.state = 868;
				this.s_();
				this.state = 869;
				this.match(JustMCFParser.T__3);
				this.state = 870;
				this.s_();
				this.state = 883;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 74, this._ctx) ) {
				case 1:
					{
					this.state = 871;
					this.statementInner();
					this.state = 877;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 72, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 872;
							this.ends();
							this.state = 873;
							this.statementInner();
							}
							}
						}
						this.state = 879;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 72, this._ctx);
					}
					this.state = 881;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 880;
						this.ends();
						}
					}

					}
					break;
				}
				this.state = 885;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execChild(): ExecChildContext {
		let _localctx: ExecChildContext = new ExecChildContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, JustMCFParser.RULE_execChild);
		let _la: number;
		try {
			this.state = 995;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 96, this._ctx) ) {
			case 1:
				_localctx = new ExecAlignContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 889;
				this.match(JustMCFParser.ALIGN);
				this.state = 890;
				this.match(JustMCFParser.AcceptableName);
				}
				break;

			case 2:
				_localctx = new ExecAnchoredContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 891;
				this.match(JustMCFParser.ANCHORED);
				this.state = 892;
				(_localctx as ExecAnchoredContext)._anchor = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.EYES || _la === JustMCFParser.FEET)) {
					(_localctx as ExecAnchoredContext)._anchor = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 3:
				_localctx = new ExecInContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 893;
				this.match(JustMCFParser.IN);
				this.state = 894;
				this.nameSpaceDim();
				}
				break;

			case 4:
				_localctx = new ExecAsContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 895;
				this.match(JustMCFParser.AS);
				this.state = 896;
				this.selector();
				}
				break;

			case 5:
				_localctx = new ExecAtContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 897;
				this.match(JustMCFParser.AT);
				this.state = 898;
				this.selector();
				}
				break;

			case 6:
				_localctx = new ExecFacingPosContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 899;
				this.match(JustMCFParser.FACING);
				this.state = 900;
				this.pos3Identifier();
				}
				break;

			case 7:
				_localctx = new ExecFacingEntityContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 901;
				this.match(JustMCFParser.FACING);
				this.state = 903;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.ENTITY) {
					{
					this.state = 902;
					this.match(JustMCFParser.ENTITY);
					}
				}

				this.state = 905;
				this.selector();
				this.state = 906;
				(_localctx as ExecFacingEntityContext)._anchor = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.EYES || _la === JustMCFParser.FEET)) {
					(_localctx as ExecFacingEntityContext)._anchor = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 8:
				_localctx = new ExecPositionedPosContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 908;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.POSITIONED || _la === JustMCFParser.POS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 909;
				this.pos3Identifier();
				}
				break;

			case 9:
				_localctx = new ExecPostionedAsContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 910;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.POSITIONED || _la === JustMCFParser.POS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 912;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.AS) {
					{
					this.state = 911;
					this.match(JustMCFParser.AS);
					}
				}

				this.state = 914;
				this.selector();
				}
				break;

			case 10:
				_localctx = new ExecRotatedPosContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 915;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.ROTATED || _la === JustMCFParser.ROT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 916;
				this.pos2Identifier();
				}
				break;

			case 11:
				_localctx = new ExecRotatedAsContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 917;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.ROTATED || _la === JustMCFParser.ROT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 919;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.AS) {
					{
					this.state = 918;
					this.match(JustMCFParser.AS);
					}
				}

				this.state = 921;
				this.selector();
				}
				break;

			case 12:
				_localctx = new ExecIfEntityContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 923;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS) {
					{
					this.state = 922;
					(_localctx as ExecIfEntityContext)._cond = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS)) {
						(_localctx as ExecIfEntityContext)._cond = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 926;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.ENTITY) {
					{
					this.state = 925;
					this.match(JustMCFParser.ENTITY);
					}
				}

				this.state = 928;
				this.selector();
				}
				break;

			case 13:
				_localctx = new ExecIfScoreContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 930;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 81, this._ctx) ) {
				case 1:
					{
					this.state = 929;
					(_localctx as ExecIfScoreContext)._cond = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS)) {
						(_localctx as ExecIfScoreContext)._cond = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 933;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 82, this._ctx) ) {
				case 1:
					{
					this.state = 932;
					this.match(JustMCFParser.SCORE);
					}
					break;
				}
				this.state = 935;
				this.scbCoreIdentifier();
				this.state = 936;
				this.match(JustMCFParser.CompareOperation);
				this.state = 937;
				this.scbCoreIdentifier();
				}
				break;

			case 14:
				_localctx = new ExecIfScoreMatchesContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 940;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 83, this._ctx) ) {
				case 1:
					{
					this.state = 939;
					(_localctx as ExecIfScoreMatchesContext)._cond = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS)) {
						(_localctx as ExecIfScoreMatchesContext)._cond = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 943;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 84, this._ctx) ) {
				case 1:
					{
					this.state = 942;
					this.match(JustMCFParser.SCORE);
					}
					break;
				}
				this.state = 945;
				this.scbCoreIdentifier();
				this.state = 951;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case JustMCFParser.T__15:
				case JustMCFParser.NUMBER_INT:
				case JustMCFParser.MATCHES:
					{
					{
					this.state = 947;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.MATCHES) {
						{
						this.state = 946;
						this.match(JustMCFParser.MATCHES);
						}
					}

					this.state = 949;
					this.intRange();
					}
					}
					break;
				case JustMCFParser.CompareOperation:
					{
					this.state = 950;
					this.scbCompareNumber();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 15:
				_localctx = new ExecIfBlockContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 954;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS) {
					{
					this.state = 953;
					(_localctx as ExecIfBlockContext)._cond = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS)) {
						(_localctx as ExecIfBlockContext)._cond = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 957;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.BLOCK) {
					{
					this.state = 956;
					this.match(JustMCFParser.BLOCK);
					}
				}

				this.state = 959;
				this.pos3Identifier();
				this.state = 960;
				this.blockIdentifier();
				}
				break;

			case 16:
				_localctx = new ExecIfBlocksContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 963;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS) {
					{
					this.state = 962;
					(_localctx as ExecIfBlocksContext)._cond = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS)) {
						(_localctx as ExecIfBlocksContext)._cond = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 966;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.BLOCKS) {
					{
					this.state = 965;
					this.match(JustMCFParser.BLOCKS);
					}
				}

				this.state = 968;
				this.pos3Identifier();
				this.state = 969;
				this.pos3Identifier();
				this.state = 970;
				this.pos3Identifier();
				this.state = 971;
				(_localctx as ExecIfBlocksContext)._scan_mode = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.ALL || _la === JustMCFParser.MASKED)) {
					(_localctx as ExecIfBlocksContext)._scan_mode = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 17:
				_localctx = new ExecIfDataContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 974;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 91, this._ctx) ) {
				case 1:
					{
					this.state = 973;
					(_localctx as ExecIfDataContext)._cond = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS)) {
						(_localctx as ExecIfDataContext)._cond = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 977;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 92, this._ctx) ) {
				case 1:
					{
					this.state = 976;
					this.match(JustMCFParser.DATA);
					}
					break;
				}
				this.state = 979;
				this.dataIdentifier();
				}
				break;

			case 18:
				_localctx = new ExecIfBiomeContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 981;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS) {
					{
					this.state = 980;
					(_localctx as ExecIfBiomeContext)._cond = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS)) {
						(_localctx as ExecIfBiomeContext)._cond = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 983;
				this.match(JustMCFParser.BIOME);
				this.state = 984;
				this.pos3Identifier();
				this.state = 985;
				this.nameSpaceBiome();
				}
				break;

			case 19:
				_localctx = new ExecPredicateContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 988;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 94, this._ctx) ) {
				case 1:
					{
					this.state = 987;
					(_localctx as ExecPredicateContext)._cond = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.IF || _la === JustMCFParser.UNLESS)) {
						(_localctx as ExecPredicateContext)._cond = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				this.state = 991;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 95, this._ctx) ) {
				case 1:
					{
					this.state = 990;
					this.match(JustMCFParser.PREDICATE);
					}
					break;
				}
				this.state = 993;
				this.nameSpacePredicate();
				}
				break;

			case 20:
				_localctx = new ExecStoreContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 994;
				this.execStoreChild();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scbCompareNumber(): ScbCompareNumberContext {
		let _localctx: ScbCompareNumberContext = new ScbCompareNumberContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, JustMCFParser.RULE_scbCompareNumber);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 997;
			this.match(JustMCFParser.CompareOperation);
			this.state = 998;
			this.match(JustMCFParser.NUMBER_INT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataIdentifier(): DataIdentifierContext {
		let _localctx: DataIdentifierContext = new DataIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, JustMCFParser.RULE_dataIdentifier);
		try {
			this.state = 1007;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 97, this._ctx) ) {
			case 1:
				_localctx = new DataStorageLocalContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1000;
				this.match(JustMCFParser.LOCAL);
				this.state = 1001;
				this.match(JustMCFParser.T__13);
				this.state = 1002;
				this.nbtPath(0);
				}
				break;

			case 2:
				_localctx = new DataStorageContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1003;
				this.dataStorageIdentifier();
				}
				break;

			case 3:
				_localctx = new DataStorageWithEnvContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1004;
				this.nbtPathWithoutCompound();
				}
				break;

			case 4:
				_localctx = new DataEntityContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1005;
				this.dataEntityIdentifier();
				}
				break;

			case 5:
				_localctx = new DataBlockContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1006;
				this.dataBlockIdentifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataStorageIdentifier(): DataStorageIdentifierContext {
		let _localctx: DataStorageIdentifierContext = new DataStorageIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, JustMCFParser.RULE_dataStorageIdentifier);
		try {
			this.state = 1017;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 98, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1009;
				this.nameSpaceStorage();
				this.state = 1010;
				this.match(JustMCFParser.T__13);
				this.state = 1011;
				this.nbtPath(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1013;
				this.match(JustMCFParser.STORAGE);
				this.state = 1014;
				this.nameSpaceStorage();
				this.state = 1015;
				this.nbtPath(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataEntityIdentifier(): DataEntityIdentifierContext {
		let _localctx: DataEntityIdentifierContext = new DataEntityIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, JustMCFParser.RULE_dataEntityIdentifier);
		try {
			this.state = 1027;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.T__34:
			case JustMCFParser.T__52:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1019;
				this.selector();
				this.state = 1020;
				this.match(JustMCFParser.T__13);
				this.state = 1021;
				this.nbtPath(0);
				}
				break;
			case JustMCFParser.ENTITY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1023;
				this.match(JustMCFParser.ENTITY);
				this.state = 1024;
				this.selector();
				this.state = 1025;
				this.nbtPath(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataBlockIdentifier(): DataBlockIdentifierContext {
		let _localctx: DataBlockIdentifierContext = new DataBlockIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, JustMCFParser.RULE_dataBlockIdentifier);
		try {
			this.state = 1037;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.NUMBER_INT:
			case JustMCFParser.NUMBER:
			case JustMCFParser.Pos1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1029;
				this.pos3Identifier();
				this.state = 1030;
				this.match(JustMCFParser.T__13);
				this.state = 1031;
				this.nbtPath(0);
				}
				break;
			case JustMCFParser.BLOCK:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1033;
				this.match(JustMCFParser.BLOCK);
				this.state = 1034;
				this.pos3Identifier();
				this.state = 1035;
				this.nbtPath(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataMergeExpression(): DataMergeExpressionContext {
		let _localctx: DataMergeExpressionContext = new DataMergeExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, JustMCFParser.RULE_dataMergeExpression);
		try {
			this.state = 1051;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				_localctx = new DataMergeStorageContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1039;
				this.nameSpaceStorage();
				this.state = 1040;
				this.match(JustMCFParser.T__14);
				this.state = 1041;
				this.nbt();
				}
				break;
			case JustMCFParser.T__34:
			case JustMCFParser.T__52:
				_localctx = new DataMergeEntityContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1043;
				this.selector();
				this.state = 1044;
				this.match(JustMCFParser.T__14);
				this.state = 1045;
				this.nbt();
				}
				break;
			case JustMCFParser.NUMBER_INT:
			case JustMCFParser.NUMBER:
			case JustMCFParser.Pos1:
				_localctx = new DataMergeBlockContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1047;
				this.pos3Identifier();
				this.state = 1048;
				this.match(JustMCFParser.T__14);
				this.state = 1049;
				this.nbt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataOperationExpression(): DataOperationExpressionContext {
		let _localctx: DataOperationExpressionContext = new DataOperationExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, JustMCFParser.RULE_dataOperationExpression);
		let _la: number;
		try {
			this.state = 1112;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 106, this._ctx) ) {
			case 1:
				_localctx = new DataGetContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1053;
				this.dataIdentifier();
				this.state = 1058;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
				case 1:
					{
					this.state = 1055;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__12) {
						{
						this.state = 1054;
						this.match(JustMCFParser.T__12);
						}
					}

					this.state = 1057;
					this.number();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new DataMergeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1060;
				this.dataMergeExpression();
				}
				break;

			case 3:
				_localctx = new DataModifyMergeValueContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1061;
				this.dataIdentifier();
				this.state = 1062;
				this.match(JustMCFParser.T__14);
				this.state = 1063;
				this.nbt();
				}
				break;

			case 4:
				_localctx = new DataModifyMergeFromContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1065;
				this.dataIdentifier();
				this.state = 1066;
				this.match(JustMCFParser.T__14);
				this.state = 1067;
				this.dataRightValue();
				}
				break;

			case 5:
				_localctx = new DataModifySetValueContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1070;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 104, this._ctx) ) {
				case 1:
					{
					this.state = 1069;
					this.typeName();
					}
					break;
				}
				this.state = 1072;
				this.dataIdentifier();
				this.state = 1073;
				this.match(JustMCFParser.T__5);
				this.state = 1074;
				this.nbt();
				}
				break;

			case 6:
				_localctx = new DataModifySetFromContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1077;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 105, this._ctx) ) {
				case 1:
					{
					this.state = 1076;
					this.typeName();
					}
					break;
				}
				this.state = 1079;
				this.dataIdentifier();
				this.state = 1080;
				this.match(JustMCFParser.T__5);
				this.state = 1081;
				this.dataRightValue();
				}
				break;

			case 7:
				_localctx = new DataModifyAppendValueContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1083;
				this.dataIdentifier();
				this.state = 1084;
				this.match(JustMCFParser.T__15);
				this.state = 1085;
				this.nbt();
				}
				break;

			case 8:
				_localctx = new DataModifyAppendFromContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1087;
				this.dataIdentifier();
				this.state = 1088;
				this.match(JustMCFParser.T__15);
				this.state = 1089;
				this.dataRightValue();
				}
				break;

			case 9:
				_localctx = new DataModifyPrependValueContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1091;
				this.dataIdentifier();
				this.state = 1092;
				this.match(JustMCFParser.T__16);
				this.state = 1093;
				this.nbt();
				}
				break;

			case 10:
				_localctx = new DataModifyPrependFromContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1095;
				this.dataIdentifier();
				this.state = 1096;
				this.match(JustMCFParser.T__16);
				this.state = 1097;
				this.dataRightValue();
				}
				break;

			case 11:
				_localctx = new DataModifyInsertValueContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1099;
				this.dataIdentifier();
				this.state = 1100;
				this.match(JustMCFParser.T__15);
				this.state = 1101;
				this.match(JustMCFParser.NUMBER_INT);
				this.state = 1102;
				this.nbt();
				}
				break;

			case 12:
				_localctx = new DataModifyInsertFromContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1104;
				this.dataIdentifier();
				this.state = 1105;
				this.match(JustMCFParser.T__15);
				this.state = 1106;
				this.match(JustMCFParser.NUMBER_INT);
				this.state = 1107;
				this.dataRightValue();
				}
				break;

			case 13:
				_localctx = new DataRemoveContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1109;
				this.dataIdentifier();
				this.state = 1110;
				this.match(JustMCFParser.REMOVE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataRightValue(): DataRightValueContext {
		let _localctx: DataRightValueContext = new DataRightValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, JustMCFParser.RULE_dataRightValue);
		try {
			this.state = 1116;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 107, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1114;
				this.dataIdentifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1115;
				this.funcImproveRunExpression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataStatement(): DataStatementContext {
		let _localctx: DataStatementContext = new DataStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, JustMCFParser.RULE_dataStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1155;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 113, this._ctx) ) {
			case 1:
				_localctx = new DataSCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1118;
				this.match(JustMCFParser.DATA);
				this.state = 1119;
				this.s_();
				this.state = 1120;
				this.match(JustMCFParser.T__3);
				this.state = 1121;
				this.s_();
				this.state = 1134;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__3 || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (JustMCFParser.T__34 - 35)) | (1 << (JustMCFParser.T__52 - 35)) | (1 << (JustMCFParser.NUMBER_INT - 35)) | (1 << (JustMCFParser.NUMBER - 35)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.Pos1 - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					this.state = 1122;
					this.dataOperationExpression();
					this.state = 1128;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1123;
							this.ends();
							this.state = 1124;
							this.dataOperationExpression();
							}
							}
						}
						this.state = 1130;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 108, this._ctx);
					}
					this.state = 1132;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1131;
						this.ends();
						}
					}

					}
				}

				this.state = 1136;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				_localctx = new DataSIdentifierCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1138;
				this.match(JustMCFParser.DATA);
				this.state = 1139;
				this.nameSpaceStorage();
				this.state = 1142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__13) {
					{
					this.state = 1140;
					this.match(JustMCFParser.T__13);
					this.state = 1141;
					this.nbtPath(0);
					}
				}

				this.state = 1144;
				this.s_();
				this.state = 1145;
				this.match(JustMCFParser.T__3);
				this.state = 1146;
				this.s_();
				this.state = 1150;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__3 || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (JustMCFParser.T__34 - 35)) | (1 << (JustMCFParser.T__52 - 35)) | (1 << (JustMCFParser.NUMBER_INT - 35)) | (1 << (JustMCFParser.NUMBER - 35)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.Pos1 - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					{
					this.state = 1147;
					this.dataOperationExpression();
					}
					}
					this.state = 1152;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1153;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scbOperationExpression(): ScbOperationExpressionContext {
		let _localctx: ScbOperationExpressionContext = new ScbOperationExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, JustMCFParser.RULE_scbOperationExpression);
		try {
			this.state = 1229;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 114, this._ctx) ) {
			case 1:
				_localctx = new ScbGetContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1157;
				this.scbCoreIdentifier();
				}
				break;

			case 2:
				_localctx = new ScbAddContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1158;
				this.scbCoreIdentifier();
				this.state = 1159;
				this.match(JustMCFParser.T__17);
				this.state = 1160;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 3:
				_localctx = new ScbRemoveContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1162;
				this.scbCoreIdentifier();
				this.state = 1163;
				this.match(JustMCFParser.T__18);
				this.state = 1164;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 4:
				_localctx = new ScbSetContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1166;
				this.scbCoreIdentifier();
				this.state = 1167;
				this.match(JustMCFParser.T__5);
				this.state = 1168;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 5:
				_localctx = new ScbOptMulAssignNumberContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1170;
				this.scbCoreIdentifier();
				this.state = 1171;
				(_localctx as ScbOptMulAssignNumberContext)._op = this.match(JustMCFParser.T__19);
				this.state = 1172;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 6:
				_localctx = new ScbOptDivAssignNumberContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1174;
				this.scbCoreIdentifier();
				this.state = 1175;
				(_localctx as ScbOptDivAssignNumberContext)._op = this.match(JustMCFParser.T__20);
				this.state = 1176;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 7:
				_localctx = new ScbOptModAssignNumberContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1178;
				this.scbCoreIdentifier();
				this.state = 1179;
				(_localctx as ScbOptModAssignNumberContext)._op = this.match(JustMCFParser.T__21);
				this.state = 1180;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 8:
				_localctx = new ScbOptAddAssignContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1182;
				this.scbCoreIdentifier();
				this.state = 1183;
				this.match(JustMCFParser.T__17);
				this.state = 1184;
				this.scbCoreIdentifier();
				}
				break;

			case 9:
				_localctx = new ScbOptSubAssignContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1186;
				this.scbCoreIdentifier();
				this.state = 1187;
				this.match(JustMCFParser.T__18);
				this.state = 1188;
				this.scbCoreIdentifier();
				}
				break;

			case 10:
				_localctx = new ScbOptMulAssignContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1190;
				this.scbCoreIdentifier();
				this.state = 1191;
				this.match(JustMCFParser.T__19);
				this.state = 1192;
				this.scbCoreIdentifier();
				}
				break;

			case 11:
				_localctx = new ScbOptDivAssignContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1194;
				this.scbCoreIdentifier();
				this.state = 1195;
				this.match(JustMCFParser.T__20);
				this.state = 1196;
				this.scbCoreIdentifier();
				}
				break;

			case 12:
				_localctx = new ScbOptModAssignContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1198;
				this.scbCoreIdentifier();
				this.state = 1199;
				this.match(JustMCFParser.T__21);
				this.state = 1200;
				this.scbCoreIdentifier();
				}
				break;

			case 13:
				_localctx = new ScbOptExcFuncContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1202;
				this.scbCoreIdentifier();
				this.state = 1203;
				this.match(JustMCFParser.T__22);
				this.state = 1204;
				this.scbCoreIdentifier();
				}
				break;

			case 14:
				_localctx = new ScbOptMinFuncContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1206;
				this.scbCoreIdentifier();
				this.state = 1207;
				this.match(JustMCFParser.T__23);
				this.state = 1208;
				this.scbCoreIdentifier();
				}
				break;

			case 15:
				_localctx = new ScbOptMaxFuncContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1210;
				this.scbCoreIdentifier();
				this.state = 1211;
				this.match(JustMCFParser.T__24);
				this.state = 1212;
				this.scbCoreIdentifier();
				}
				break;

			case 16:
				_localctx = new ScbOptAssignContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1214;
				this.scbCoreIdentifier();
				this.state = 1215;
				this.match(JustMCFParser.T__5);
				this.state = 1216;
				this.scbCoreIdentifier();
				}
				break;

			case 17:
				_localctx = new ScbResetContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1218;
				this.scbCoreIdentifier();
				this.state = 1219;
				this.match(JustMCFParser.RESET);
				}
				break;

			case 18:
				_localctx = new ScbEnableContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1221;
				this.scbCoreIdentifier();
				this.state = 1222;
				this.match(JustMCFParser.ENABLE);
				}
				break;

			case 19:
				_localctx = new ScbOptExpressionContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1224;
				this.scbCoreIdentifier();
				this.state = 1225;
				this.match(JustMCFParser.T__25);
				this.state = 1226;
				this.s_();
				this.state = 1227;
				this.scbSingleOperationExpression(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public scbSingleOperationExpression(): ScbSingleOperationExpressionContext;
	public scbSingleOperationExpression(_p: number): ScbSingleOperationExpressionContext;
	// @RuleVersion(0)
	public scbSingleOperationExpression(_p?: number): ScbSingleOperationExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ScbSingleOperationExpressionContext = new ScbSingleOperationExpressionContext(this._ctx, _parentState);
		let _prevctx: ScbSingleOperationExpressionContext = _localctx;
		let _startState: number = 76;
		this.enterRecursionRule(_localctx, 76, JustMCFParser.RULE_scbSingleOperationExpression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1240;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.NUMBER_INT:
				{
				_localctx = new ScbTempNumberExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 1232;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;
			case JustMCFParser.T__34:
			case JustMCFParser.T__52:
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				{
				_localctx = new ScbIdExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 1233;
				this.scbCoreIdentifier();
				}
				break;
			case JustMCFParser.T__6:
				{
				_localctx = new ScbParenExpressionContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 1234;
				this.match(JustMCFParser.T__6);
				this.state = 1235;
				this.s_();
				this.state = 1236;
				this.scbSingleOperationExpression(0);
				this.state = 1237;
				this.s_();
				this.state = 1238;
				this.match(JustMCFParser.T__7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 1262;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 1260;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 116, this._ctx) ) {
					case 1:
						{
						_localctx = new ScbFuncExpressionContext(new ScbSingleOperationExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, JustMCFParser.RULE_scbSingleOperationExpression);
						this.state = 1242;
						if (!(this.precpred(this._ctx, 6))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
						}
						this.state = 1243;
						this.s_();
						this.state = 1244;
						(_localctx as ScbFuncExpressionContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === JustMCFParser.T__23 || _la === JustMCFParser.T__24)) {
							(_localctx as ScbFuncExpressionContext)._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 1245;
						this.s_();
						this.state = 1246;
						this.scbSingleOperationExpression(7);
						}
						break;

					case 2:
						{
						_localctx = new ScbOptMulDivModExpressionContext(new ScbSingleOperationExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, JustMCFParser.RULE_scbSingleOperationExpression);
						this.state = 1248;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 1249;
						this.s_();
						this.state = 1250;
						(_localctx as ScbOptMulDivModExpressionContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << JustMCFParser.T__12) | (1 << JustMCFParser.T__26) | (1 << JustMCFParser.T__27))) !== 0))) {
							(_localctx as ScbOptMulDivModExpressionContext)._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 1251;
						this.s_();
						this.state = 1252;
						this.scbSingleOperationExpression(6);
						}
						break;

					case 3:
						{
						_localctx = new ScbOptAddSubExpressionContext(new ScbSingleOperationExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, JustMCFParser.RULE_scbSingleOperationExpression);
						this.state = 1254;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 1255;
						this.s_();
						this.state = 1256;
						(_localctx as ScbOptAddSubExpressionContext)._op = this._input.LT(1);
						_la = this._input.LA(1);
						if (!(_la === JustMCFParser.T__28 || _la === JustMCFParser.T__29)) {
							(_localctx as ScbOptAddSubExpressionContext)._op = this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 1257;
						this.s_();
						this.state = 1258;
						this.scbSingleOperationExpression(5);
						}
						break;
					}
					}
				}
				this.state = 1264;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 117, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		let _localctx: ScbCoreIdentifierContext = new ScbCoreIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, JustMCFParser.RULE_scbCoreIdentifier);
		try {
			this.state = 1272;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1265;
				this.nbtName(0);
				this.state = 1266;
				this.selector();
				}
				break;
			case JustMCFParser.T__34:
			case JustMCFParser.T__52:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1268;
				this.selector();
				this.state = 1269;
				this.match(JustMCFParser.T__30);
				this.state = 1270;
				this.nbtName(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scbIdentifier(): ScbIdentifierContext {
		let _localctx: ScbIdentifierContext = new ScbIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, JustMCFParser.RULE_scbIdentifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1275;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 119, this._ctx) ) {
			case 1:
				{
				this.state = 1274;
				this.match(JustMCFParser.SCORE);
				}
				break;
			}
			this.state = 1277;
			this.scbCoreIdentifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scbPlayerStatement(): ScbPlayerStatementContext {
		let _localctx: ScbPlayerStatementContext = new ScbPlayerStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, JustMCFParser.RULE_scbPlayerStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1279;
			this.match(JustMCFParser.SCB);
			this.state = 1280;
			this.s_();
			this.state = 1281;
			this.match(JustMCFParser.T__3);
			this.state = 1282;
			this.s_();
			this.state = 1295;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.T__34 || _la === JustMCFParser.T__52 || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
				{
				this.state = 1283;
				this.scbPlayerStatementInner();
				this.state = 1289;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 1284;
						this.ends();
						this.state = 1285;
						this.scbPlayerStatementInner();
						}
						}
					}
					this.state = 1291;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 120, this._ctx);
				}
				this.state = 1293;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
					{
					this.state = 1292;
					this.ends();
					}
				}

				}
			}

			this.state = 1297;
			this.match(JustMCFParser.T__4);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scbPlayerStatementInner(): ScbPlayerStatementInnerContext {
		let _localctx: ScbPlayerStatementInnerContext = new ScbPlayerStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, JustMCFParser.RULE_scbPlayerStatementInner);
		let _la: number;
		try {
			this.state = 1304;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 124, this._ctx) ) {
			case 1:
				_localctx = new ScbPlayerSIScbOperationExpressionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1299;
				this.scbOperationExpression();
				}
				break;

			case 2:
				_localctx = new ScbPlayerSIScbListContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1301;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__34 || _la === JustMCFParser.T__52) {
					{
					this.state = 1300;
					this.selector();
					}
				}

				this.state = 1303;
				this.match(JustMCFParser.LIST);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scbObjectiveStatement(): ScbObjectiveStatementContext {
		let _localctx: ScbObjectiveStatementContext = new ScbObjectiveStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, JustMCFParser.RULE_scbObjectiveStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1412;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 144, this._ctx) ) {
			case 1:
				_localctx = new ScbObjSDeclareWithNameContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1306;
				this.match(JustMCFParser.SCB);
				this.state = 1311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__6) {
					{
					this.state = 1307;
					this.match(JustMCFParser.T__6);
					this.state = 1308;
					this.criterion();
					this.state = 1309;
					this.match(JustMCFParser.T__7);
					}
				}

				this.state = 1313;
				this.nbtName(0);
				this.state = 1314;
				this.s_();
				this.state = 1315;
				(_localctx as ScbObjSDeclareWithNameContext)._display = this.json();
				this.state = 1316;
				this.s_();
				this.state = 1341;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 131, this._ctx) ) {
				case 1:
					{
					this.state = 1317;
					this.match(JustMCFParser.T__3);
					this.state = 1318;
					this.s_();
					this.state = 1337;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__31 || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (JustMCFParser.DISPLAYNAME - 107)) | (1 << (JustMCFParser.RENDERTYPE - 107)) | (1 << (JustMCFParser.DISPLAY - 107)) | (1 << (JustMCFParser.REMOVE - 107)))) !== 0)) {
						{
						this.state = 1320;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === JustMCFParser.T__31) {
							{
							this.state = 1319;
							this.match(JustMCFParser.T__31);
							}
						}

						this.state = 1322;
						this.scbStatementInner();
						this.state = 1331;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 128, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 1323;
								this.ends();
								this.state = 1325;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === JustMCFParser.T__31) {
									{
									this.state = 1324;
									this.match(JustMCFParser.T__31);
									}
								}

								this.state = 1327;
								this.scbStatementInner();
								}
								}
							}
							this.state = 1333;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 128, this._ctx);
						}
						this.state = 1335;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
							{
							this.state = 1334;
							this.ends();
							}
						}

						}
					}

					this.state = 1339;
					this.match(JustMCFParser.T__4);
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new ScbObjSDeclareSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1343;
				this.match(JustMCFParser.SCB);
				this.state = 1344;
				this.match(JustMCFParser.T__6);
				this.state = 1345;
				this.criterion();
				this.state = 1346;
				this.match(JustMCFParser.T__7);
				this.state = 1347;
				this.nbtName(0);
				}
				break;

			case 3:
				_localctx = new ScbObjSDeclareDefaultContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1349;
				this.match(JustMCFParser.SCB);
				this.state = 1354;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__6) {
					{
					this.state = 1350;
					this.match(JustMCFParser.T__6);
					this.state = 1351;
					this.criterion();
					this.state = 1352;
					this.match(JustMCFParser.T__7);
					}
				}

				this.state = 1356;
				this.nbtName(0);
				this.state = 1357;
				this.match(JustMCFParser.DEFAULT);
				this.state = 1358;
				this.s_();
				this.state = 1383;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 138, this._ctx) ) {
				case 1:
					{
					this.state = 1359;
					this.match(JustMCFParser.T__3);
					this.state = 1360;
					this.s_();
					this.state = 1379;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__31 || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (JustMCFParser.DISPLAYNAME - 107)) | (1 << (JustMCFParser.RENDERTYPE - 107)) | (1 << (JustMCFParser.DISPLAY - 107)) | (1 << (JustMCFParser.REMOVE - 107)))) !== 0)) {
						{
						this.state = 1362;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === JustMCFParser.T__31) {
							{
							this.state = 1361;
							this.match(JustMCFParser.T__31);
							}
						}

						this.state = 1364;
						this.scbStatementInner();
						this.state = 1373;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 135, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 1365;
								this.ends();
								this.state = 1367;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === JustMCFParser.T__31) {
									{
									this.state = 1366;
									this.match(JustMCFParser.T__31);
									}
								}

								this.state = 1369;
								this.scbStatementInner();
								}
								}
							}
							this.state = 1375;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 135, this._ctx);
						}
						this.state = 1377;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
							{
							this.state = 1376;
							this.ends();
							}
						}

						}
					}

					this.state = 1381;
					this.match(JustMCFParser.T__4);
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new ScbObjSOperationContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1385;
				this.match(JustMCFParser.SCB);
				this.state = 1386;
				this.nbtName(0);
				this.state = 1387;
				this.s_();
				this.state = 1388;
				this.match(JustMCFParser.T__3);
				this.state = 1389;
				this.s_();
				this.state = 1408;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__31 || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (JustMCFParser.DISPLAYNAME - 107)) | (1 << (JustMCFParser.RENDERTYPE - 107)) | (1 << (JustMCFParser.DISPLAY - 107)) | (1 << (JustMCFParser.REMOVE - 107)))) !== 0)) {
					{
					this.state = 1391;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__31) {
						{
						this.state = 1390;
						this.match(JustMCFParser.T__31);
						}
					}

					this.state = 1393;
					this.scbStatementInner();
					this.state = 1402;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1394;
							this.ends();
							this.state = 1396;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === JustMCFParser.T__31) {
								{
								this.state = 1395;
								this.match(JustMCFParser.T__31);
								}
							}

							this.state = 1398;
							this.scbStatementInner();
							}
							}
						}
						this.state = 1404;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 141, this._ctx);
					}
					this.state = 1406;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1405;
						this.ends();
						}
					}

					}
				}

				this.state = 1410;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public scbStatementInner(): ScbStatementInnerContext {
		let _localctx: ScbStatementInnerContext = new ScbStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, JustMCFParser.RULE_scbStatementInner);
		let _la: number;
		try {
			this.state = 1421;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.REMOVE:
				_localctx = new ScbSIRemoveContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1414;
				this.match(JustMCFParser.REMOVE);
				}
				break;
			case JustMCFParser.DISPLAYNAME:
				_localctx = new ScbSIDisplaynameContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1415;
				this.match(JustMCFParser.DISPLAYNAME);
				this.state = 1416;
				this.json();
				}
				break;
			case JustMCFParser.RENDERTYPE:
				_localctx = new ScbSIRendertypeContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1417;
				this.match(JustMCFParser.RENDERTYPE);
				this.state = 1418;
				(_localctx as ScbSIRendertypeContext)._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.HEARTS || _la === JustMCFParser.INTEGER)) {
					(_localctx as ScbSIRendertypeContext)._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case JustMCFParser.DISPLAY:
				_localctx = new ScbSIDisplayContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1419;
				this.match(JustMCFParser.DISPLAY);
				this.state = 1420;
				this.acceptableName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bossbarStatement(): BossbarStatementContext {
		let _localctx: BossbarStatementContext = new BossbarStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, JustMCFParser.RULE_bossbarStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1472;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 154, this._ctx) ) {
			case 1:
				_localctx = new BossbarSDeclareContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1423;
				this.match(JustMCFParser.BOSSBAR);
				this.state = 1424;
				this.nameSpaceBossbar();
				this.state = 1425;
				this.s_();
				this.state = 1426;
				this.json();
				this.state = 1427;
				this.s_();
				this.state = 1443;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 148, this._ctx) ) {
				case 1:
					{
					this.state = 1428;
					this.match(JustMCFParser.T__3);
					this.state = 1429;
					this.s_();
					this.state = 1438;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === JustMCFParser.T__31 || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (JustMCFParser.VALUE - 96)) | (1 << (JustMCFParser.MAX - 96)) | (1 << (JustMCFParser.REMOVE - 96)) | (1 << (JustMCFParser.PLAYER - 96)) | (1 << (JustMCFParser.PLAYERS - 96)) | (1 << (JustMCFParser.VISIBLE - 96)))) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & ((1 << (JustMCFParser.COLOR - 133)) | (1 << (JustMCFParser.NAME - 133)) | (1 << (JustMCFParser.STYLE - 133)) | (1 << (JustMCFParser.SET - 133)) | (1 << (JustMCFParser.GET - 133)))) !== 0)) {
						{
						{
						this.state = 1431;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === JustMCFParser.T__31) {
							{
							this.state = 1430;
							this.match(JustMCFParser.T__31);
							}
						}

						this.state = 1433;
						this.bossbarStatementInner();
						this.state = 1434;
						this.ends();
						}
						}
						this.state = 1440;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 1441;
					this.match(JustMCFParser.T__4);
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BossbarSOperationContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1445;
				this.match(JustMCFParser.BOSSBAR);
				this.state = 1446;
				this.nameSpaceBossbar();
				this.state = 1447;
				this.s_();
				this.state = 1448;
				this.match(JustMCFParser.T__3);
				this.state = 1449;
				this.s_();
				this.state = 1468;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__31 || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (JustMCFParser.VALUE - 96)) | (1 << (JustMCFParser.MAX - 96)) | (1 << (JustMCFParser.REMOVE - 96)) | (1 << (JustMCFParser.PLAYER - 96)) | (1 << (JustMCFParser.PLAYERS - 96)) | (1 << (JustMCFParser.VISIBLE - 96)))) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & ((1 << (JustMCFParser.COLOR - 133)) | (1 << (JustMCFParser.NAME - 133)) | (1 << (JustMCFParser.STYLE - 133)) | (1 << (JustMCFParser.SET - 133)) | (1 << (JustMCFParser.GET - 133)))) !== 0)) {
					{
					this.state = 1451;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__31) {
						{
						this.state = 1450;
						this.match(JustMCFParser.T__31);
						}
					}

					this.state = 1453;
					this.bossbarStatementInner();
					this.state = 1462;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1454;
							this.ends();
							this.state = 1456;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === JustMCFParser.T__31) {
								{
								this.state = 1455;
								this.match(JustMCFParser.T__31);
								}
							}

							this.state = 1458;
							this.bossbarStatementInner();
							}
							}
						}
						this.state = 1464;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
					}
					this.state = 1466;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1465;
						this.ends();
						}
					}

					}
				}

				this.state = 1470;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bossbarStatementInner(): BossbarStatementInnerContext {
		let _localctx: BossbarStatementInnerContext = new BossbarStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, JustMCFParser.RULE_bossbarStatementInner);
		let _la: number;
		try {
			this.state = 1519;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 164, this._ctx) ) {
			case 1:
				_localctx = new BossbarSIGetContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1475;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.GET) {
					{
					this.state = 1474;
					this.match(JustMCFParser.GET);
					}
				}

				this.state = 1477;
				(_localctx as BossbarSIGetContext)._type = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (JustMCFParser.VALUE - 96)) | (1 << (JustMCFParser.MAX - 96)) | (1 << (JustMCFParser.PLAYER - 96)) | (1 << (JustMCFParser.VISIBLE - 96)))) !== 0))) {
					(_localctx as BossbarSIGetContext)._type = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				_localctx = new BossbarSIRemoveContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1478;
				this.match(JustMCFParser.REMOVE);
				}
				break;

			case 3:
				_localctx = new BossbarSISetColorContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1480;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.SET) {
					{
					this.state = 1479;
					this.match(JustMCFParser.SET);
					}
				}

				this.state = 1482;
				this.match(JustMCFParser.COLOR);
				this.state = 1483;
				(_localctx as BossbarSISetColorContext)._color = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 126)) & ~0x1F) === 0 && ((1 << (_la - 126)) & ((1 << (JustMCFParser.BLUE - 126)) | (1 << (JustMCFParser.GREEN - 126)) | (1 << (JustMCFParser.PINK - 126)) | (1 << (JustMCFParser.PURPLE - 126)) | (1 << (JustMCFParser.RED - 126)) | (1 << (JustMCFParser.WHITE - 126)) | (1 << (JustMCFParser.YELLOW - 126)))) !== 0))) {
					(_localctx as BossbarSISetColorContext)._color = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 4:
				_localctx = new BossbarSISetMaxContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1485;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.SET) {
					{
					this.state = 1484;
					this.match(JustMCFParser.SET);
					}
				}

				this.state = 1487;
				this.match(JustMCFParser.MAX);
				this.state = 1488;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 5:
				_localctx = new BossbarSISetNameContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1490;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.SET) {
					{
					this.state = 1489;
					this.match(JustMCFParser.SET);
					}
				}

				this.state = 1492;
				this.match(JustMCFParser.NAME);
				this.state = 1493;
				this.json();
				}
				break;

			case 6:
				_localctx = new BossbarSISetPlayerContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.SET) {
					{
					this.state = 1494;
					this.match(JustMCFParser.SET);
					}
				}

				this.state = 1497;
				this.match(JustMCFParser.PLAYERS);
				this.state = 1498;
				this.selector();
				}
				break;

			case 7:
				_localctx = new BossbarSISetPlayerNullContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.SET) {
					{
					this.state = 1499;
					this.match(JustMCFParser.SET);
					}
				}

				this.state = 1502;
				this.match(JustMCFParser.PLAYERS);
				this.state = 1503;
				this.match(JustMCFParser.DEFAULT);
				}
				break;

			case 8:
				_localctx = new BossbarSISetStyleContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1505;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.SET) {
					{
					this.state = 1504;
					this.match(JustMCFParser.SET);
					}
				}

				this.state = 1507;
				this.match(JustMCFParser.STYLE);
				this.state = 1508;
				(_localctx as BossbarSISetStyleContext)._style = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 136)) & ~0x1F) === 0 && ((1 << (_la - 136)) & ((1 << (JustMCFParser.NOTCHED_6 - 136)) | (1 << (JustMCFParser.NOTCHED_10 - 136)) | (1 << (JustMCFParser.NOTCHED_12 - 136)) | (1 << (JustMCFParser.NOTCHED_20 - 136)) | (1 << (JustMCFParser.PROGRESS - 136)))) !== 0))) {
					(_localctx as BossbarSISetStyleContext)._style = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 9:
				_localctx = new BossbarSISetValueContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1510;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.SET) {
					{
					this.state = 1509;
					this.match(JustMCFParser.SET);
					}
				}

				this.state = 1512;
				this.match(JustMCFParser.VALUE);
				this.state = 1513;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 10:
				_localctx = new BossbarSISetVisibleContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1515;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.SET) {
					{
					this.state = 1514;
					this.match(JustMCFParser.SET);
					}
				}

				this.state = 1517;
				this.match(JustMCFParser.VISIBLE);
				this.state = 1518;
				this.boolValue();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bossbarOperationExpression(): BossbarOperationExpressionContext {
		let _localctx: BossbarOperationExpressionContext = new BossbarOperationExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, JustMCFParser.RULE_bossbarOperationExpression);
		let _la: number;
		try {
			this.state = 1537;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 167, this._ctx) ) {
			case 1:
				_localctx = new BossbarOpExprGetContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1521;
				this.bossbarIdentifier();
				this.state = 1523;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 165, this._ctx) ) {
				case 1:
					{
					this.state = 1522;
					(_localctx as BossbarOpExprGetContext)._type = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (JustMCFParser.VALUE - 96)) | (1 << (JustMCFParser.MAX - 96)) | (1 << (JustMCFParser.PLAYER - 96)) | (1 << (JustMCFParser.VISIBLE - 96)))) !== 0))) {
						(_localctx as BossbarOpExprGetContext)._type = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new BossbarOpExprAssignValueContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1525;
				this.bossbarIdentifier();
				this.state = 1527;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.VALUE) {
					{
					this.state = 1526;
					this.match(JustMCFParser.VALUE);
					}
				}

				this.state = 1529;
				this.match(JustMCFParser.T__5);
				this.state = 1530;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 3:
				_localctx = new BossbarOpExprAssignMaxContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1532;
				this.bossbarIdentifier();
				this.state = 1533;
				this.match(JustMCFParser.MAX);
				this.state = 1534;
				this.match(JustMCFParser.T__5);
				this.state = 1535;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bossbarIdentifier(): BossbarIdentifierContext {
		let _localctx: BossbarIdentifierContext = new BossbarIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, JustMCFParser.RULE_bossbarIdentifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1539;
			this.match(JustMCFParser.BOSSBAR);
			this.state = 1540;
			this.nameSpaceBossbar();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public titleStatement(): TitleStatementContext {
		let _localctx: TitleStatementContext = new TitleStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, JustMCFParser.RULE_titleStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1585;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 174, this._ctx) ) {
			case 1:
				_localctx = new TitleSCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1542;
				this.match(JustMCFParser.TITLE);
				this.state = 1543;
				this.s_();
				this.state = 1544;
				this.match(JustMCFParser.T__3);
				this.state = 1545;
				this.s_();
				this.state = 1558;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__34 || _la === JustMCFParser.T__52) {
					{
					this.state = 1546;
					this.titleStatementInner();
					this.state = 1552;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1547;
							this.ends();
							this.state = 1548;
							this.titleStatementInner();
							}
							}
						}
						this.state = 1554;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 168, this._ctx);
					}
					this.state = 1556;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1555;
						this.ends();
						}
					}

					}
				}

				this.state = 1560;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				_localctx = new TitleSSelectorCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1562;
				this.match(JustMCFParser.TITLE);
				this.state = 1563;
				this.selector();
				this.state = 1564;
				this.s_();
				this.state = 1565;
				this.match(JustMCFParser.T__3);
				this.state = 1566;
				this.s_();
				this.state = 1581;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__31) {
					{
					this.state = 1567;
					this.match(JustMCFParser.T__31);
					this.state = 1568;
					this.titleSelectorStatementInner();
					this.state = 1575;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1569;
							this.ends();
							this.state = 1570;
							this.match(JustMCFParser.T__31);
							this.state = 1571;
							this.titleSelectorStatementInner();
							}
							}
						}
						this.state = 1577;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 171, this._ctx);
					}
					this.state = 1579;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1578;
						this.ends();
						}
					}

					}
				}

				this.state = 1583;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public titleStatementInner(): TitleStatementInnerContext {
		let _localctx: TitleStatementInnerContext = new TitleStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, JustMCFParser.RULE_titleStatementInner);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1614;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 178, this._ctx) ) {
			case 1:
				_localctx = new TitleSISelectorSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1587;
				this.selector();
				this.state = 1588;
				this.s_();
				this.state = 1589;
				this.match(JustMCFParser.T__31);
				this.state = 1590;
				this.titleSelectorStatementInner();
				}
				break;

			case 2:
				_localctx = new TitleSISelectorCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1592;
				this.selector();
				this.state = 1593;
				this.s_();
				this.state = 1594;
				this.match(JustMCFParser.T__3);
				this.state = 1595;
				this.s_();
				this.state = 1610;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__31) {
					{
					this.state = 1596;
					this.match(JustMCFParser.T__31);
					this.state = 1597;
					this.titleSelectorStatementInner();
					this.state = 1604;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1598;
							this.ends();
							this.state = 1599;
							this.match(JustMCFParser.T__31);
							this.state = 1600;
							this.titleSelectorStatementInner();
							}
							}
						}
						this.state = 1606;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 175, this._ctx);
					}
					this.state = 1608;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1607;
						this.ends();
						}
					}

					}
				}

				this.state = 1612;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public titleSelectorStatementInner(): TitleSelectorStatementInnerContext {
		let _localctx: TitleSelectorStatementInnerContext = new TitleSelectorStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, JustMCFParser.RULE_titleSelectorStatementInner);
		let _la: number;
		try {
			this.state = 1625;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
				_localctx = new TitleSSIJsonContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1616;
				(_localctx as TitleSSIJsonContext)._pos = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (JustMCFParser.TITLE - 142)) | (1 << (JustMCFParser.SUBTITLE - 142)) | (1 << (JustMCFParser.ACTIONBAR - 142)))) !== 0))) {
					(_localctx as TitleSSIJsonContext)._pos = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1617;
				this.json();
				}
				break;
			case JustMCFParser.CLEAR:
				_localctx = new TitleSSIClearContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1618;
				this.match(JustMCFParser.CLEAR);
				}
				break;
			case JustMCFParser.RESET:
				_localctx = new TitleSSIResetContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1619;
				this.match(JustMCFParser.RESET);
				}
				break;
			case JustMCFParser.TIMES:
				_localctx = new TitleSSITimesContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1620;
				this.match(JustMCFParser.TIMES);
				this.state = 1621;
				this.number();
				this.state = 1622;
				this.number();
				this.state = 1623;
				this.number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public titleIndependentStatementInner(): TitleIndependentStatementInnerContext {
		let _localctx: TitleIndependentStatementInnerContext = new TitleIndependentStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, JustMCFParser.RULE_titleIndependentStatementInner);
		let _la: number;
		try {
			this.state = 1639;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 180, this._ctx) ) {
			case 1:
				_localctx = new TitleISIJsonContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1627;
				(_localctx as TitleISIJsonContext)._pos = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 142)) & ~0x1F) === 0 && ((1 << (_la - 142)) & ((1 << (JustMCFParser.TITLE - 142)) | (1 << (JustMCFParser.SUBTITLE - 142)) | (1 << (JustMCFParser.ACTIONBAR - 142)))) !== 0))) {
					(_localctx as TitleISIJsonContext)._pos = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1628;
				this.json();
				}
				break;

			case 2:
				_localctx = new TitleISIClearContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1629;
				this.match(JustMCFParser.TITLE);
				this.state = 1630;
				this.match(JustMCFParser.CLEAR);
				}
				break;

			case 3:
				_localctx = new TitleISIResetContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1631;
				this.match(JustMCFParser.TITLE);
				this.state = 1632;
				this.match(JustMCFParser.RESET);
				}
				break;

			case 4:
				_localctx = new TitleISITimesContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1633;
				this.match(JustMCFParser.TITLE);
				this.state = 1634;
				this.match(JustMCFParser.TIMES);
				this.state = 1635;
				this.number();
				this.state = 1636;
				this.number();
				this.state = 1637;
				this.number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public displayStatement(): DisplayStatementContext {
		let _localctx: DisplayStatementContext = new DisplayStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, JustMCFParser.RULE_displayStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1684;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
			case 1:
				_localctx = new DisplaySCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1641;
				this.match(JustMCFParser.DISPLAY);
				this.state = 1642;
				this.s_();
				this.state = 1643;
				this.match(JustMCFParser.T__3);
				this.state = 1644;
				this.s_();
				this.state = 1657;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__34 || _la === JustMCFParser.T__52 || _la === JustMCFParser.SCB || _la === JustMCFParser.BOSSBAR) {
					{
					this.state = 1645;
					this.displayStatementInner();
					this.state = 1651;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1646;
							this.ends();
							this.state = 1647;
							this.displayStatementInner();
							}
							}
						}
						this.state = 1653;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 181, this._ctx);
					}
					this.state = 1655;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1654;
						this.ends();
						}
					}

					}
				}

				this.state = 1659;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				_localctx = new DisplaySSelectorCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1661;
				this.match(JustMCFParser.DISPLAY);
				this.state = 1662;
				this.selector();
				this.state = 1663;
				this.s_();
				this.state = 1664;
				this.match(JustMCFParser.T__3);
				this.state = 1665;
				this.s_();
				this.state = 1680;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__31) {
					{
					this.state = 1666;
					this.match(JustMCFParser.T__31);
					this.state = 1667;
					this.displayIndependentStatementInner();
					this.state = 1674;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 184, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1668;
							this.ends();
							this.state = 1669;
							this.match(JustMCFParser.T__31);
							this.state = 1670;
							this.displayIndependentStatementInner();
							}
							}
						}
						this.state = 1676;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 184, this._ctx);
					}
					this.state = 1678;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1677;
						this.ends();
						}
					}

					}
				}

				this.state = 1682;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public displayStatementInner(): DisplayStatementInnerContext {
		let _localctx: DisplayStatementInnerContext = new DisplayStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, JustMCFParser.RULE_displayStatementInner);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1715;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 191, this._ctx) ) {
			case 1:
				_localctx = new DisplaySIScbContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1686;
				this.scbObjectiveStatement();
				}
				break;

			case 2:
				_localctx = new DisplaySIBossbarContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1687;
				this.bossbarStatement();
				}
				break;

			case 3:
				_localctx = new DisplaySISelectorSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1688;
				this.selector();
				this.state = 1689;
				this.s_();
				this.state = 1690;
				this.match(JustMCFParser.T__31);
				this.state = 1691;
				this.displayIndependentStatementInner();
				}
				break;

			case 4:
				_localctx = new DisplaySISelectorCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1693;
				this.selector();
				this.state = 1694;
				this.s_();
				this.state = 1695;
				this.match(JustMCFParser.T__3);
				this.state = 1696;
				this.s_();
				this.state = 1711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__31) {
					{
					this.state = 1697;
					this.match(JustMCFParser.T__31);
					this.state = 1698;
					this.displayIndependentStatementInner();
					this.state = 1705;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1699;
							this.ends();
							this.state = 1700;
							this.match(JustMCFParser.T__31);
							this.state = 1701;
							this.displayIndependentStatementInner();
							}
							}
						}
						this.state = 1707;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 188, this._ctx);
					}
					this.state = 1709;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1708;
						this.ends();
						}
					}

					}
				}

				this.state = 1713;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public displayIndependentStatementInner(): DisplayIndependentStatementInnerContext {
		let _localctx: DisplayIndependentStatementInnerContext = new DisplayIndependentStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, JustMCFParser.RULE_displayIndependentStatementInner);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1747;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 196, this._ctx) ) {
			case 1:
				_localctx = new DisplayISITitleSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1717;
				this.titleIndependentStatementInner();
				}
				break;

			case 2:
				_localctx = new DisplayISITitleCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1718;
				this.match(JustMCFParser.TITLE);
				this.state = 1719;
				this.s_();
				this.state = 1720;
				this.match(JustMCFParser.T__3);
				this.state = 1721;
				this.s_();
				this.state = 1736;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__31) {
					{
					this.state = 1722;
					this.match(JustMCFParser.T__31);
					this.state = 1723;
					this.titleSelectorStatementInner();
					this.state = 1730;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1724;
							this.ends();
							this.state = 1725;
							this.match(JustMCFParser.T__31);
							this.state = 1726;
							this.titleSelectorStatementInner();
							}
							}
						}
						this.state = 1732;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 192, this._ctx);
					}
					this.state = 1734;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1733;
						this.ends();
						}
					}

					}
				}

				this.state = 1738;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 3:
				_localctx = new DisplayISITextContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1740;
				this.match(JustMCFParser.TEXT);
				this.state = 1741;
				this.json();
				}
				break;

			case 4:
				_localctx = new DisplayISIBossbarContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1742;
				this.match(JustMCFParser.BOSSBAR);
				this.state = 1743;
				this.nameSpaceBossbar();
				this.state = 1745;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 195, this._ctx) ) {
				case 1:
					{
					this.state = 1744;
					this.json();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public itemStatement(): ItemStatementContext {
		let _localctx: ItemStatementContext = new ItemStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, JustMCFParser.RULE_itemStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1790;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 203, this._ctx) ) {
			case 1:
				_localctx = new ItemSCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1749;
				this.match(JustMCFParser.ITEM);
				this.state = 1750;
				this.s_();
				this.state = 1751;
				this.match(JustMCFParser.T__3);
				this.state = 1752;
				this.s_();
				this.state = 1765;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (JustMCFParser.T__34 - 35)) | (1 << (JustMCFParser.T__52 - 35)) | (1 << (JustMCFParser.NUMBER_INT - 35)) | (1 << (JustMCFParser.NUMBER - 35)))) !== 0) || _la === JustMCFParser.Pos1) {
					{
					this.state = 1753;
					this.itemStatementInner();
					this.state = 1759;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1754;
							this.ends();
							this.state = 1755;
							this.itemStatementInner();
							}
							}
						}
						this.state = 1761;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 197, this._ctx);
					}
					this.state = 1763;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1762;
						this.ends();
						}
					}

					}
				}

				this.state = 1767;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				_localctx = new ItemSSelectorCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1769;
				this.match(JustMCFParser.ITEM);
				this.state = 1770;
				this.selector();
				this.state = 1771;
				this.s_();
				this.state = 1772;
				this.match(JustMCFParser.T__3);
				this.state = 1773;
				this.s_();
				this.state = 1786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (JustMCFParser.T__17 - 18)) | (1 << (JustMCFParser.T__18 - 18)) | (1 << (JustMCFParser.T__31 - 18)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					this.state = 1774;
					this.itemSelectorStatementInner();
					this.state = 1780;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 200, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1775;
							this.ends();
							this.state = 1776;
							this.itemSelectorStatementInner();
							}
							}
						}
						this.state = 1782;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 200, this._ctx);
					}
					this.state = 1784;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1783;
						this.ends();
						}
					}

					}
				}

				this.state = 1788;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lootStatement(): LootStatementContext {
		let _localctx: LootStatementContext = new LootStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, JustMCFParser.RULE_lootStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1833;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 210, this._ctx) ) {
			case 1:
				_localctx = new LootSCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1792;
				this.match(JustMCFParser.LOOT);
				this.state = 1793;
				this.s_();
				this.state = 1794;
				this.match(JustMCFParser.T__3);
				this.state = 1795;
				this.s_();
				this.state = 1808;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (JustMCFParser.T__34 - 35)) | (1 << (JustMCFParser.T__52 - 35)) | (1 << (JustMCFParser.NUMBER_INT - 35)) | (1 << (JustMCFParser.NUMBER - 35)))) !== 0) || _la === JustMCFParser.Pos1) {
					{
					this.state = 1796;
					this.lootStatementInner();
					this.state = 1802;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1797;
							this.ends();
							this.state = 1798;
							this.lootStatementInner();
							}
							}
						}
						this.state = 1804;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 204, this._ctx);
					}
					this.state = 1806;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1805;
						this.ends();
						}
					}

					}
				}

				this.state = 1810;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				_localctx = new LootSSelectorCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1812;
				this.match(JustMCFParser.LOOT);
				this.state = 1813;
				this.selector();
				this.state = 1814;
				this.s_();
				this.state = 1815;
				this.match(JustMCFParser.T__3);
				this.state = 1816;
				this.s_();
				this.state = 1829;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__17 || _la === JustMCFParser.T__31 || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					this.state = 1817;
					this.lootSelectorStatementInner();
					this.state = 1823;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1818;
							this.ends();
							this.state = 1819;
							this.lootSelectorStatementInner();
							}
							}
						}
						this.state = 1825;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 207, this._ctx);
					}
					this.state = 1827;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1826;
						this.ends();
						}
					}

					}
				}

				this.state = 1831;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lootStatementInner(): LootStatementInnerContext {
		let _localctx: LootStatementInnerContext = new LootStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, JustMCFParser.RULE_lootStatementInner);
		let _la: number;
		try {
			let _alt: number;
			this.state = 1874;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 214, this._ctx) ) {
			case 1:
				_localctx = new LootSIInsertContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1835;
				this.pos3Identifier();
				this.state = 1836;
				this.match(JustMCFParser.T__17);
				this.state = 1837;
				this.lootSource();
				}
				break;

			case 2:
				_localctx = new LootSISpawnContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1839;
				this.pos3Identifier();
				this.state = 1840;
				this.match(JustMCFParser.T__5);
				this.state = 1841;
				this.lootSource();
				}
				break;

			case 3:
				_localctx = new LootSIReplaceBlockContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1843;
				this.pos3Identifier();
				this.state = 1844;
				this.match(JustMCFParser.T__13);
				this.state = 1845;
				this.lootIndependentStatementInnerReplaceEntity();
				}
				break;

			case 4:
				_localctx = new LootSIGiveContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1847;
				this.selector();
				this.state = 1848;
				this.lootIndependentStatementInnerGive();
				}
				break;

			case 5:
				_localctx = new LootSIReplaceEntityContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1850;
				this.selector();
				this.state = 1851;
				this.match(JustMCFParser.T__13);
				this.state = 1852;
				this.lootIndependentStatementInnerReplaceEntity();
				}
				break;

			case 6:
				_localctx = new LootSISelectorNestContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1854;
				this.selector();
				this.state = 1855;
				this.s_();
				this.state = 1856;
				this.match(JustMCFParser.T__3);
				this.state = 1857;
				this.s_();
				this.state = 1870;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__17 || _la === JustMCFParser.T__31 || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					this.state = 1858;
					this.lootSelectorStatementInner();
					this.state = 1864;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 1859;
							this.ends();
							this.state = 1860;
							this.lootSelectorStatementInner();
							}
							}
						}
						this.state = 1866;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 211, this._ctx);
					}
					this.state = 1868;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 1867;
						this.ends();
						}
					}

					}
				}

				this.state = 1872;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lootSelectorStatementInner(): LootSelectorStatementInnerContext {
		let _localctx: LootSelectorStatementInnerContext = new LootSelectorStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, JustMCFParser.RULE_lootSelectorStatementInner);
		try {
			this.state = 1878;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.T__17:
			case JustMCFParser.T__31:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1876;
				this.lootIndependentStatementInnerGive();
				}
				break;
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1877;
				this.lootIndependentStatementInnerReplaceEntity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lootIndependentStatementInnerGive(): LootIndependentStatementInnerGiveContext {
		let _localctx: LootIndependentStatementInnerGiveContext = new LootIndependentStatementInnerGiveContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, JustMCFParser.RULE_lootIndependentStatementInnerGive);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1883;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.T__17:
				{
				this.state = 1880;
				this.match(JustMCFParser.T__17);
				}
				break;
			case JustMCFParser.T__31:
				{
				{
				this.state = 1881;
				this.match(JustMCFParser.T__31);
				this.state = 1882;
				this.match(JustMCFParser.GIVE);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1885;
			this.lootSource();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lootIndependentStatementInnerReplaceEntity(): LootIndependentStatementInnerReplaceEntityContext {
		let _localctx: LootIndependentStatementInnerReplaceEntityContext = new LootIndependentStatementInnerReplaceEntityContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, JustMCFParser.RULE_lootIndependentStatementInnerReplaceEntity);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1887;
			this.item_slot();
			this.state = 1888;
			this.match(JustMCFParser.T__5);
			this.state = 1889;
			this.lootSource();
			this.state = 1894;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 218, this._ctx) ) {
			case 1:
				{
				this.state = 1891;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__12) {
					{
					this.state = 1890;
					this.match(JustMCFParser.T__12);
					}
				}

				this.state = 1893;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lootSource(): LootSourceContext {
		let _localctx: LootSourceContext = new LootSourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, JustMCFParser.RULE_lootSource);
		let _la: number;
		try {
			this.state = 1920;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 221, this._ctx) ) {
			case 1:
				_localctx = new LootSourceLootContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1896;
				this.match(JustMCFParser.LOOT);
				this.state = 1897;
				this.nameSpaceLoot();
				}
				break;

			case 2:
				_localctx = new LootSourceFishHandContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1898;
				this.match(JustMCFParser.FISH);
				this.state = 1899;
				this.nameSpaceLoot();
				this.state = 1900;
				this.pos3Identifier();
				this.state = 1902;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 219, this._ctx) ) {
				case 1:
					{
					this.state = 1901;
					(_localctx as LootSourceFishHandContext)._hand = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.MAINHAND || _la === JustMCFParser.OFFHAND)) {
						(_localctx as LootSourceFishHandContext)._hand = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new LootSourceFishToolContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1904;
				this.match(JustMCFParser.FISH);
				this.state = 1905;
				this.nameSpaceLoot();
				this.state = 1906;
				this.pos3Identifier();
				this.state = 1907;
				this.nameSpaceItem();
				}
				break;

			case 4:
				_localctx = new LootSourceKillContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1909;
				this.match(JustMCFParser.KILL);
				this.state = 1910;
				this.selector();
				}
				break;

			case 5:
				_localctx = new LootSourceMineHandContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1911;
				this.match(JustMCFParser.MINE);
				this.state = 1912;
				this.pos3Identifier();
				this.state = 1914;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 220, this._ctx) ) {
				case 1:
					{
					this.state = 1913;
					(_localctx as LootSourceMineHandContext)._hand = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.MAINHAND || _la === JustMCFParser.OFFHAND)) {
						(_localctx as LootSourceMineHandContext)._hand = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;

			case 6:
				_localctx = new LootSourceMineToolContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1916;
				this.match(JustMCFParser.MINE);
				this.state = 1917;
				this.pos3Identifier();
				this.state = 1918;
				this.nameSpaceItem();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public itemStatementInner(): ItemStatementInnerContext {
		let _localctx: ItemStatementInnerContext = new ItemStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, JustMCFParser.RULE_itemStatementInner);
		let _la: number;
		try {
			this.state = 1948;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 223, this._ctx) ) {
			case 1:
				_localctx = new ItemSIGiveAndClearContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1922;
				this.selector();
				this.state = 1923;
				this.giveAndClearIndependentStatementInner();
				}
				break;

			case 2:
				_localctx = new ItemSIEntityContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1925;
				this.selector();
				this.state = 1926;
				this.match(JustMCFParser.T__13);
				this.state = 1927;
				this.itemIndependentStatementInner();
				}
				break;

			case 3:
				_localctx = new ItemSIBlockContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1929;
				this.pos3Identifier();
				this.state = 1930;
				this.match(JustMCFParser.T__13);
				this.state = 1931;
				this.itemIndependentStatementInner();
				}
				break;

			case 4:
				_localctx = new ItemSILootInnerContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1933;
				this.lootStatementInner();
				}
				break;

			case 5:
				_localctx = new ItemSISelectorNestContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1934;
				this.selector();
				this.state = 1935;
				this.s_();
				this.state = 1936;
				this.match(JustMCFParser.T__3);
				this.state = 1937;
				this.s_();
				this.state = 1943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (JustMCFParser.T__17 - 18)) | (1 << (JustMCFParser.T__18 - 18)) | (1 << (JustMCFParser.T__31 - 18)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					{
					this.state = 1938;
					this.itemSelectorStatementInner();
					this.state = 1939;
					this.s_();
					}
					}
					this.state = 1945;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 1946;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public itemSelectorStatementInner(): ItemSelectorStatementInnerContext {
		let _localctx: ItemSelectorStatementInnerContext = new ItemSelectorStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, JustMCFParser.RULE_itemSelectorStatementInner);
		try {
			this.state = 1953;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 224, this._ctx) ) {
			case 1:
				_localctx = new ItemSSIGiveAndClearContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1950;
				this.giveAndClearIndependentStatementInner();
				}
				break;

			case 2:
				_localctx = new ItemSSIItemContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1951;
				this.itemIndependentStatementInner();
				}
				break;

			case 3:
				_localctx = new ItemSSILootInnerContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1952;
				this.lootSelectorStatementInner();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public itemIndependentStatementInner(): ItemIndependentStatementInnerContext {
		let _localctx: ItemIndependentStatementInnerContext = new ItemIndependentStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, JustMCFParser.RULE_itemIndependentStatementInner);
		let _la: number;
		try {
			this.state = 1984;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 229, this._ctx) ) {
			case 1:
				_localctx = new ItemISIReplaceWithContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1955;
				this.item_slot();
				this.state = 1956;
				this.match(JustMCFParser.T__5);
				this.state = 1957;
				this.nameSpaceItem();
				this.state = 1962;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 226, this._ctx) ) {
				case 1:
					{
					this.state = 1959;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__12) {
						{
						this.state = 1958;
						this.match(JustMCFParser.T__12);
						}
					}

					this.state = 1961;
					this.match(JustMCFParser.NUMBER_INT);
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new ItemISIReplaceFromEntityContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1964;
				this.item_slot();
				this.state = 1965;
				this.match(JustMCFParser.T__5);
				this.state = 1966;
				this.selector();
				this.state = 1967;
				this.match(JustMCFParser.T__13);
				this.state = 1968;
				this.item_slot();
				this.state = 1970;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 227, this._ctx) ) {
				case 1:
					{
					this.state = 1969;
					this.nameSpaceItemModifier();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new ItemISIReplaceFromBlockContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1972;
				this.item_slot();
				this.state = 1973;
				this.match(JustMCFParser.T__5);
				this.state = 1974;
				this.pos3Identifier();
				this.state = 1975;
				this.match(JustMCFParser.T__13);
				this.state = 1976;
				this.item_slot();
				this.state = 1978;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 228, this._ctx) ) {
				case 1:
					{
					this.state = 1977;
					this.nameSpaceItemModifier();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new ItemISIModifyContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1980;
				this.item_slot();
				this.state = 1981;
				this.match(JustMCFParser.T__17);
				this.state = 1982;
				this.nameSpaceItemModifier();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public giveAndClearIndependentStatementInner(): GiveAndClearIndependentStatementInnerContext {
		let _localctx: GiveAndClearIndependentStatementInnerContext = new GiveAndClearIndependentStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, JustMCFParser.RULE_giveAndClearIndependentStatementInner);
		let _la: number;
		try {
			this.state = 2014;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 238, this._ctx) ) {
			case 1:
				_localctx = new GiveISIContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1991;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case JustMCFParser.T__17:
					{
					this.state = 1986;
					this.match(JustMCFParser.T__17);
					}
					break;
				case JustMCFParser.T__31:
				case JustMCFParser.GIVE:
					{
					{
					this.state = 1988;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__31) {
						{
						this.state = 1987;
						this.match(JustMCFParser.T__31);
						}
					}

					this.state = 1990;
					this.match(JustMCFParser.GIVE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 1993;
				this.nameSpaceItem();
				this.state = 1998;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 233, this._ctx) ) {
				case 1:
					{
					this.state = 1995;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__12) {
						{
						this.state = 1994;
						this.match(JustMCFParser.T__12);
						}
					}

					this.state = 1997;
					this.match(JustMCFParser.NUMBER_INT);
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new ClearISIContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2005;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case JustMCFParser.T__18:
					{
					this.state = 2000;
					this.match(JustMCFParser.T__18);
					}
					break;
				case JustMCFParser.T__31:
				case JustMCFParser.CLEAR:
					{
					{
					this.state = 2002;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__31) {
						{
						this.state = 2001;
						this.match(JustMCFParser.T__31);
						}
					}

					this.state = 2004;
					this.match(JustMCFParser.CLEAR);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2007;
				this.item_predicate();
				this.state = 2012;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 237, this._ctx) ) {
				case 1:
					{
					this.state = 2009;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__12) {
						{
						this.state = 2008;
						this.match(JustMCFParser.T__12);
						}
					}

					this.state = 2011;
					this.match(JustMCFParser.NUMBER_INT);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public attrStatement(): AttrStatementContext {
		let _localctx: AttrStatementContext = new AttrStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, JustMCFParser.RULE_attrStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2057;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 245, this._ctx) ) {
			case 1:
				_localctx = new AttrSCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2016;
				this.match(JustMCFParser.ATTR);
				this.state = 2017;
				this.s_();
				this.state = 2018;
				this.match(JustMCFParser.T__3);
				this.state = 2019;
				this.s_();
				this.state = 2032;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__34 || _la === JustMCFParser.T__52) {
					{
					this.state = 2020;
					this.attrStatementInner();
					this.state = 2026;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2021;
							this.ends();
							this.state = 2022;
							this.attrStatementInner();
							}
							}
						}
						this.state = 2028;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 239, this._ctx);
					}
					this.state = 2030;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 2029;
						this.ends();
						}
					}

					}
				}

				this.state = 2034;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				_localctx = new AttrSSelectorCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2036;
				this.match(JustMCFParser.ATTR);
				this.state = 2037;
				this.selector();
				this.state = 2038;
				this.s_();
				this.state = 2039;
				this.match(JustMCFParser.T__3);
				this.state = 2040;
				this.s_();
				this.state = 2053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					this.state = 2041;
					this.attrIndependentStatementInner();
					this.state = 2047;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2042;
							this.ends();
							this.state = 2043;
							this.attrIndependentStatementInner();
							}
							}
						}
						this.state = 2049;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 242, this._ctx);
					}
					this.state = 2051;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 2050;
						this.ends();
						}
					}

					}
				}

				this.state = 2055;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public attrStatementInner(): AttrStatementInnerContext {
		let _localctx: AttrStatementInnerContext = new AttrStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, JustMCFParser.RULE_attrStatementInner);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2083;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 249, this._ctx) ) {
			case 1:
				_localctx = new AttrSISingleContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2059;
				this.selector();
				this.state = 2060;
				this.match(JustMCFParser.T__13);
				this.state = 2061;
				this.attrIndependentStatementInner();
				}
				break;

			case 2:
				_localctx = new AttrSISelectorCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2063;
				this.selector();
				this.state = 2064;
				this.s_();
				this.state = 2065;
				this.match(JustMCFParser.T__3);
				this.state = 2066;
				this.s_();
				this.state = 2079;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					this.state = 2067;
					this.attrIndependentStatementInner();
					this.state = 2073;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2068;
							this.ends();
							this.state = 2069;
							this.attrIndependentStatementInner();
							}
							}
						}
						this.state = 2075;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 246, this._ctx);
					}
					this.state = 2077;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 2076;
						this.ends();
						}
					}

					}
				}

				this.state = 2081;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public attrIndependentStatementInner(): AttrIndependentStatementInnerContext {
		let _localctx: AttrIndependentStatementInnerContext = new AttrIndependentStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, JustMCFParser.RULE_attrIndependentStatementInner);
		let _la: number;
		try {
			this.state = 2131;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 257, this._ctx) ) {
			case 1:
				_localctx = new AttrISIGetContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2085;
				this.registerName();
				this.state = 2087;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 250, this._ctx) ) {
				case 1:
					{
					this.state = 2086;
					this.match(JustMCFParser.ALL);
					}
					break;
				}
				this.state = 2093;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 252, this._ctx) ) {
				case 1:
					{
					this.state = 2090;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__12) {
						{
						this.state = 2089;
						this.match(JustMCFParser.T__12);
						}
					}

					this.state = 2092;
					this.number();
					}
					break;
				}
				}
				break;

			case 2:
				_localctx = new AttrISIGetBaseContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2095;
				this.registerName();
				this.state = 2096;
				this.match(JustMCFParser.BASE);
				this.state = 2101;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 254, this._ctx) ) {
				case 1:
					{
					this.state = 2098;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__12) {
						{
						this.state = 2097;
						this.match(JustMCFParser.T__12);
						}
					}

					this.state = 2100;
					this.number();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new AttrISISetBaseContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2103;
				this.registerName();
				this.state = 2104;
				this.match(JustMCFParser.BASE);
				this.state = 2105;
				this.match(JustMCFParser.T__5);
				this.state = 2106;
				this.number();
				}
				break;

			case 4:
				_localctx = new AttrISIModifierAddContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2108;
				this.registerName();
				this.state = 2109;
				this.match(JustMCFParser.T__17);
				this.state = 2110;
				this.s_();
				this.state = 2111;
				this.match(JustMCFParser.UUID16_);
				this.state = 2112;
				this.string();
				this.state = 2113;
				this.match(JustMCFParser.T__6);
				this.state = 2114;
				(_localctx as AttrISIModifierAddContext)._op = this._input.LT(1);
				_la = this._input.LA(1);
				if (!(((((_la - 13)) & ~0x1F) === 0 && ((1 << (_la - 13)) & ((1 << (JustMCFParser.T__12 - 13)) | (1 << (JustMCFParser.T__28 - 13)) | (1 << (JustMCFParser.T__32 - 13)))) !== 0))) {
					(_localctx as AttrISIModifierAddContext)._op = this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2115;
				this.number();
				this.state = 2116;
				this.match(JustMCFParser.T__7);
				}
				break;

			case 5:
				_localctx = new AttrISIModifierRemoveContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2118;
				this.registerName();
				this.state = 2119;
				this.match(JustMCFParser.T__18);
				this.state = 2120;
				this.s_();
				this.state = 2121;
				this.match(JustMCFParser.UUID16_);
				}
				break;

			case 6:
				_localctx = new AttrISIModifierGetContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2123;
				this.registerName();
				this.state = 2124;
				this.match(JustMCFParser.UUID16_);
				this.state = 2129;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 256, this._ctx) ) {
				case 1:
					{
					this.state = 2126;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__12) {
						{
						this.state = 2125;
						this.match(JustMCFParser.T__12);
						}
					}

					this.state = 2128;
					this.number();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entityStatement(): EntityStatementContext {
		let _localctx: EntityStatementContext = new EntityStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, JustMCFParser.RULE_entityStatement);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2288;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 284, this._ctx) ) {
			case 1:
				_localctx = new EntitySDeclarePlayerContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2133;
				this.match(JustMCFParser.ENTITY);
				this.state = 2134;
				this.match(JustMCFParser.T__6);
				this.state = 2135;
				this.match(JustMCFParser.PLAYER);
				this.state = 2136;
				this.match(JustMCFParser.T__7);
				this.state = 2137;
				this.playerName();
				this.state = 2144;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2139;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === JustMCFParser.T__33) {
							{
							this.state = 2138;
							this.match(JustMCFParser.T__33);
							}
						}

						this.state = 2141;
						this.playerName();
						}
						}
					}
					this.state = 2146;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 259, this._ctx);
				}
				}
				break;

			case 2:
				_localctx = new EntitySDeclareContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2147;
				this.match(JustMCFParser.ENTITY);
				this.state = 2148;
				this.match(JustMCFParser.T__6);
				this.state = 2149;
				(_localctx as EntitySDeclareContext)._type = this.nameSpaceEntity();
				this.state = 2150;
				this.match(JustMCFParser.T__7);
				this.state = 2151;
				this.s_();
				this.state = 2152;
				this.pos3Identifier();
				this.state = 2153;
				this.s_();
				this.state = 2157;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 260, this._ctx) ) {
				case 1:
					{
					this.state = 2154;
					this.nbt();
					this.state = 2155;
					this.s_();
					}
					break;
				}
				this.state = 2183;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 266, this._ctx) ) {
				case 1:
					{
					this.state = 2159;
					this.match(JustMCFParser.T__3);
					this.state = 2160;
					this.s_();
					this.state = 2179;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__31 || _la === JustMCFParser.TAG) {
						{
						this.state = 2162;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === JustMCFParser.T__31) {
							{
							this.state = 2161;
							this.match(JustMCFParser.T__31);
							}
						}

						this.state = 2164;
						this.entityDeclareStatementInner();
						this.state = 2173;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 2165;
								this.ends();
								this.state = 2167;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === JustMCFParser.T__31) {
									{
									this.state = 2166;
									this.match(JustMCFParser.T__31);
									}
								}

								this.state = 2169;
								this.entityDeclareStatementInner();
								}
								}
							}
							this.state = 2175;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 263, this._ctx);
						}
						this.state = 2177;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
							{
							this.state = 2176;
							this.ends();
							}
						}

						}
					}

					this.state = 2181;
					this.match(JustMCFParser.T__4);
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new EntitySDeclareWithNameContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2185;
				this.match(JustMCFParser.ENTITY);
				this.state = 2186;
				this.match(JustMCFParser.T__6);
				this.state = 2187;
				(_localctx as EntitySDeclareWithNameContext)._type = this.nameSpaceEntity();
				this.state = 2188;
				this.match(JustMCFParser.T__7);
				this.state = 2189;
				this.s_();
				this.state = 2193;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.NUMBER_INT || _la === JustMCFParser.NUMBER || _la === JustMCFParser.Pos1) {
					{
					this.state = 2190;
					this.pos3Identifier();
					this.state = 2191;
					this.s_();
					}
				}

				this.state = 2195;
				this.acceptableName();
				this.state = 2196;
				this.s_();
				this.state = 2200;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 268, this._ctx) ) {
				case 1:
					{
					this.state = 2197;
					this.nbt();
					this.state = 2198;
					this.s_();
					}
					break;
				}
				this.state = 2243;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 277, this._ctx) ) {
				case 1:
					{
					this.state = 2202;
					this.match(JustMCFParser.T__3);
					this.state = 2203;
					this.s_();
					this.state = 2222;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 273, this._ctx) ) {
					case 1:
						{
						this.state = 2205;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === JustMCFParser.T__31) {
							{
							this.state = 2204;
							this.match(JustMCFParser.T__31);
							}
						}

						this.state = 2207;
						this.entityDeclareStatementInner();
						this.state = 2216;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 2208;
								this.ends();
								this.state = 2210;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === JustMCFParser.T__31) {
									{
									this.state = 2209;
									this.match(JustMCFParser.T__31);
									}
								}

								this.state = 2212;
								this.entityDeclareStatementInner();
								}
								}
							}
							this.state = 2218;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 271, this._ctx);
						}
						this.state = 2220;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 272, this._ctx) ) {
						case 1:
							{
							this.state = 2219;
							this.ends();
							}
							break;
						}
						}
						break;
					}
					this.state = 2224;
					this.s_();
					this.state = 2239;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__31) {
						{
						this.state = 2225;
						this.match(JustMCFParser.T__31);
						this.state = 2226;
						this.entityIndependentStatementInner();
						this.state = 2233;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
						while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								{
								{
								this.state = 2227;
								this.ends();
								this.state = 2228;
								this.match(JustMCFParser.T__31);
								this.state = 2229;
								this.entityIndependentStatementInner();
								}
								}
							}
							this.state = 2235;
							this._errHandler.sync(this);
							_alt = this.interpreter.adaptivePredict(this._input, 274, this._ctx);
						}
						this.state = 2237;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
							{
							this.state = 2236;
							this.ends();
							}
						}

						}
					}

					this.state = 2241;
					this.match(JustMCFParser.T__4);
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new EntitySCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2245;
				this.match(JustMCFParser.ENTITY);
				this.state = 2246;
				this.s_();
				this.state = 2247;
				this.match(JustMCFParser.T__3);
				this.state = 2248;
				this.s_();
				this.state = 2261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__34 || _la === JustMCFParser.T__52) {
					{
					this.state = 2249;
					this.entityStatementInner();
					this.state = 2255;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2250;
							this.ends();
							this.state = 2251;
							this.entityStatementInner();
							}
							}
						}
						this.state = 2257;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 278, this._ctx);
					}
					this.state = 2259;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 2258;
						this.ends();
						}
					}

					}
				}

				this.state = 2263;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 5:
				_localctx = new EntitySSelectorCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2265;
				this.match(JustMCFParser.ENTITY);
				this.state = 2266;
				this.selector();
				this.state = 2267;
				this.s_();
				this.state = 2268;
				this.match(JustMCFParser.T__3);
				this.state = 2269;
				this.s_();
				this.state = 2284;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__31) {
					{
					this.state = 2270;
					this.match(JustMCFParser.T__31);
					this.state = 2271;
					this.entityIndependentStatementInner();
					this.state = 2278;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2272;
							this.ends();
							this.state = 2273;
							this.match(JustMCFParser.T__31);
							this.state = 2274;
							this.entityIndependentStatementInner();
							}
							}
						}
						this.state = 2280;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 281, this._ctx);
					}
					this.state = 2282;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 2281;
						this.ends();
						}
					}

					}
				}

				this.state = 2286;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public playerName(): PlayerNameContext {
		let _localctx: PlayerNameContext = new PlayerNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, JustMCFParser.RULE_playerName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2291;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.T__34) {
				{
				this.state = 2290;
				_localctx._fake = this.match(JustMCFParser.T__34);
				}
			}

			this.state = 2293;
			this.nbtName(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entityDeclareStatementInner(): EntityDeclareStatementInnerContext {
		let _localctx: EntityDeclareStatementInnerContext = new EntityDeclareStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, JustMCFParser.RULE_entityDeclareStatementInner);
		try {
			let _alt: number;
			_localctx = new EntityDeclareSITagContext(_localctx);
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2295;
			this.match(JustMCFParser.TAG);
			this.state = 2296;
			this.match(JustMCFParser.T__5);
			this.state = 2297;
			this.nbtName(0);
			this.state = 2303;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2298;
					this.p_();
					this.state = 2299;
					this.nbtName(0);
					}
					}
				}
				this.state = 2305;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tagIndependentStatementInner(): TagIndependentStatementInnerContext {
		let _localctx: TagIndependentStatementInnerContext = new TagIndependentStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, JustMCFParser.RULE_tagIndependentStatementInner);
		let _la: number;
		try {
			this.state = 2314;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 287, this._ctx) ) {
			case 1:
				_localctx = new TagISIAddContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2306;
				this.match(JustMCFParser.TAG);
				this.state = 2307;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.T__17 || _la === JustMCFParser.ADD)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2308;
				this.nbtName(0);
				}
				break;

			case 2:
				_localctx = new TagISIRemoveContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2309;
				this.match(JustMCFParser.TAG);
				this.state = 2310;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.T__18 || _la === JustMCFParser.REMOVE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2311;
				this.nbtName(0);
				}
				break;

			case 3:
				_localctx = new TagISIListContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2312;
				this.match(JustMCFParser.TAG);
				this.state = 2313;
				this.match(JustMCFParser.LIST);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public effectIndependentStatementInner(): EffectIndependentStatementInnerContext {
		let _localctx: EffectIndependentStatementInnerContext = new EffectIndependentStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, JustMCFParser.RULE_effectIndependentStatementInner);
		let _la: number;
		try {
			this.state = 2347;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 294, this._ctx) ) {
			case 1:
				_localctx = new EffectISIClearContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2316;
				this.match(JustMCFParser.EFFECT);
				this.state = 2317;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.T__18 || _la === JustMCFParser.CLEAR)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2318;
				this.acceptableName();
				}
				break;

			case 2:
				_localctx = new EffectISIGiveContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2319;
				this.match(JustMCFParser.EFFECT);
				this.state = 2320;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.T__17 || _la === JustMCFParser.GIVE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2321;
				this.acceptableName();
				this.state = 2323;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 288, this._ctx) ) {
				case 1:
					{
					this.state = 2322;
					(_localctx as EffectISIGiveContext)._second = this.match(JustMCFParser.NUMBER_INT);
					}
					break;
				}
				this.state = 2326;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 289, this._ctx) ) {
				case 1:
					{
					this.state = 2325;
					(_localctx as EffectISIGiveContext)._amplifier = this.match(JustMCFParser.NUMBER_INT);
					}
					break;
				}
				this.state = 2329;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 290, this._ctx) ) {
				case 1:
					{
					this.state = 2328;
					this.boolValue();
					}
					break;
				}
				}
				break;

			case 3:
				_localctx = new EffectISIGiveSpContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2331;
				this.match(JustMCFParser.EFFECT);
				this.state = 2332;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.T__17 || _la === JustMCFParser.GIVE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2333;
				this.acceptableName();
				this.state = 2337;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 291, this._ctx) ) {
				case 1:
					{
					this.state = 2334;
					this.match(JustMCFParser.T__6);
					this.state = 2335;
					(_localctx as EffectISIGiveSpContext)._amplifier = this.match(JustMCFParser.NUMBER_INT);
					this.state = 2336;
					this.match(JustMCFParser.T__7);
					}
					break;
				}
				this.state = 2340;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 292, this._ctx) ) {
				case 1:
					{
					this.state = 2339;
					(_localctx as EffectISIGiveSpContext)._second = this.match(JustMCFParser.NUMBER_INT);
					}
					break;
				}
				this.state = 2343;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 293, this._ctx) ) {
				case 1:
					{
					this.state = 2342;
					this.boolValue();
					}
					break;
				}
				}
				break;

			case 4:
				_localctx = new EffectISIClearAllContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2345;
				this.match(JustMCFParser.EFFECT);
				this.state = 2346;
				this.match(JustMCFParser.CLEAR);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tpIndependentStatementInner(): TpIndependentStatementInnerContext {
		let _localctx: TpIndependentStatementInnerContext = new TpIndependentStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, JustMCFParser.RULE_tpIndependentStatementInner);
		let _la: number;
		try {
			this.state = 2374;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 297, this._ctx) ) {
			case 1:
				_localctx = new TpISIDestinationContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2349;
				this.match(JustMCFParser.TP);
				this.state = 2350;
				this.selector();
				}
				break;

			case 2:
				_localctx = new TpISIPosContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2351;
				this.match(JustMCFParser.TP);
				this.state = 2352;
				this.pos3Identifier();
				}
				break;

			case 3:
				_localctx = new TpISIRotatedContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2353;
				this.match(JustMCFParser.TP);
				this.state = 2354;
				this.pos5Identifier();
				}
				break;

			case 4:
				_localctx = new TpISIRotatedDivContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2355;
				this.match(JustMCFParser.TP);
				this.state = 2356;
				this.pos3Identifier();
				this.state = 2357;
				this.pos2Identifier();
				}
				break;

			case 5:
				_localctx = new TpISIFacingContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2359;
				this.match(JustMCFParser.TP);
				this.state = 2360;
				this.pos3Identifier();
				this.state = 2361;
				this.match(JustMCFParser.FACING);
				this.state = 2362;
				this.pos3Identifier();
				}
				break;

			case 6:
				_localctx = new TpISIFacingEntityContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2364;
				this.match(JustMCFParser.TP);
				this.state = 2365;
				this.pos3Identifier();
				this.state = 2366;
				this.match(JustMCFParser.FACING);
				this.state = 2368;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.ENTITY) {
					{
					this.state = 2367;
					this.match(JustMCFParser.ENTITY);
					}
				}

				this.state = 2370;
				this.selector();
				this.state = 2372;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 296, this._ctx) ) {
				case 1:
					{
					this.state = 2371;
					(_localctx as TpISIFacingEntityContext)._anchor = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.EYES || _la === JustMCFParser.FEET)) {
						(_localctx as TpISIFacingEntityContext)._anchor = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entityIndependentStatementInner(): EntityIndependentStatementInnerContext {
		let _localctx: EntityIndependentStatementInnerContext = new EntityIndependentStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, JustMCFParser.RULE_entityIndependentStatementInner);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2491;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 311, this._ctx) ) {
			case 1:
				_localctx = new EntityISIGiveAndClearContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2376;
				this.giveAndClearIndependentStatementInner();
				}
				break;

			case 2:
				_localctx = new EntityISIKillContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2377;
				this.match(JustMCFParser.KILL);
				}
				break;

			case 3:
				_localctx = new EntityISITagContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2378;
				this.tagIndependentStatementInner();
				}
				break;

			case 4:
				_localctx = new EntityISIEffectContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2379;
				this.effectIndependentStatementInner();
				}
				break;

			case 5:
				_localctx = new EntityISITpContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2380;
				this.tpIndependentStatementInner();
				}
				break;

			case 6:
				_localctx = new EntityISITitleCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2381;
				this.match(JustMCFParser.TITLE);
				this.state = 2382;
				this.s_();
				this.state = 2383;
				this.match(JustMCFParser.T__3);
				this.state = 2384;
				this.s_();
				this.state = 2399;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__31) {
					{
					this.state = 2385;
					this.match(JustMCFParser.T__31);
					this.state = 2386;
					this.titleSelectorStatementInner();
					this.state = 2393;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2387;
							this.ends();
							this.state = 2388;
							this.match(JustMCFParser.T__31);
							this.state = 2389;
							this.titleSelectorStatementInner();
							}
							}
						}
						this.state = 2395;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 298, this._ctx);
					}
					this.state = 2397;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 2396;
						this.ends();
						}
					}

					}
				}

				this.state = 2401;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 7:
				_localctx = new EntityISIDisplayCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2403;
				this.match(JustMCFParser.DISPLAY);
				this.state = 2404;
				this.s_();
				this.state = 2405;
				this.match(JustMCFParser.T__3);
				this.state = 2406;
				this.s_();
				this.state = 2413;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__31) {
					{
					{
					this.state = 2407;
					this.match(JustMCFParser.T__31);
					this.state = 2408;
					this.displayIndependentStatementInner();
					this.state = 2409;
					this.ends();
					}
					}
					this.state = 2415;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2416;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 8:
				_localctx = new EntityISIDisplaySingleContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2418;
				this.displayIndependentStatementInner();
				}
				break;

			case 9:
				_localctx = new EntityISIItemSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2419;
				this.match(JustMCFParser.ITEM);
				this.state = 2420;
				this.match(JustMCFParser.T__13);
				this.state = 2421;
				this.itemIndependentStatementInner();
				}
				break;

			case 10:
				_localctx = new EntityISILootGiveSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2422;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.ITEM || _la === JustMCFParser.LOOT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2423;
				this.lootIndependentStatementInnerGive();
				}
				break;

			case 11:
				_localctx = new EntityISILootSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2424;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.ITEM || _la === JustMCFParser.LOOT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2425;
				this.match(JustMCFParser.T__13);
				this.state = 2426;
				this.lootIndependentStatementInnerReplaceEntity();
				}
				break;

			case 12:
				_localctx = new EntityISIItemCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2427;
				this.match(JustMCFParser.ITEM);
				this.state = 2428;
				this.s_();
				this.state = 2429;
				this.match(JustMCFParser.T__3);
				this.state = 2430;
				this.s_();
				this.state = 2443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 18)) & ~0x1F) === 0 && ((1 << (_la - 18)) & ((1 << (JustMCFParser.T__17 - 18)) | (1 << (JustMCFParser.T__18 - 18)) | (1 << (JustMCFParser.T__31 - 18)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					this.state = 2431;
					this.itemSelectorStatementInner();
					this.state = 2437;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2432;
							this.ends();
							this.state = 2433;
							this.itemSelectorStatementInner();
							}
							}
						}
						this.state = 2439;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 302, this._ctx);
					}
					this.state = 2441;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 2440;
						this.ends();
						}
					}

					}
				}

				this.state = 2445;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 13:
				_localctx = new EntityISILootCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2447;
				this.match(JustMCFParser.LOOT);
				this.state = 2448;
				this.s_();
				this.state = 2449;
				this.match(JustMCFParser.T__3);
				this.state = 2450;
				this.s_();
				this.state = 2463;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__17 || _la === JustMCFParser.T__31 || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					this.state = 2451;
					this.lootSelectorStatementInner();
					this.state = 2457;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2452;
							this.ends();
							this.state = 2453;
							this.lootSelectorStatementInner();
							}
							}
						}
						this.state = 2459;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 305, this._ctx);
					}
					this.state = 2461;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 2460;
						this.ends();
						}
					}

					}
				}

				this.state = 2465;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 14:
				_localctx = new EntityISIAttrSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2467;
				this.match(JustMCFParser.ATTR);
				this.state = 2468;
				this.match(JustMCFParser.T__13);
				this.state = 2469;
				this.attrIndependentStatementInner();
				}
				break;

			case 15:
				_localctx = new EntityISIAttrCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2470;
				this.match(JustMCFParser.ATTR);
				this.state = 2471;
				this.s_();
				this.state = 2472;
				this.match(JustMCFParser.T__3);
				this.state = 2473;
				this.s_();
				this.state = 2486;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					this.state = 2474;
					this.attrIndependentStatementInner();
					this.state = 2480;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2475;
							this.ends();
							this.state = 2476;
							this.attrIndependentStatementInner();
							}
							}
						}
						this.state = 2482;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 308, this._ctx);
					}
					this.state = 2484;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 2483;
						this.ends();
						}
					}

					}
				}

				this.state = 2488;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 16:
				_localctx = new EntityISIExecContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2490;
				this.execStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entityStatementInner(): EntityStatementInnerContext {
		let _localctx: EntityStatementInnerContext = new EntityStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, JustMCFParser.RULE_entityStatementInner);
		let _la: number;
		try {
			let _alt: number;
			this.state = 2516;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 315, this._ctx) ) {
			case 1:
				_localctx = new EntitySIEntityExpressionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2493;
				this.entityExpression();
				}
				break;

			case 2:
				_localctx = new EntitySISelectorCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2494;
				this.selector();
				this.state = 2495;
				this.s_();
				this.state = 2496;
				this.match(JustMCFParser.T__3);
				this.state = 2497;
				this.s_();
				this.state = 2512;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__31) {
					{
					this.state = 2498;
					this.match(JustMCFParser.T__31);
					this.state = 2499;
					this.entityIndependentStatementInner();
					this.state = 2506;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
					while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
						if (_alt === 1) {
							{
							{
							this.state = 2500;
							this.ends();
							this.state = 2501;
							this.match(JustMCFParser.T__31);
							this.state = 2502;
							this.entityIndependentStatementInner();
							}
							}
						}
						this.state = 2508;
						this._errHandler.sync(this);
						_alt = this.interpreter.adaptivePredict(this._input, 312, this._ctx);
					}
					this.state = 2510;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
						{
						this.state = 2509;
						this.ends();
						}
					}

					}
				}

				this.state = 2514;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public entityExpression(): EntityExpressionContext {
		let _localctx: EntityExpressionContext = new EntityExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, JustMCFParser.RULE_entityExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2518;
			this.selector();
			this.state = 2519;
			this.s_();
			this.state = 2520;
			this.match(JustMCFParser.T__31);
			this.state = 2521;
			this.entityIndependentStatementInner();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockStatement(): BlockStatementContext {
		let _localctx: BlockStatementContext = new BlockStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, JustMCFParser.RULE_blockStatement);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2523;
			this.match(JustMCFParser.BLOCK);
			this.state = 2524;
			this.s_();
			this.state = 2525;
			this.match(JustMCFParser.T__3);
			this.state = 2526;
			this.s_();
			this.state = 2539;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.NUMBER_INT || _la === JustMCFParser.NUMBER || _la === JustMCFParser.Pos1) {
				{
				this.state = 2527;
				this.blockStatementInner();
				this.state = 2533;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 2528;
						this.ends();
						this.state = 2529;
						this.blockStatementInner();
						}
						}
					}
					this.state = 2535;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 316, this._ctx);
				}
				this.state = 2537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__51 || _la === JustMCFParser.NL) {
					{
					this.state = 2536;
					this.ends();
					}
				}

				}
			}

			this.state = 2541;
			this.match(JustMCFParser.T__4);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockStatementInner(): BlockStatementInnerContext {
		let _localctx: BlockStatementInnerContext = new BlockStatementInnerContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, JustMCFParser.RULE_blockStatementInner);
		let _la: number;
		try {
			this.state = 2577;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 324, this._ctx) ) {
			case 1:
				_localctx = new BlockSISetblockContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2543;
				this.pos3Identifier();
				this.state = 2544;
				this.blockIdentifier();
				this.state = 2546;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (JustMCFParser.DESTROY - 162)) | (1 << (JustMCFParser.KEEP - 162)) | (1 << (JustMCFParser.REPLACE - 162)))) !== 0)) {
					{
					this.state = 2545;
					(_localctx as BlockSISetblockContext)._mod = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (JustMCFParser.DESTROY - 162)) | (1 << (JustMCFParser.KEEP - 162)) | (1 << (JustMCFParser.REPLACE - 162)))) !== 0))) {
						(_localctx as BlockSISetblockContext)._mod = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;

			case 2:
				_localctx = new BlockSIFillContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2548;
				this.pos3Identifier();
				this.state = 2549;
				this.pos3Identifier();
				this.state = 2550;
				this.blockIdentifier();
				this.state = 2552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (JustMCFParser.DESTROY - 162)) | (1 << (JustMCFParser.KEEP - 162)) | (1 << (JustMCFParser.HOLLOW - 162)) | (1 << (JustMCFParser.OUTLINE - 162)))) !== 0)) {
					{
					this.state = 2551;
					(_localctx as BlockSIFillContext)._mod = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (JustMCFParser.DESTROY - 162)) | (1 << (JustMCFParser.KEEP - 162)) | (1 << (JustMCFParser.HOLLOW - 162)) | (1 << (JustMCFParser.OUTLINE - 162)))) !== 0))) {
						(_localctx as BlockSIFillContext)._mod = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;

			case 3:
				_localctx = new BlockSIFillReplaceContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2554;
				this.pos3Identifier();
				this.state = 2555;
				this.pos3Identifier();
				this.state = 2556;
				this.blockIdentifier();
				this.state = 2557;
				this.match(JustMCFParser.REPLACE);
				this.state = 2558;
				this.block_predicate();
				}
				break;

			case 4:
				_localctx = new BlockSICloneContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2560;
				this.pos3Identifier();
				this.state = 2561;
				this.pos3Identifier();
				this.state = 2562;
				this.pos3Identifier();
				this.state = 2564;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.MASKED || _la === JustMCFParser.REPLACE) {
					{
					this.state = 2563;
					(_localctx as BlockSICloneContext)._masked_mod = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.MASKED || _la === JustMCFParser.REPLACE)) {
						(_localctx as BlockSICloneContext)._masked_mod = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2567;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (JustMCFParser.FORCE - 167)) | (1 << (JustMCFParser.MOVE - 167)) | (1 << (JustMCFParser.NORMAL - 167)))) !== 0)) {
					{
					this.state = 2566;
					(_localctx as BlockSICloneContext)._mod = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (JustMCFParser.FORCE - 167)) | (1 << (JustMCFParser.MOVE - 167)) | (1 << (JustMCFParser.NORMAL - 167)))) !== 0))) {
						(_localctx as BlockSICloneContext)._mod = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;

			case 5:
				_localctx = new BlockSICloneFilteredContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2569;
				this.pos3Identifier();
				this.state = 2570;
				this.pos3Identifier();
				this.state = 2571;
				this.pos3Identifier();
				this.state = 2572;
				this.match(JustMCFParser.FILTERED);
				this.state = 2573;
				this.block_predicate();
				this.state = 2575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (JustMCFParser.FORCE - 167)) | (1 << (JustMCFParser.MOVE - 167)) | (1 << (JustMCFParser.NORMAL - 167)))) !== 0)) {
					{
					this.state = 2574;
					(_localctx as BlockSICloneFilteredContext)._mod = this._input.LT(1);
					_la = this._input.LA(1);
					if (!(((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (JustMCFParser.FORCE - 167)) | (1 << (JustMCFParser.MOVE - 167)) | (1 << (JustMCFParser.NORMAL - 167)))) !== 0))) {
						(_localctx as BlockSICloneFilteredContext)._mod = this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interfaceStatement(): InterfaceStatementContext {
		let _localctx: InterfaceStatementContext = new InterfaceStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, JustMCFParser.RULE_interfaceStatement);
		try {
			this.state = 2587;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 325, this._ctx) ) {
			case 1:
				_localctx = new InterfaceSNamespaceContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2579;
				this.match(JustMCFParser.INTERFACE);
				this.state = 2580;
				this.nameSpaceStorage();
				this.state = 2581;
				this.nbt();
				}
				break;

			case 2:
				_localctx = new InterfaceSIdentifierContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2583;
				this.match(JustMCFParser.INTERFACE);
				this.state = 2584;
				this.dataIdentifier();
				this.state = 2585;
				this.nbt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dataAssignExistExpression(): DataAssignExistExpressionContext {
		let _localctx: DataAssignExistExpressionContext = new DataAssignExistExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, JustMCFParser.RULE_dataAssignExistExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2589;
			this.dataIdentifier();
			this.state = 2590;
			this.match(JustMCFParser.T__5);
			this.state = 2591;
			this.existExpression(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public existExpression(): ExistExpressionContext;
	public existExpression(_p: number): ExistExpressionContext;
	// @RuleVersion(0)
	public existExpression(_p?: number): ExistExpressionContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: ExistExpressionContext = new ExistExpressionContext(this._ctx, _parentState);
		let _prevctx: ExistExpressionContext = _localctx;
		let _startState: number = 166;
		this.enterRecursionRule(_localctx, 166, JustMCFParser.RULE_existExpression, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2618;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 327, this._ctx) ) {
			case 1:
				{
				_localctx = new ExistExpressionExecContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;

				this.state = 2594;
				this.match(JustMCFParser.T__3);
				this.state = 2595;
				this.s_();
				this.state = 2601;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << JustMCFParser.T__3) | (1 << JustMCFParser.T__9) | (1 << JustMCFParser.T__10) | (1 << JustMCFParser.T__11))) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (JustMCFParser.T__34 - 35)) | (1 << (JustMCFParser.T__52 - 35)) | (1 << (JustMCFParser.NUMBER_INT - 35)) | (1 << (JustMCFParser.NUMBER - 35)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.Pos1 - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					{
					this.state = 2596;
					this.execChild();
					this.state = 2597;
					this.pn_();
					}
					}
					this.state = 2603;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2604;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				{
				_localctx = new ExistExpressionIdContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2606;
				this.dataIdentifier();
				}
				break;

			case 3:
				{
				_localctx = new ExisitExpressionFuncRunContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2607;
				this.funcImproveRunExpression();
				}
				break;

			case 4:
				{
				_localctx = new ExistExpressionTrueContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2608;
				this.match(JustMCFParser.TRUE);
				}
				break;

			case 5:
				{
				_localctx = new ExistExpressionFalseContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2609;
				this.match(JustMCFParser.FALSE);
				}
				break;

			case 6:
				{
				_localctx = new ExistExpressionNotContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2610;
				this.match(JustMCFParser.T__35);
				this.state = 2611;
				this.existExpression(6);
				}
				break;

			case 7:
				{
				_localctx = new ExistExpressionParenContext(_localctx);
				this._ctx = _localctx;
				_prevctx = _localctx;
				this.state = 2612;
				this.match(JustMCFParser.T__6);
				this.state = 2613;
				this.s_();
				this.state = 2614;
				this.existExpression(0);
				this.state = 2615;
				this.s_();
				this.state = 2616;
				this.match(JustMCFParser.T__7);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 2646;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 329, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 2644;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 328, this._ctx) ) {
					case 1:
						{
						_localctx = new ExistExpressionBitAndContext(new ExistExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, JustMCFParser.RULE_existExpression);
						this.state = 2620;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 2621;
						this.s_();
						this.state = 2622;
						(_localctx as ExistExpressionBitAndContext)._op = this.match(JustMCFParser.T__36);
						this.state = 2623;
						this.s_();
						this.state = 2624;
						this.existExpression(6);
						}
						break;

					case 2:
						{
						_localctx = new ExistExpressionBitOrContext(new ExistExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, JustMCFParser.RULE_existExpression);
						this.state = 2626;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 2627;
						this.s_();
						this.state = 2628;
						(_localctx as ExistExpressionBitOrContext)._op = this.match(JustMCFParser.T__37);
						this.state = 2629;
						this.s_();
						this.state = 2630;
						this.existExpression(5);
						}
						break;

					case 3:
						{
						_localctx = new ExistExpressionAndContext(new ExistExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, JustMCFParser.RULE_existExpression);
						this.state = 2632;
						if (!(this.precpred(this._ctx, 3))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 3)");
						}
						this.state = 2633;
						this.s_();
						this.state = 2634;
						(_localctx as ExistExpressionAndContext)._op = this.match(JustMCFParser.T__38);
						this.state = 2635;
						this.s_();
						this.state = 2636;
						this.existExpression(4);
						}
						break;

					case 4:
						{
						_localctx = new ExistExpressionOrContext(new ExistExpressionContext(_parentctx, _parentState));
						this.pushNewRecursionContext(_localctx, _startState, JustMCFParser.RULE_existExpression);
						this.state = 2638;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 2639;
						this.s_();
						this.state = 2640;
						(_localctx as ExistExpressionOrContext)._op = this.match(JustMCFParser.T__39);
						this.state = 2641;
						this.s_();
						this.state = 2642;
						this.existExpression(3);
						}
						break;
					}
					}
				}
				this.state = 2648;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 329, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifStatement(): IfStatementContext {
		let _localctx: IfStatementContext = new IfStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, JustMCFParser.RULE_ifStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2649;
			this.match(JustMCFParser.IF);
			this.state = 2650;
			this.s_();
			this.state = 2651;
			this.existExpression(0);
			this.state = 2652;
			this.s_();
			this.state = 2653;
			this.execRunChild();
			this.state = 2657;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 330, this._ctx) ) {
			case 1:
				{
				this.state = 2654;
				this.s_();
				this.state = 2655;
				this.ifElseStatement();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ifElseStatement(): IfElseStatementContext {
		let _localctx: IfElseStatementContext = new IfElseStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, JustMCFParser.RULE_ifElseStatement);
		try {
			this.state = 2667;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 331, this._ctx) ) {
			case 1:
				_localctx = new IfElseExecContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2659;
				this.match(JustMCFParser.ELSE);
				this.state = 2660;
				this.s_();
				this.state = 2661;
				this.execRunChild();
				}
				break;

			case 2:
				_localctx = new IfElseSIfSContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2663;
				this.match(JustMCFParser.ELSE);
				this.state = 2664;
				this.s_();
				this.state = 2665;
				this.ifStatement();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whileStatement(): WhileStatementContext {
		let _localctx: WhileStatementContext = new WhileStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, JustMCFParser.RULE_whileStatement);
		let _la: number;
		try {
			this.state = 2691;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 333, this._ctx) ) {
			case 1:
				_localctx = new WhileStatementExecContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2669;
				this.match(JustMCFParser.WHILE);
				this.state = 2670;
				this.s_();
				this.state = 2671;
				this.match(JustMCFParser.T__3);
				this.state = 2672;
				this.s_();
				this.state = 2678;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << JustMCFParser.T__3) | (1 << JustMCFParser.T__9) | (1 << JustMCFParser.T__10) | (1 << JustMCFParser.T__11))) !== 0) || ((((_la - 35)) & ~0x1F) === 0 && ((1 << (_la - 35)) & ((1 << (JustMCFParser.T__34 - 35)) | (1 << (JustMCFParser.T__52 - 35)) | (1 << (JustMCFParser.NUMBER_INT - 35)) | (1 << (JustMCFParser.NUMBER - 35)))) !== 0) || ((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.Pos1 - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)) | (1 << (JustMCFParser.AcceptableName - 201)) | (1 << (JustMCFParser.NBTName - 201)))) !== 0)) {
					{
					{
					this.state = 2673;
					this.execChild();
					this.state = 2674;
					this.pn_();
					}
					}
					this.state = 2680;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2681;
				this.match(JustMCFParser.T__4);
				this.state = 2682;
				this.s_();
				this.state = 2683;
				this.execRunChild();
				}
				break;

			case 2:
				_localctx = new WhileStatementExistContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2685;
				this.match(JustMCFParser.WHILE);
				this.state = 2686;
				this.s_();
				this.state = 2687;
				this.existExpression(0);
				this.state = 2688;
				this.s_();
				this.state = 2689;
				this.execRunChild();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public forStatement(): ForStatementContext {
		let _localctx: ForStatementContext = new ForStatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, JustMCFParser.RULE_forStatement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2693;
			this.match(JustMCFParser.FOR);
			this.state = 2694;
			this.s_();
			this.state = 2695;
			this.match(JustMCFParser.T__3);
			this.state = 2696;
			this.s_();
			this.state = 2697;
			this.dataOperationExpression();
			this.state = 2698;
			this.s_();
			this.state = 2699;
			this.match(JustMCFParser.T__4);
			this.state = 2700;
			this.s_();
			this.state = 2701;
			this.execRunChild();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nbt(): NbtContext {
		let _localctx: NbtContext = new NbtContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, JustMCFParser.RULE_nbt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2703;
			this.snbtValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public json(): JsonContext {
		let _localctx: JsonContext = new JsonContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, JustMCFParser.RULE_json);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2705;
			this.jsonTextValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nbtPathWithoutCompound(): NbtPathWithoutCompoundContext {
		let _localctx: NbtPathWithoutCompoundContext = new NbtPathWithoutCompoundContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, JustMCFParser.RULE_nbtPathWithoutCompound);
		try {
			let _alt: number;
			this.state = 2736;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 337, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2707;
				this.nbtName(0);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2708;
				this.nbtName(0);
				this.state = 2709;
				this.nbtCompound();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2711;
				this.nbtName(0);
				this.state = 2721;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 2719;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case JustMCFParser.T__1:
							{
							this.state = 2712;
							this.match(JustMCFParser.T__1);
							this.state = 2713;
							this.s_();
							this.state = 2714;
							this.match(JustMCFParser.NUMBER_INT);
							this.state = 2715;
							this.s_();
							this.state = 2716;
							this.match(JustMCFParser.T__2);
							}
							break;
						case JustMCFParser.T__40:
							{
							this.state = 2718;
							this.match(JustMCFParser.T__40);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}
					this.state = 2723;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 335, this._ctx);
				}
				this.state = 2730;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 336, this._ctx) ) {
				case 1:
					{
					this.state = 2724;
					this.match(JustMCFParser.T__1);
					this.state = 2725;
					this.s_();
					this.state = 2726;
					this.nbtCompound();
					this.state = 2727;
					this.s_();
					this.state = 2728;
					this.match(JustMCFParser.T__2);
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2732;
				this.nbtPath(0);
				this.state = 2733;
				this.match(JustMCFParser.T__31);
				this.state = 2734;
				this.nbtPath(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public nbtPath(): NbtPathContext;
	public nbtPath(_p: number): NbtPathContext;
	// @RuleVersion(0)
	public nbtPath(_p?: number): NbtPathContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: NbtPathContext = new NbtPathContext(this._ctx, _parentState);
		let _prevctx: NbtPathContext = _localctx;
		let _startState: number = 182;
		this.enterRecursionRule(_localctx, 182, JustMCFParser.RULE_nbtPath, _p);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2765;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 341, this._ctx) ) {
			case 1:
				{
				this.state = 2739;
				this.nbtName(0);
				}
				break;

			case 2:
				{
				this.state = 2740;
				this.nbtCompound();
				}
				break;

			case 3:
				{
				this.state = 2741;
				this.nbtName(0);
				this.state = 2742;
				this.nbtCompound();
				}
				break;

			case 4:
				{
				this.state = 2744;
				this.nbtName(0);
				this.state = 2754;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						this.state = 2752;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case JustMCFParser.T__1:
							{
							this.state = 2745;
							this.match(JustMCFParser.T__1);
							this.state = 2746;
							this.s_();
							this.state = 2747;
							this.match(JustMCFParser.NUMBER_INT);
							this.state = 2748;
							this.s_();
							this.state = 2749;
							this.match(JustMCFParser.T__2);
							}
							break;
						case JustMCFParser.T__40:
							{
							this.state = 2751;
							this.match(JustMCFParser.T__40);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}
					this.state = 2756;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 339, this._ctx);
				}
				this.state = 2763;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 340, this._ctx) ) {
				case 1:
					{
					this.state = 2757;
					this.match(JustMCFParser.T__1);
					this.state = 2758;
					this.s_();
					this.state = 2759;
					this.nbtCompound();
					this.state = 2760;
					this.s_();
					this.state = 2761;
					this.match(JustMCFParser.T__2);
					}
					break;
				}
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 2772;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new NbtPathContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, JustMCFParser.RULE_nbtPath);
					this.state = 2767;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 2768;
					this.match(JustMCFParser.T__31);
					this.state = 2769;
					this.nbtPath(2);
					}
					}
				}
				this.state = 2774;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 342, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public snbtValue(): SnbtValueContext {
		let _localctx: SnbtValueContext = new SnbtValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, JustMCFParser.RULE_snbtValue);
		let _la: number;
		try {
			this.state = 2861;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 348, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2775;
				this.match(JustMCFParser.T__41);
				this.state = 2776;
				this.s_();
				this.state = 2777;
				this.nbtPair();
				this.state = 2784;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 2778;
					this.match(JustMCFParser.T__33);
					this.state = 2779;
					this.s_();
					this.state = 2780;
					this.nbtPair();
					}
					}
					this.state = 2786;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2787;
				this.s_();
				this.state = 2788;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2790;
				this.match(JustMCFParser.T__41);
				this.state = 2791;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2792;
				this.match(JustMCFParser.T__42);
				this.state = 2793;
				this.s_();
				this.state = 2794;
				this.nbtValue();
				this.state = 2801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 2795;
					this.match(JustMCFParser.T__33);
					this.state = 2796;
					this.s_();
					this.state = 2797;
					this.nbtValue();
					}
					}
					this.state = 2803;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2804;
				this.s_();
				this.state = 2805;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2807;
				this.match(JustMCFParser.T__42);
				this.state = 2808;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2809;
				this.match(JustMCFParser.T__43);
				this.state = 2810;
				this.s_();
				this.state = 2811;
				this.match(JustMCFParser.ByteNumber);
				this.state = 2818;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 2812;
					this.match(JustMCFParser.T__33);
					this.state = 2813;
					this.s_();
					this.state = 2814;
					this.match(JustMCFParser.ByteNumber);
					}
					}
					this.state = 2820;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2821;
				this.s_();
				this.state = 2822;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2824;
				this.match(JustMCFParser.T__44);
				this.state = 2825;
				this.s_();
				this.state = 2826;
				this.match(JustMCFParser.NUMBER_INT);
				this.state = 2833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 2827;
					this.match(JustMCFParser.T__33);
					this.state = 2828;
					this.s_();
					this.state = 2829;
					this.match(JustMCFParser.NUMBER_INT);
					}
					}
					this.state = 2835;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2836;
				this.s_();
				this.state = 2837;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2839;
				this.match(JustMCFParser.T__45);
				this.state = 2840;
				this.s_();
				this.state = 2841;
				this.match(JustMCFParser.LongNumber);
				this.state = 2848;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 2842;
					this.match(JustMCFParser.T__33);
					this.state = 2843;
					this.s_();
					this.state = 2844;
					this.match(JustMCFParser.LongNumber);
					}
					}
					this.state = 2850;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2851;
				this.s_();
				this.state = 2852;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2854;
				this.nbtString();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2855;
				this.match(JustMCFParser.ByteNumber);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2856;
				this.match(JustMCFParser.ShortNumber);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2857;
				this.match(JustMCFParser.LongNumber);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2858;
				this.number();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2859;
				this.match(JustMCFParser.FloatNumber);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2860;
				this.match(JustMCFParser.DoubleNumber);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public snbt(): SnbtContext {
		let _localctx: SnbtContext = new SnbtContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, JustMCFParser.RULE_snbt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2863;
			this.nbtValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nbtCompound(): NbtCompoundContext {
		let _localctx: NbtCompoundContext = new NbtCompoundContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, JustMCFParser.RULE_nbtCompound);
		let _la: number;
		try {
			this.state = 2882;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 350, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2865;
				this.match(JustMCFParser.T__3);
				this.state = 2866;
				this.s_();
				this.state = 2867;
				this.nbtPair();
				this.state = 2874;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 2868;
					this.match(JustMCFParser.T__33);
					this.state = 2869;
					this.s_();
					this.state = 2870;
					this.nbtPair();
					}
					}
					this.state = 2876;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2877;
				this.s_();
				this.state = 2878;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2880;
				this.match(JustMCFParser.T__3);
				this.state = 2881;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nbtPair(): NbtPairContext {
		let _localctx: NbtPairContext = new NbtPairContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, JustMCFParser.RULE_nbtPair);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2884;
			this.nbtName(0);
			this.state = 2885;
			this.s_();
			this.state = 2886;
			this.match(JustMCFParser.T__30);
			this.state = 2887;
			this.s_();
			this.state = 2888;
			this.nbtValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nbtList(): NbtListContext {
		let _localctx: NbtListContext = new NbtListContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, JustMCFParser.RULE_nbtList);
		let _la: number;
		try {
			this.state = 2908;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 352, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2890;
				this.match(JustMCFParser.T__1);
				this.state = 2891;
				this.s_();
				this.state = 2892;
				this.nbtValue();
				this.state = 2899;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 2893;
					this.match(JustMCFParser.T__33);
					this.state = 2894;
					this.s_();
					this.state = 2895;
					this.nbtValue();
					}
					}
					this.state = 2901;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2902;
				this.s_();
				this.state = 2903;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2905;
				this.match(JustMCFParser.T__1);
				this.state = 2906;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2907;
				this.match(JustMCFParser.T__40);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nbtValue(): NbtValueContext {
		let _localctx: NbtValueContext = new NbtValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, JustMCFParser.RULE_nbtValue);
		try {
			this.state = 2922;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.T__3:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2910;
				this.nbtCompound();
				}
				break;
			case JustMCFParser.T__1:
			case JustMCFParser.T__40:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2911;
				this.nbtList();
				}
				break;
			case JustMCFParser.T__46:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2912;
				this.nbtByteArr();
				}
				break;
			case JustMCFParser.T__47:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2913;
				this.nbtIntArr();
				}
				break;
			case JustMCFParser.T__48:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2914;
				this.nbtLongArr();
				}
				break;
			case JustMCFParser.STRING2:
			case JustMCFParser.STRING:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2915;
				this.nbtString();
				}
				break;
			case JustMCFParser.ByteNumber:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2916;
				this.match(JustMCFParser.ByteNumber);
				}
				break;
			case JustMCFParser.ShortNumber:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2917;
				this.match(JustMCFParser.ShortNumber);
				}
				break;
			case JustMCFParser.LongNumber:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2918;
				this.match(JustMCFParser.LongNumber);
				}
				break;
			case JustMCFParser.NUMBER_INT:
			case JustMCFParser.NUMBER:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2919;
				this.number();
				}
				break;
			case JustMCFParser.FloatNumber:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2920;
				this.match(JustMCFParser.FloatNumber);
				}
				break;
			case JustMCFParser.DoubleNumber:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2921;
				this.match(JustMCFParser.DoubleNumber);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nbtByteArr(): NbtByteArrContext {
		let _localctx: NbtByteArrContext = new NbtByteArrContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, JustMCFParser.RULE_nbtByteArr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2924;
			this.match(JustMCFParser.T__46);
			this.state = 2925;
			this.s_();
			this.state = 2926;
			this.match(JustMCFParser.ByteNumber);
			this.state = 2933;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === JustMCFParser.T__33) {
				{
				{
				this.state = 2927;
				this.match(JustMCFParser.T__33);
				this.state = 2928;
				this.s_();
				this.state = 2929;
				this.match(JustMCFParser.ByteNumber);
				}
				}
				this.state = 2935;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2936;
			this.s_();
			this.state = 2937;
			this.match(JustMCFParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nbtIntArr(): NbtIntArrContext {
		let _localctx: NbtIntArrContext = new NbtIntArrContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, JustMCFParser.RULE_nbtIntArr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2939;
			this.match(JustMCFParser.T__47);
			this.state = 2940;
			this.s_();
			this.state = 2941;
			this.match(JustMCFParser.NUMBER_INT);
			this.state = 2948;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === JustMCFParser.T__33) {
				{
				{
				this.state = 2942;
				this.match(JustMCFParser.T__33);
				this.state = 2943;
				this.s_();
				this.state = 2944;
				this.match(JustMCFParser.NUMBER_INT);
				}
				}
				this.state = 2950;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2951;
			this.s_();
			this.state = 2952;
			this.match(JustMCFParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nbtLongArr(): NbtLongArrContext {
		let _localctx: NbtLongArrContext = new NbtLongArrContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, JustMCFParser.RULE_nbtLongArr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2954;
			this.match(JustMCFParser.T__48);
			this.state = 2955;
			this.s_();
			this.state = 2956;
			this.match(JustMCFParser.LongNumber);
			this.state = 2963;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === JustMCFParser.T__33) {
				{
				{
				this.state = 2957;
				this.match(JustMCFParser.T__33);
				this.state = 2958;
				this.s_();
				this.state = 2959;
				this.match(JustMCFParser.LongNumber);
				}
				}
				this.state = 2965;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2966;
			this.s_();
			this.state = 2967;
			this.match(JustMCFParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nbtString(): NbtStringContext {
		let _localctx: NbtStringContext = new NbtStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, JustMCFParser.RULE_nbtString);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2969;
			_la = this._input.LA(1);
			if (!(_la === JustMCFParser.STRING2 || _la === JustMCFParser.STRING)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonTextValue(): JsonTextValueContext {
		let _localctx: JsonTextValueContext = new JsonTextValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, JustMCFParser.RULE_jsonTextValue);
		let _la: number;
		try {
			this.state = 3010;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 359, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2971;
				this.match(JustMCFParser.T__49);
				this.state = 2972;
				this.s_();
				this.state = 2973;
				this.jsonPair();
				this.state = 2980;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 2974;
					this.match(JustMCFParser.T__33);
					this.state = 2975;
					this.s_();
					this.state = 2976;
					this.jsonPair();
					}
					}
					this.state = 2982;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2983;
				this.s_();
				this.state = 2984;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2986;
				this.match(JustMCFParser.T__49);
				this.state = 2987;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2988;
				this.match(JustMCFParser.T__50);
				this.state = 2989;
				this.s_();
				this.state = 2990;
				this.jsonValue();
				this.state = 2997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 2991;
					this.match(JustMCFParser.T__33);
					this.state = 2992;
					this.s_();
					this.state = 2993;
					this.jsonValue();
					}
					}
					this.state = 2999;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3000;
				this.s_();
				this.state = 3001;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3003;
				this.match(JustMCFParser.T__50);
				this.state = 3004;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3005;
				this.match(JustMCFParser.STRING);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3006;
				this.number();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3007;
				this.match(JustMCFParser.TRUE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3008;
				this.match(JustMCFParser.FALSE);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3009;
				this.match(JustMCFParser.NULL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonText(): JsonTextContext {
		let _localctx: JsonTextContext = new JsonTextContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, JustMCFParser.RULE_jsonText);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3012;
			this.jsonValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonObj(): JsonObjContext {
		let _localctx: JsonObjContext = new JsonObjContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, JustMCFParser.RULE_jsonObj);
		let _la: number;
		try {
			this.state = 3031;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 361, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3014;
				this.match(JustMCFParser.T__3);
				this.state = 3015;
				this.s_();
				this.state = 3016;
				this.jsonPair();
				this.state = 3023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 3017;
					this.match(JustMCFParser.T__33);
					this.state = 3018;
					this.s_();
					this.state = 3019;
					this.jsonPair();
					}
					}
					this.state = 3025;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3026;
				this.s_();
				this.state = 3027;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3029;
				this.match(JustMCFParser.T__3);
				this.state = 3030;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonPair(): JsonPairContext {
		let _localctx: JsonPairContext = new JsonPairContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, JustMCFParser.RULE_jsonPair);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3033;
			this.match(JustMCFParser.STRING);
			this.state = 3034;
			this.s_();
			this.state = 3035;
			this.match(JustMCFParser.T__30);
			this.state = 3036;
			this.s_();
			this.state = 3037;
			this.jsonValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonArr(): JsonArrContext {
		let _localctx: JsonArrContext = new JsonArrContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, JustMCFParser.RULE_jsonArr);
		let _la: number;
		try {
			this.state = 3057;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 363, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3039;
				this.match(JustMCFParser.T__1);
				this.state = 3040;
				this.s_();
				this.state = 3041;
				this.jsonValue();
				this.state = 3048;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 3042;
					this.match(JustMCFParser.T__33);
					this.state = 3043;
					this.s_();
					this.state = 3044;
					this.jsonValue();
					}
					}
					this.state = 3050;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3051;
				this.s_();
				this.state = 3052;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3054;
				this.match(JustMCFParser.T__1);
				this.state = 3055;
				this.match(JustMCFParser.T__2);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3056;
				this.match(JustMCFParser.T__40);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public jsonValue(): JsonValueContext {
		let _localctx: JsonValueContext = new JsonValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, JustMCFParser.RULE_jsonValue);
		try {
			this.state = 3066;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.STRING:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3059;
				this.match(JustMCFParser.STRING);
				}
				break;
			case JustMCFParser.NUMBER_INT:
			case JustMCFParser.NUMBER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3060;
				this.number();
				}
				break;
			case JustMCFParser.T__3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3061;
				this.jsonObj();
				}
				break;
			case JustMCFParser.T__1:
			case JustMCFParser.T__40:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3062;
				this.jsonArr();
				}
				break;
			case JustMCFParser.TRUE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3063;
				this.match(JustMCFParser.TRUE);
				}
				break;
			case JustMCFParser.FALSE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3064;
				this.match(JustMCFParser.FALSE);
				}
				break;
			case JustMCFParser.NULL:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3065;
				this.match(JustMCFParser.NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public boolValue(): BoolValueContext {
		let _localctx: BoolValueContext = new BoolValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, JustMCFParser.RULE_boolValue);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3068;
			_la = this._input.LA(1);
			if (!(_la === JustMCFParser.TRUE || _la === JustMCFParser.FALSE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public number(): NumberContext {
		let _localctx: NumberContext = new NumberContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, JustMCFParser.RULE_number);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3070;
			_la = this._input.LA(1);
			if (!(_la === JustMCFParser.NUMBER_INT || _la === JustMCFParser.NUMBER)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public end(): EndContext {
		let _localctx: EndContext = new EndContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, JustMCFParser.RULE_end);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3072;
			_la = this._input.LA(1);
			if (!(_la === JustMCFParser.T__51 || _la === JustMCFParser.NL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === JustMCFParser.NL) {
				{
				{
				this.state = 3073;
				this.match(JustMCFParser.NL);
				}
				}
				this.state = 3078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ends(): EndsContext {
		let _localctx: EndsContext = new EndsContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, JustMCFParser.RULE_ends);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3080;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3079;
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.T__51 || _la === JustMCFParser.NL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3082;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 366, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public p_(): P_Context {
		let _localctx: P_Context = new P_Context(this._ctx, this.state);
		this.enterRule(_localctx, 224, JustMCFParser.RULE_p_);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3084;
			_la = this._input.LA(1);
			if (!(_la === JustMCFParser.T__33 || _la === JustMCFParser.NL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3088;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === JustMCFParser.NL) {
				{
				{
				this.state = 3085;
				this.match(JustMCFParser.NL);
				}
				}
				this.state = 3090;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pn_(): Pn_Context {
		let _localctx: Pn_Context = new Pn_Context(this._ctx, this.state);
		this.enterRule(_localctx, 226, JustMCFParser.RULE_pn_);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3092;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.T__33) {
				{
				this.state = 3091;
				this.match(JustMCFParser.T__33);
				}
			}

			this.state = 3097;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === JustMCFParser.NL) {
				{
				{
				this.state = 3094;
				this.match(JustMCFParser.NL);
				}
				}
				this.state = 3099;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public s_(): S_Context {
		let _localctx: S_Context = new S_Context(this._ctx, this.state);
		this.enterRule(_localctx, 228, JustMCFParser.RULE_s_);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3103;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3100;
					this.match(JustMCFParser.NL);
					}
					}
				}
				this.state = 3105;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 370, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key(): KeyContext {
		let _localctx: KeyContext = new KeyContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, JustMCFParser.RULE_key);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3106;
			_la = this._input.LA(1);
			if (!(((((_la - 73)) & ~0x1F) === 0 && ((1 << (_la - 73)) & ((1 << (JustMCFParser.NAMSP - 73)) | (1 << (JustMCFParser.NAMESPACE - 73)) | (1 << (JustMCFParser.LOCAL - 73)) | (1 << (JustMCFParser.EXEC - 73)) | (1 << (JustMCFParser.RUN - 73)) | (1 << (JustMCFParser.STORE - 73)) | (1 << (JustMCFParser.ALIGN - 73)) | (1 << (JustMCFParser.ANCHORED - 73)) | (1 << (JustMCFParser.EYES - 73)) | (1 << (JustMCFParser.FEET - 73)) | (1 << (JustMCFParser.IN - 73)) | (1 << (JustMCFParser.AS - 73)) | (1 << (JustMCFParser.AT - 73)) | (1 << (JustMCFParser.FACING - 73)) | (1 << (JustMCFParser.POSITIONED - 73)) | (1 << (JustMCFParser.POS - 73)) | (1 << (JustMCFParser.ROTATED - 73)) | (1 << (JustMCFParser.ROT - 73)) | (1 << (JustMCFParser.IF - 73)) | (1 << (JustMCFParser.UNLESS - 73)) | (1 << (JustMCFParser.ALL - 73)) | (1 << (JustMCFParser.MASKED - 73)) | (1 << (JustMCFParser.BIOME - 73)) | (1 << (JustMCFParser.VALUE - 73)) | (1 << (JustMCFParser.MAX - 73)) | (1 << (JustMCFParser.ENTITY - 73)) | (1 << (JustMCFParser.SCORE - 73)) | (1 << (JustMCFParser.PREDICATE - 73)) | (1 << (JustMCFParser.BLOCK - 73)) | (1 << (JustMCFParser.BLOCKS - 73)) | (1 << (JustMCFParser.RESULT - 73)))) !== 0) || ((((_la - 105)) & ~0x1F) === 0 && ((1 << (_la - 105)) & ((1 << (JustMCFParser.SUCCESS - 105)) | (1 << (JustMCFParser.SCB - 105)) | (1 << (JustMCFParser.DISPLAYNAME - 105)) | (1 << (JustMCFParser.RENDERTYPE - 105)) | (1 << (JustMCFParser.DISPLAY - 105)) | (1 << (JustMCFParser.ENABLE - 105)) | (1 << (JustMCFParser.LIST - 105)) | (1 << (JustMCFParser.DATA - 105)) | (1 << (JustMCFParser.STORAGE - 105)) | (1 << (JustMCFParser.RESET - 105)) | (1 << (JustMCFParser.ADD - 105)) | (1 << (JustMCFParser.REMOVE - 105)) | (1 << (JustMCFParser.FUNC - 105)) | (1 << (JustMCFParser.TAGGED - 105)) | (1 << (JustMCFParser.DEFAULT - 105)) | (1 << (JustMCFParser.PLAYER - 105)) | (1 << (JustMCFParser.PLAYERS - 105)) | (1 << (JustMCFParser.BOSSBAR - 105)) | (1 << (JustMCFParser.VISIBLE - 105)) | (1 << (JustMCFParser.BLUE - 105)) | (1 << (JustMCFParser.GREEN - 105)) | (1 << (JustMCFParser.PINK - 105)) | (1 << (JustMCFParser.PURPLE - 105)) | (1 << (JustMCFParser.RED - 105)) | (1 << (JustMCFParser.WHITE - 105)) | (1 << (JustMCFParser.YELLOW - 105)) | (1 << (JustMCFParser.COLOR - 105)) | (1 << (JustMCFParser.NAME - 105)) | (1 << (JustMCFParser.STYLE - 105)) | (1 << (JustMCFParser.NOTCHED_6 - 105)))) !== 0) || ((((_la - 137)) & ~0x1F) === 0 && ((1 << (_la - 137)) & ((1 << (JustMCFParser.NOTCHED_10 - 137)) | (1 << (JustMCFParser.NOTCHED_12 - 137)) | (1 << (JustMCFParser.NOTCHED_20 - 137)) | (1 << (JustMCFParser.PROGRESS - 137)) | (1 << (JustMCFParser.SET - 137)) | (1 << (JustMCFParser.TITLE - 137)) | (1 << (JustMCFParser.SUBTITLE - 137)) | (1 << (JustMCFParser.ACTIONBAR - 137)) | (1 << (JustMCFParser.TIMES - 137)) | (1 << (JustMCFParser.TEXT - 137)) | (1 << (JustMCFParser.ITEM - 137)) | (1 << (JustMCFParser.LOOT - 137)) | (1 << (JustMCFParser.GIVE - 137)) | (1 << (JustMCFParser.CLEAR - 137)) | (1 << (JustMCFParser.FISH - 137)) | (1 << (JustMCFParser.KILL - 137)) | (1 << (JustMCFParser.MINE - 137)) | (1 << (JustMCFParser.MAINHAND - 137)) | (1 << (JustMCFParser.OFFHAND - 137)) | (1 << (JustMCFParser.EFFECT - 137)) | (1 << (JustMCFParser.TAG - 137)) | (1 << (JustMCFParser.TP - 137)) | (1 << (JustMCFParser.GET - 137)) | (1 << (JustMCFParser.ATTR - 137)) | (1 << (JustMCFParser.BASE - 137)) | (1 << (JustMCFParser.DESTROY - 137)) | (1 << (JustMCFParser.KEEP - 137)) | (1 << (JustMCFParser.REPLACE - 137)) | (1 << (JustMCFParser.HOLLOW - 137)) | (1 << (JustMCFParser.OUTLINE - 137)) | (1 << (JustMCFParser.FORCE - 137)) | (1 << (JustMCFParser.MOVE - 137)))) !== 0) || ((((_la - 169)) & ~0x1F) === 0 && ((1 << (_la - 169)) & ((1 << (JustMCFParser.NORMAL - 169)) | (1 << (JustMCFParser.FILTERED - 169)) | (1 << (JustMCFParser.INTERFACE - 169)) | (1 << (JustMCFParser.WHILE - 169)) | (1 << (JustMCFParser.FOR - 169)) | (1 << (JustMCFParser.YIELD - 169)) | (1 << (JustMCFParser.BREAK - 169)) | (1 << (JustMCFParser.CONTINUE - 169)) | (1 << (JustMCFParser.RETURN - 169)) | (1 << (JustMCFParser.REPLACED - 169)) | (1 << (JustMCFParser.DIM - 169)) | (1 << (JustMCFParser.DIMENSION - 169)) | (1 << (JustMCFParser.ITEM_MODIFIER - 169)) | (1 << (JustMCFParser.DPOS - 169)) | (1 << (JustMCFParser.X - 169)) | (1 << (JustMCFParser.Y - 169)) | (1 << (JustMCFParser.Z - 169)) | (1 << (JustMCFParser.DX - 169)) | (1 << (JustMCFParser.DY - 169)) | (1 << (JustMCFParser.DZ - 169)) | (1 << (JustMCFParser.X_ROTATION - 169)) | (1 << (JustMCFParser.Y_ROTATION - 169)) | (1 << (JustMCFParser.DISTANCE - 169)) | (1 << (JustMCFParser.NBT - 169)) | (1 << (JustMCFParser.SCORES - 169)) | (1 << (JustMCFParser.TEAM - 169)) | (1 << (JustMCFParser.TYPE - 169)) | (1 << (JustMCFParser.LEVEL - 169)) | (1 << (JustMCFParser.GAMEMODE - 169)) | (1 << (JustMCFParser.SPECTATOR - 169)) | (1 << (JustMCFParser.SURVIVAL - 169)))) !== 0) || ((((_la - 201)) & ~0x1F) === 0 && ((1 << (_la - 201)) & ((1 << (JustMCFParser.CREATIVE - 201)) | (1 << (JustMCFParser.ADVENTURE - 201)) | (1 << (JustMCFParser.ADVANCEMENTS - 201)) | (1 << (JustMCFParser.ADVANCEMENT - 201)) | (1 << (JustMCFParser.ADVM - 201)) | (1 << (JustMCFParser.LIMIT - 201)) | (1 << (JustMCFParser.SORT - 201)) | (1 << (JustMCFParser.NEAREST - 201)) | (1 << (JustMCFParser.FURTHEST - 201)) | (1 << (JustMCFParser.RANDOM - 201)) | (1 << (JustMCFParser.ARBITRARY - 201)) | (1 << (JustMCFParser.SelectorKey - 201)) | (1 << (JustMCFParser.BYTE - 201)) | (1 << (JustMCFParser.SHORT - 201)) | (1 << (JustMCFParser.INT_ - 201)) | (1 << (JustMCFParser.LONG - 201)) | (1 << (JustMCFParser.FLOAT - 201)) | (1 << (JustMCFParser.DOUBLE - 201)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pos3Identifier(): Pos3IdentifierContext {
		let _localctx: Pos3IdentifierContext = new Pos3IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, JustMCFParser.RULE_pos3Identifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3108;
			this.pos1();
			this.state = 3109;
			this.pos1();
			this.state = 3110;
			this.pos1();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pos2Identifier(): Pos2IdentifierContext {
		let _localctx: Pos2IdentifierContext = new Pos2IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, JustMCFParser.RULE_pos2Identifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3112;
			this.pos1();
			this.state = 3113;
			this.pos1();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pos5Identifier(): Pos5IdentifierContext {
		let _localctx: Pos5IdentifierContext = new Pos5IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, JustMCFParser.RULE_pos5Identifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3115;
			this.pos1();
			this.state = 3116;
			this.pos1();
			this.state = 3117;
			this.pos1();
			this.state = 3118;
			this.pos1();
			this.state = 3119;
			this.pos1();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pos1(): Pos1Context {
		let _localctx: Pos1Context = new Pos1Context(this._ctx, this.state);
		this.enterRule(_localctx, 238, JustMCFParser.RULE_pos1);
		try {
			this.state = 3123;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.Pos1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3121;
				this.match(JustMCFParser.Pos1);
				}
				break;
			case JustMCFParser.NUMBER_INT:
			case JustMCFParser.NUMBER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3122;
				this.number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockIdentifier(): BlockIdentifierContext {
		let _localctx: BlockIdentifierContext = new BlockIdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, JustMCFParser.RULE_blockIdentifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3125;
			this.nameSpaceBlock();
			this.state = 3127;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === JustMCFParser.T__1) {
				{
				this.state = 3126;
				this.blockstate();
				}
			}

			this.state = 3130;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 373, this._ctx) ) {
			case 1:
				{
				this.state = 3129;
				this.nbt();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockstate(): BlockstateContext {
		let _localctx: BlockstateContext = new BlockstateContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, JustMCFParser.RULE_blockstate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3132;
			this.match(JustMCFParser.T__1);
			this.state = 3133;
			this.s_();
			this.state = 3134;
			this.blockstateParam();
			this.state = 3138;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 374, this._ctx) ) {
			case 1:
				{
				this.state = 3135;
				this.p_();
				this.state = 3136;
				this.blockstateParam();
				}
				break;
			}
			this.state = 3140;
			this.s_();
			this.state = 3141;
			this.match(JustMCFParser.T__2);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockstateValue(): BlockstateValueContext {
		let _localctx: BlockstateValueContext = new BlockstateValueContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, JustMCFParser.RULE_blockstateValue);
		try {
			this.state = 3146;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.TRUE:
			case JustMCFParser.FALSE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3143;
				this.boolValue();
				}
				break;
			case JustMCFParser.NUMBER_INT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3144;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3145;
				this.acceptableName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public blockstateParam(): BlockstateParamContext {
		let _localctx: BlockstateParamContext = new BlockstateParamContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, JustMCFParser.RULE_blockstateParam);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3148;
			this.acceptableName();
			this.state = 3149;
			this.match(JustMCFParser.T__5);
			this.state = 3150;
			this.blockstateValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpace(): NameSpaceContext {
		let _localctx: NameSpaceContext = new NameSpaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, JustMCFParser.RULE_nameSpace);
		try {
			this.state = 3157;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 376, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3152;
				this.acceptableName();
				this.state = 3153;
				_localctx._op = this.match(JustMCFParser.T__30);
				this.state = 3154;
				this.resourceLocation();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3156;
				this.resourceLocation();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceBlock(): NameSpaceBlockContext {
		let _localctx: NameSpaceBlockContext = new NameSpaceBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, JustMCFParser.RULE_nameSpaceBlock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3159;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceFunc(): NameSpaceFuncContext {
		let _localctx: NameSpaceFuncContext = new NameSpaceFuncContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, JustMCFParser.RULE_nameSpaceFunc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3161;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceStorage(): NameSpaceStorageContext {
		let _localctx: NameSpaceStorageContext = new NameSpaceStorageContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, JustMCFParser.RULE_nameSpaceStorage);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3163;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceBossbar(): NameSpaceBossbarContext {
		let _localctx: NameSpaceBossbarContext = new NameSpaceBossbarContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, JustMCFParser.RULE_nameSpaceBossbar);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3165;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceBiome(): NameSpaceBiomeContext {
		let _localctx: NameSpaceBiomeContext = new NameSpaceBiomeContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, JustMCFParser.RULE_nameSpaceBiome);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3167;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceDim(): NameSpaceDimContext {
		let _localctx: NameSpaceDimContext = new NameSpaceDimContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, JustMCFParser.RULE_nameSpaceDim);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3169;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpacePredicate(): NameSpacePredicateContext {
		let _localctx: NameSpacePredicateContext = new NameSpacePredicateContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, JustMCFParser.RULE_nameSpacePredicate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3171;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceItem(): NameSpaceItemContext {
		let _localctx: NameSpaceItemContext = new NameSpaceItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, JustMCFParser.RULE_nameSpaceItem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3173;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceEntity(): NameSpaceEntityContext {
		let _localctx: NameSpaceEntityContext = new NameSpaceEntityContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, JustMCFParser.RULE_nameSpaceEntity);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3175;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceLoot(): NameSpaceLootContext {
		let _localctx: NameSpaceLootContext = new NameSpaceLootContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, JustMCFParser.RULE_nameSpaceLoot);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3177;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceItemModifier(): NameSpaceItemModifierContext {
		let _localctx: NameSpaceItemModifierContext = new NameSpaceItemModifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, JustMCFParser.RULE_nameSpaceItemModifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3179;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nameSpaceAdvancement(): NameSpaceAdvancementContext {
		let _localctx: NameSpaceAdvancementContext = new NameSpaceAdvancementContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, JustMCFParser.RULE_nameSpaceAdvancement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3181;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tagNameSpace(): TagNameSpaceContext {
		let _localctx: TagNameSpaceContext = new TagNameSpaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, JustMCFParser.RULE_tagNameSpace);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3183;
			this.match(JustMCFParser.T__34);
			this.state = 3184;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tagNameSpaceItem(): TagNameSpaceItemContext {
		let _localctx: TagNameSpaceItemContext = new TagNameSpaceItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, JustMCFParser.RULE_tagNameSpaceItem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3186;
			this.tagNameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tagNameSpaceBlock(): TagNameSpaceBlockContext {
		let _localctx: TagNameSpaceBlockContext = new TagNameSpaceBlockContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, JustMCFParser.RULE_tagNameSpaceBlock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3188;
			this.tagNameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tagNameSpaceFunc(): TagNameSpaceFuncContext {
		let _localctx: TagNameSpaceFuncContext = new TagNameSpaceFuncContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, JustMCFParser.RULE_tagNameSpaceFunc);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3190;
			this.tagNameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tagNameSpaceEntity(): TagNameSpaceEntityContext {
		let _localctx: TagNameSpaceEntityContext = new TagNameSpaceEntityContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, JustMCFParser.RULE_tagNameSpaceEntity);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3192;
			this.tagNameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public registerName(): RegisterNameContext {
		let _localctx: RegisterNameContext = new RegisterNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, JustMCFParser.RULE_registerName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3197;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 377, this._ctx) ) {
			case 1:
				{
				this.state = 3194;
				this.acceptableName();
				this.state = 3195;
				this.match(JustMCFParser.T__30);
				}
				break;
			}
			this.state = 3199;
			this.acceptableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public numberType(): NumberTypeContext {
		let _localctx: NumberTypeContext = new NumberTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, JustMCFParser.RULE_numberType);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3201;
			_la = this._input.LA(1);
			if (!(((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & ((1 << (JustMCFParser.BYTE - 214)) | (1 << (JustMCFParser.SHORT - 214)) | (1 << (JustMCFParser.INT_ - 214)) | (1 << (JustMCFParser.LONG - 214)) | (1 << (JustMCFParser.FLOAT - 214)) | (1 << (JustMCFParser.DOUBLE - 214)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public acceptableNameWithoutPointWithKey(): AcceptableNameWithoutPointWithKeyContext {
		let _localctx: AcceptableNameWithoutPointWithKeyContext = new AcceptableNameWithoutPointWithKeyContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, JustMCFParser.RULE_acceptableNameWithoutPointWithKey);
		try {
			this.state = 3206;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 378, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3203;
				this.match(JustMCFParser.AcceptableName);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3204;
				this.key();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3205;
				this.numberType();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public criterion(): CriterionContext {
		let _localctx: CriterionContext = new CriterionContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, JustMCFParser.RULE_criterion);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3208;
			this.nameSpace();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public nbtName(): NbtNameContext;
	public nbtName(_p: number): NbtNameContext;
	// @RuleVersion(0)
	public nbtName(_p?: number): NbtNameContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: NbtNameContext = new NbtNameContext(this._ctx, _parentState);
		let _prevctx: NbtNameContext = _localctx;
		let _startState: number = 292;
		this.enterRecursionRule(_localctx, 292, JustMCFParser.RULE_nbtName, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3213;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
				{
				this.state = 3211;
				this.acceptableNameWithoutPointWithKey();
				}
				break;
			case JustMCFParser.NBTName:
				{
				this.state = 3212;
				this.match(JustMCFParser.NBTName);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 3223;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					{
					_localctx = new NbtNameContext(_parentctx, _parentState);
					this.pushNewRecursionContext(_localctx, _startState, JustMCFParser.RULE_nbtName);
					this.state = 3215;
					if (!(this.precpred(this._ctx, 1))) {
						throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
					}
					this.state = 3216;
					_la = this._input.LA(1);
					if (!(_la === JustMCFParser.T__29 || _la === JustMCFParser.T__31)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 3219;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case JustMCFParser.NAMSP:
					case JustMCFParser.NAMESPACE:
					case JustMCFParser.LOCAL:
					case JustMCFParser.EXEC:
					case JustMCFParser.RUN:
					case JustMCFParser.STORE:
					case JustMCFParser.ALIGN:
					case JustMCFParser.ANCHORED:
					case JustMCFParser.EYES:
					case JustMCFParser.FEET:
					case JustMCFParser.IN:
					case JustMCFParser.AS:
					case JustMCFParser.AT:
					case JustMCFParser.FACING:
					case JustMCFParser.POSITIONED:
					case JustMCFParser.POS:
					case JustMCFParser.ROTATED:
					case JustMCFParser.ROT:
					case JustMCFParser.IF:
					case JustMCFParser.UNLESS:
					case JustMCFParser.ALL:
					case JustMCFParser.MASKED:
					case JustMCFParser.BIOME:
					case JustMCFParser.VALUE:
					case JustMCFParser.MAX:
					case JustMCFParser.ENTITY:
					case JustMCFParser.SCORE:
					case JustMCFParser.PREDICATE:
					case JustMCFParser.BLOCK:
					case JustMCFParser.BLOCKS:
					case JustMCFParser.RESULT:
					case JustMCFParser.SUCCESS:
					case JustMCFParser.SCB:
					case JustMCFParser.DISPLAYNAME:
					case JustMCFParser.RENDERTYPE:
					case JustMCFParser.DISPLAY:
					case JustMCFParser.ENABLE:
					case JustMCFParser.LIST:
					case JustMCFParser.DATA:
					case JustMCFParser.STORAGE:
					case JustMCFParser.RESET:
					case JustMCFParser.ADD:
					case JustMCFParser.REMOVE:
					case JustMCFParser.FUNC:
					case JustMCFParser.TAGGED:
					case JustMCFParser.DEFAULT:
					case JustMCFParser.PLAYER:
					case JustMCFParser.PLAYERS:
					case JustMCFParser.BOSSBAR:
					case JustMCFParser.VISIBLE:
					case JustMCFParser.BLUE:
					case JustMCFParser.GREEN:
					case JustMCFParser.PINK:
					case JustMCFParser.PURPLE:
					case JustMCFParser.RED:
					case JustMCFParser.WHITE:
					case JustMCFParser.YELLOW:
					case JustMCFParser.COLOR:
					case JustMCFParser.NAME:
					case JustMCFParser.STYLE:
					case JustMCFParser.NOTCHED_6:
					case JustMCFParser.NOTCHED_10:
					case JustMCFParser.NOTCHED_12:
					case JustMCFParser.NOTCHED_20:
					case JustMCFParser.PROGRESS:
					case JustMCFParser.SET:
					case JustMCFParser.TITLE:
					case JustMCFParser.SUBTITLE:
					case JustMCFParser.ACTIONBAR:
					case JustMCFParser.TIMES:
					case JustMCFParser.TEXT:
					case JustMCFParser.ITEM:
					case JustMCFParser.LOOT:
					case JustMCFParser.GIVE:
					case JustMCFParser.CLEAR:
					case JustMCFParser.FISH:
					case JustMCFParser.KILL:
					case JustMCFParser.MINE:
					case JustMCFParser.MAINHAND:
					case JustMCFParser.OFFHAND:
					case JustMCFParser.EFFECT:
					case JustMCFParser.TAG:
					case JustMCFParser.TP:
					case JustMCFParser.GET:
					case JustMCFParser.ATTR:
					case JustMCFParser.BASE:
					case JustMCFParser.DESTROY:
					case JustMCFParser.KEEP:
					case JustMCFParser.REPLACE:
					case JustMCFParser.HOLLOW:
					case JustMCFParser.OUTLINE:
					case JustMCFParser.FORCE:
					case JustMCFParser.MOVE:
					case JustMCFParser.NORMAL:
					case JustMCFParser.FILTERED:
					case JustMCFParser.INTERFACE:
					case JustMCFParser.WHILE:
					case JustMCFParser.FOR:
					case JustMCFParser.YIELD:
					case JustMCFParser.BREAK:
					case JustMCFParser.CONTINUE:
					case JustMCFParser.RETURN:
					case JustMCFParser.REPLACED:
					case JustMCFParser.DIM:
					case JustMCFParser.DIMENSION:
					case JustMCFParser.ITEM_MODIFIER:
					case JustMCFParser.DPOS:
					case JustMCFParser.X:
					case JustMCFParser.Y:
					case JustMCFParser.Z:
					case JustMCFParser.DX:
					case JustMCFParser.DY:
					case JustMCFParser.DZ:
					case JustMCFParser.X_ROTATION:
					case JustMCFParser.Y_ROTATION:
					case JustMCFParser.DISTANCE:
					case JustMCFParser.NBT:
					case JustMCFParser.SCORES:
					case JustMCFParser.TEAM:
					case JustMCFParser.TYPE:
					case JustMCFParser.LEVEL:
					case JustMCFParser.GAMEMODE:
					case JustMCFParser.SPECTATOR:
					case JustMCFParser.SURVIVAL:
					case JustMCFParser.CREATIVE:
					case JustMCFParser.ADVENTURE:
					case JustMCFParser.ADVANCEMENTS:
					case JustMCFParser.ADVANCEMENT:
					case JustMCFParser.ADVM:
					case JustMCFParser.LIMIT:
					case JustMCFParser.SORT:
					case JustMCFParser.NEAREST:
					case JustMCFParser.FURTHEST:
					case JustMCFParser.RANDOM:
					case JustMCFParser.ARBITRARY:
					case JustMCFParser.SelectorKey:
					case JustMCFParser.BYTE:
					case JustMCFParser.SHORT:
					case JustMCFParser.INT_:
					case JustMCFParser.LONG:
					case JustMCFParser.FLOAT:
					case JustMCFParser.DOUBLE:
					case JustMCFParser.AcceptableName:
						{
						this.state = 3217;
						this.acceptableNameWithoutPointWithKey();
						}
						break;
					case JustMCFParser.NUMBER_INT:
					case JustMCFParser.NUMBER:
						{
						this.state = 3218;
						this.number();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 3225;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 381, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public acceptableName(): AcceptableNameContext {
		let _localctx: AcceptableNameContext = new AcceptableNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, JustMCFParser.RULE_acceptableName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3226;
			this.nbtName(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public acceptableNameWithNumber(): AcceptableNameWithNumberContext {
		let _localctx: AcceptableNameWithNumberContext = new AcceptableNameWithNumberContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, JustMCFParser.RULE_acceptableNameWithNumber);
		try {
			this.state = 3230;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3228;
				this.acceptableName();
				}
				break;
			case JustMCFParser.NUMBER_INT:
			case JustMCFParser.NUMBER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3229;
				this.number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public resourceLocation(): ResourceLocationContext {
		let _localctx: ResourceLocationContext = new ResourceLocationContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, JustMCFParser.RULE_resourceLocation);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3232;
			this.acceptableName();
			this.state = 3237;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 3233;
					this.match(JustMCFParser.T__26);
					this.state = 3234;
					this.acceptableNameWithNumber();
					}
					}
				}
				this.state = 3239;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public typeName(): TypeNameContext {
		let _localctx: TypeNameContext = new TypeNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, JustMCFParser.RULE_typeName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3243;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 384, this._ctx) ) {
			case 1:
				{
				this.state = 3240;
				this.nbtName(0);
				this.state = 3241;
				this.match(JustMCFParser.T__30);
				}
				break;
			}
			this.state = 3245;
			this.nbtName(0);
			this.state = 3248;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 385, this._ctx) ) {
			case 1:
				{
				this.state = 3246;
				this.match(JustMCFParser.T__1);
				this.state = 3247;
				this.match(JustMCFParser.T__2);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public item_slot(): Item_slotContext {
		let _localctx: Item_slotContext = new Item_slotContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, JustMCFParser.RULE_item_slot);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3250;
			this.acceptableName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public string(): StringContext {
		let _localctx: StringContext = new StringContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, JustMCFParser.RULE_string);
		try {
			this.state = 3254;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3252;
				this.nbtName(0);
				}
				break;
			case JustMCFParser.STRING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3253;
				this.match(JustMCFParser.STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public item_predicate(): Item_predicateContext {
		let _localctx: Item_predicateContext = new Item_predicateContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, JustMCFParser.RULE_item_predicate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3258;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				{
				this.state = 3256;
				this.nameSpaceItem();
				}
				break;
			case JustMCFParser.T__34:
				{
				this.state = 3257;
				this.tagNameSpaceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3262;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 388, this._ctx) ) {
			case 1:
				{
				this.state = 3260;
				this.snbt();
				}
				break;

			case 2:
				{
				this.state = 3261;
				this.nbt();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public block_predicate(): Block_predicateContext {
		let _localctx: Block_predicateContext = new Block_predicateContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, JustMCFParser.RULE_block_predicate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3266;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				{
				this.state = 3264;
				this.nameSpaceBlock();
				}
				break;
			case JustMCFParser.T__34:
				{
				this.state = 3265;
				this.tagNameSpaceBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 3269;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 390, this._ctx) ) {
			case 1:
				{
				this.state = 3268;
				this.blockstate();
				}
				break;
			}
			this.state = 3273;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 391, this._ctx) ) {
			case 1:
				{
				this.state = 3271;
				this.snbt();
				}
				break;

			case 2:
				{
				this.state = 3272;
				this.nbt();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public intRange(): IntRangeContext {
		let _localctx: IntRangeContext = new IntRangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, JustMCFParser.RULE_intRange);
		try {
			this.state = 3283;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 393, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3275;
				this.match(JustMCFParser.NUMBER_INT);
				this.state = 3276;
				this.match(JustMCFParser.T__15);
				this.state = 3278;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 392, this._ctx) ) {
				case 1:
					{
					this.state = 3277;
					this.match(JustMCFParser.NUMBER_INT);
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3280;
				this.match(JustMCFParser.T__15);
				this.state = 3281;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3282;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public positiveNumberRange(): PositiveNumberRangeContext {
		let _localctx: PositiveNumberRangeContext = new PositiveNumberRangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, JustMCFParser.RULE_positiveNumberRange);
		try {
			this.state = 3293;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 395, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3285;
				this.number();
				this.state = 3286;
				this.match(JustMCFParser.T__15);
				this.state = 3288;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 394, this._ctx) ) {
				case 1:
					{
					this.state = 3287;
					this.number();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3290;
				this.match(JustMCFParser.T__15);
				this.state = 3291;
				this.number();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3292;
				this.number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public numberRange(): NumberRangeContext {
		let _localctx: NumberRangeContext = new NumberRangeContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, JustMCFParser.RULE_numberRange);
		try {
			this.state = 3303;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 397, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3295;
				this.number();
				this.state = 3296;
				this.match(JustMCFParser.T__15);
				this.state = 3298;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 396, this._ctx) ) {
				case 1:
					{
					this.state = 3297;
					this.number();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3300;
				this.match(JustMCFParser.T__15);
				this.state = 3301;
				this.number();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3302;
				this.number();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selector(): SelectorContext {
		let _localctx: SelectorContext = new SelectorContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, JustMCFParser.RULE_selector);
		try {
			this.state = 3310;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 398, this._ctx) ) {
			case 1:
				_localctx = new SelectorParamsContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3305;
				this.selectorWithParams();
				}
				break;

			case 2:
				_localctx = new SelectorNameContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3306;
				this.match(JustMCFParser.T__52);
				this.state = 3307;
				this.acceptableNameWithoutPointWithKey();
				}
				break;

			case 3:
				_localctx = new SelectorFakeNameContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3308;
				this.match(JustMCFParser.T__34);
				this.state = 3309;
				this.acceptableNameWithoutPointWithKey();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectorWithParams(): SelectorWithParamsContext {
		let _localctx: SelectorWithParamsContext = new SelectorWithParamsContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, JustMCFParser.RULE_selectorWithParams);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3312;
			this.match(JustMCFParser.T__52);
			this.state = 3313;
			this.match(JustMCFParser.SelectorKey);
			this.state = 3320;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 399, this._ctx) ) {
			case 1:
				{
				this.state = 3314;
				this.match(JustMCFParser.T__6);
				this.state = 3315;
				this.s_();
				this.state = 3316;
				this.selectorTypes();
				this.state = 3317;
				this.s_();
				this.state = 3318;
				this.match(JustMCFParser.T__7);
				}
				break;
			}
			this.state = 3336;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 401, this._ctx) ) {
			case 1:
				{
				this.state = 3322;
				this.match(JustMCFParser.T__1);
				this.state = 3323;
				this.s_();
				this.state = 3324;
				this.selectorParam();
				this.state = 3330;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3325;
						this.p_();
						this.state = 3326;
						this.selectorParam();
						}
						}
					}
					this.state = 3332;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 400, this._ctx);
				}
				this.state = 3333;
				this.s_();
				this.state = 3334;
				this.match(JustMCFParser.T__2);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectorParam(): SelectorParamContext {
		let _localctx: SelectorParamContext = new SelectorParamContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, JustMCFParser.RULE_selectorParam);
		let _la: number;
		try {
			let _alt: number;
			this.state = 3467;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 414, this._ctx) ) {
			case 1:
				_localctx = new SelectorParamPosContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3338;
				this.match(JustMCFParser.POS);
				this.state = 3339;
				this.match(JustMCFParser.T__5);
				this.state = 3340;
				this.pos3Identifier();
				}
				break;

			case 2:
				_localctx = new SelectorParamDPosContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3341;
				this.match(JustMCFParser.DPOS);
				this.state = 3342;
				this.match(JustMCFParser.T__5);
				this.state = 3343;
				this.pos3Identifier();
				}
				break;

			case 3:
				_localctx = new SelectorParamRotContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3344;
				this.match(JustMCFParser.ROT);
				this.state = 3345;
				this.match(JustMCFParser.T__5);
				this.state = 3346;
				this.pos2Identifier();
				}
				break;

			case 4:
				_localctx = new SelectorParamXYZContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3347;
				_la = this._input.LA(1);
				if (!(((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (JustMCFParser.X - 184)) | (1 << (JustMCFParser.Y - 184)) | (1 << (JustMCFParser.Z - 184)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3348;
				this.match(JustMCFParser.T__5);
				this.state = 3349;
				this.number();
				}
				break;

			case 5:
				_localctx = new SelectorParamDXYZContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3350;
				_la = this._input.LA(1);
				if (!(((((_la - 187)) & ~0x1F) === 0 && ((1 << (_la - 187)) & ((1 << (JustMCFParser.DX - 187)) | (1 << (JustMCFParser.DY - 187)) | (1 << (JustMCFParser.DZ - 187)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3351;
				this.match(JustMCFParser.T__5);
				this.state = 3352;
				this.number();
				}
				break;

			case 6:
				_localctx = new SelectorParamRotationContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3353;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.X_ROTATION || _la === JustMCFParser.Y_ROTATION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3354;
				this.match(JustMCFParser.T__5);
				this.state = 3355;
				this.numberRange();
				}
				break;

			case 7:
				_localctx = new SelectorParamDistanceContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3356;
				this.match(JustMCFParser.DISTANCE);
				this.state = 3357;
				this.match(JustMCFParser.T__5);
				this.state = 3358;
				this.positiveNumberRange();
				}
				break;

			case 8:
				_localctx = new SelectorParamNbtContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3359;
				this.match(JustMCFParser.NBT);
				this.state = 3360;
				this.match(JustMCFParser.T__5);
				this.state = 3363;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case JustMCFParser.T__3:
					{
					this.state = 3361;
					this.nbtCompound();
					}
					break;
				case JustMCFParser.T__41:
					{
					this.state = 3362;
					this.selectorNbtCompound();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 9:
				_localctx = new SelectorParamScoresContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3365;
				this.match(JustMCFParser.SCORES);
				this.state = 3366;
				this.match(JustMCFParser.T__5);
				this.state = 3367;
				this.match(JustMCFParser.T__3);
				this.state = 3368;
				this.s_();
				this.state = 3369;
				this.selectorScoresPart();
				this.state = 3375;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3370;
						this.p_();
						this.state = 3371;
						this.selectorScoresPart();
						}
						}
					}
					this.state = 3377;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 403, this._ctx);
				}
				this.state = 3378;
				this.s_();
				this.state = 3379;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 10:
				_localctx = new SelectorParamTagContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3381;
				this.match(JustMCFParser.TAG);
				this.state = 3382;
				this.match(JustMCFParser.T__5);
				this.state = 3384;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__35) {
					{
					this.state = 3383;
					(_localctx as SelectorParamTagContext)._not = this.match(JustMCFParser.T__35);
					}
				}

				this.state = 3386;
				this.nbtName(0);
				}
				break;

			case 11:
				_localctx = new SelectorParamTeamContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3387;
				this.match(JustMCFParser.TEAM);
				this.state = 3388;
				this.match(JustMCFParser.T__5);
				this.state = 3390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__35) {
					{
					this.state = 3389;
					(_localctx as SelectorParamTeamContext)._not = this.match(JustMCFParser.T__35);
					}
				}

				this.state = 3392;
				this.nbtName(0);
				}
				break;

			case 12:
				_localctx = new SelectorParamNameContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3393;
				this.match(JustMCFParser.NAME);
				this.state = 3394;
				this.match(JustMCFParser.T__5);
				this.state = 3396;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__35) {
					{
					this.state = 3395;
					(_localctx as SelectorParamNameContext)._not = this.match(JustMCFParser.T__35);
					}
				}

				this.state = 3398;
				this.nbtName(0);
				}
				break;

			case 13:
				_localctx = new SelectorParamTypeContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3399;
				this.match(JustMCFParser.TYPE);
				this.state = 3400;
				this.match(JustMCFParser.T__5);
				this.state = 3402;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__35) {
					{
					this.state = 3401;
					(_localctx as SelectorParamTypeContext)._not = this.match(JustMCFParser.T__35);
					}
				}

				this.state = 3404;
				this.selectorType();
				}
				break;

			case 14:
				_localctx = new SelectorParamLevelContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 3405;
				this.match(JustMCFParser.LEVEL);
				this.state = 3406;
				this.match(JustMCFParser.T__5);
				this.state = 3407;
				this.intRange();
				}
				break;

			case 15:
				_localctx = new SelectorParamPredicateContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 3408;
				this.match(JustMCFParser.PREDICATE);
				this.state = 3409;
				this.match(JustMCFParser.T__5);
				this.state = 3411;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__35) {
					{
					this.state = 3410;
					(_localctx as SelectorParamPredicateContext)._not = this.match(JustMCFParser.T__35);
					}
				}

				this.state = 3413;
				this.nameSpacePredicate();
				}
				break;

			case 16:
				_localctx = new SelectorParamGamemodeContext(_localctx);
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 3414;
				this.match(JustMCFParser.GAMEMODE);
				this.state = 3415;
				this.match(JustMCFParser.T__5);
				this.state = 3417;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__35) {
					{
					this.state = 3416;
					(_localctx as SelectorParamGamemodeContext)._not = this.match(JustMCFParser.T__35);
					}
				}

				this.state = 3419;
				_la = this._input.LA(1);
				if (!(((((_la - 199)) & ~0x1F) === 0 && ((1 << (_la - 199)) & ((1 << (JustMCFParser.SPECTATOR - 199)) | (1 << (JustMCFParser.SURVIVAL - 199)) | (1 << (JustMCFParser.CREATIVE - 199)) | (1 << (JustMCFParser.ADVENTURE - 199)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 17:
				_localctx = new SelectorParamAdvmContext(_localctx);
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 3420;
				_la = this._input.LA(1);
				if (!(_la === JustMCFParser.ADVANCEMENTS || _la === JustMCFParser.ADVM)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3421;
				this.match(JustMCFParser.T__5);
				this.state = 3422;
				this.match(JustMCFParser.T__3);
				this.state = 3423;
				this.s_();
				this.state = 3424;
				this.selectorAdvancementsPart();
				this.state = 3430;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3425;
						this.p_();
						this.state = 3426;
						this.selectorAdvancementsPart();
						}
						}
					}
					this.state = 3432;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 410, this._ctx);
				}
				this.state = 3433;
				this.s_();
				this.state = 3434;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 18:
				_localctx = new SelectorParamLimitContext(_localctx);
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 3436;
				this.match(JustMCFParser.LIMIT);
				this.state = 3437;
				this.match(JustMCFParser.T__5);
				{
				this.state = 3439;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__28) {
					{
					this.state = 3438;
					this.match(JustMCFParser.T__28);
					}
				}

				this.state = 3441;
				this.match(JustMCFParser.NUMBER_INT);
				}
				}
				break;

			case 19:
				_localctx = new SelectorParamLimitInfContext(_localctx);
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 3442;
				this.match(JustMCFParser.LIMIT);
				this.state = 3443;
				this.match(JustMCFParser.T__5);
				this.state = 3444;
				this.match(JustMCFParser.T__15);
				}
				break;

			case 20:
				_localctx = new SelectorParamSortContext(_localctx);
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 3445;
				this.match(JustMCFParser.SORT);
				this.state = 3446;
				this.match(JustMCFParser.T__5);
				this.state = 3447;
				_la = this._input.LA(1);
				if (!(((((_la - 208)) & ~0x1F) === 0 && ((1 << (_la - 208)) & ((1 << (JustMCFParser.NEAREST - 208)) | (1 << (JustMCFParser.FURTHEST - 208)) | (1 << (JustMCFParser.RANDOM - 208)) | (1 << (JustMCFParser.ARBITRARY - 208)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 21:
				_localctx = new SelectorParamLimitNumberContext(_localctx);
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 3449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === JustMCFParser.T__28) {
					{
					this.state = 3448;
					this.match(JustMCFParser.T__28);
					}
				}

				this.state = 3451;
				this.match(JustMCFParser.NUMBER_INT);
				}
				break;

			case 22:
				_localctx = new SelectorParamNbtCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 3452;
				this.selectorNbtCompound();
				}
				break;

			case 23:
				_localctx = new SelectorParamScoreCompoundContext(_localctx);
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 3453;
				this.match(JustMCFParser.T__3);
				this.state = 3454;
				this.s_();
				this.state = 3455;
				this.selectorScoresPartImprove();
				this.state = 3461;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3456;
						this.p_();
						this.state = 3457;
						this.selectorScoresPartImprove();
						}
						}
					}
					this.state = 3463;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 413, this._ctx);
				}
				this.state = 3464;
				this.s_();
				this.state = 3465;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectorType(): SelectorTypeContext {
		let _localctx: SelectorTypeContext = new SelectorTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, JustMCFParser.RULE_selectorType);
		try {
			this.state = 3471;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3469;
				this.nameSpaceEntity();
				}
				break;
			case JustMCFParser.T__34:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3470;
				this.tagNameSpaceEntity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectorTypes(): SelectorTypesContext {
		let _localctx: SelectorTypesContext = new SelectorTypesContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, JustMCFParser.RULE_selectorTypes);
		try {
			let _alt: number;
			this.state = 3485;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case JustMCFParser.T__34:
			case JustMCFParser.NAMSP:
			case JustMCFParser.NAMESPACE:
			case JustMCFParser.LOCAL:
			case JustMCFParser.EXEC:
			case JustMCFParser.RUN:
			case JustMCFParser.STORE:
			case JustMCFParser.ALIGN:
			case JustMCFParser.ANCHORED:
			case JustMCFParser.EYES:
			case JustMCFParser.FEET:
			case JustMCFParser.IN:
			case JustMCFParser.AS:
			case JustMCFParser.AT:
			case JustMCFParser.FACING:
			case JustMCFParser.POSITIONED:
			case JustMCFParser.POS:
			case JustMCFParser.ROTATED:
			case JustMCFParser.ROT:
			case JustMCFParser.IF:
			case JustMCFParser.UNLESS:
			case JustMCFParser.ALL:
			case JustMCFParser.MASKED:
			case JustMCFParser.BIOME:
			case JustMCFParser.VALUE:
			case JustMCFParser.MAX:
			case JustMCFParser.ENTITY:
			case JustMCFParser.SCORE:
			case JustMCFParser.PREDICATE:
			case JustMCFParser.BLOCK:
			case JustMCFParser.BLOCKS:
			case JustMCFParser.RESULT:
			case JustMCFParser.SUCCESS:
			case JustMCFParser.SCB:
			case JustMCFParser.DISPLAYNAME:
			case JustMCFParser.RENDERTYPE:
			case JustMCFParser.DISPLAY:
			case JustMCFParser.ENABLE:
			case JustMCFParser.LIST:
			case JustMCFParser.DATA:
			case JustMCFParser.STORAGE:
			case JustMCFParser.RESET:
			case JustMCFParser.ADD:
			case JustMCFParser.REMOVE:
			case JustMCFParser.FUNC:
			case JustMCFParser.TAGGED:
			case JustMCFParser.DEFAULT:
			case JustMCFParser.PLAYER:
			case JustMCFParser.PLAYERS:
			case JustMCFParser.BOSSBAR:
			case JustMCFParser.VISIBLE:
			case JustMCFParser.BLUE:
			case JustMCFParser.GREEN:
			case JustMCFParser.PINK:
			case JustMCFParser.PURPLE:
			case JustMCFParser.RED:
			case JustMCFParser.WHITE:
			case JustMCFParser.YELLOW:
			case JustMCFParser.COLOR:
			case JustMCFParser.NAME:
			case JustMCFParser.STYLE:
			case JustMCFParser.NOTCHED_6:
			case JustMCFParser.NOTCHED_10:
			case JustMCFParser.NOTCHED_12:
			case JustMCFParser.NOTCHED_20:
			case JustMCFParser.PROGRESS:
			case JustMCFParser.SET:
			case JustMCFParser.TITLE:
			case JustMCFParser.SUBTITLE:
			case JustMCFParser.ACTIONBAR:
			case JustMCFParser.TIMES:
			case JustMCFParser.TEXT:
			case JustMCFParser.ITEM:
			case JustMCFParser.LOOT:
			case JustMCFParser.GIVE:
			case JustMCFParser.CLEAR:
			case JustMCFParser.FISH:
			case JustMCFParser.KILL:
			case JustMCFParser.MINE:
			case JustMCFParser.MAINHAND:
			case JustMCFParser.OFFHAND:
			case JustMCFParser.EFFECT:
			case JustMCFParser.TAG:
			case JustMCFParser.TP:
			case JustMCFParser.GET:
			case JustMCFParser.ATTR:
			case JustMCFParser.BASE:
			case JustMCFParser.DESTROY:
			case JustMCFParser.KEEP:
			case JustMCFParser.REPLACE:
			case JustMCFParser.HOLLOW:
			case JustMCFParser.OUTLINE:
			case JustMCFParser.FORCE:
			case JustMCFParser.MOVE:
			case JustMCFParser.NORMAL:
			case JustMCFParser.FILTERED:
			case JustMCFParser.INTERFACE:
			case JustMCFParser.WHILE:
			case JustMCFParser.FOR:
			case JustMCFParser.YIELD:
			case JustMCFParser.BREAK:
			case JustMCFParser.CONTINUE:
			case JustMCFParser.RETURN:
			case JustMCFParser.REPLACED:
			case JustMCFParser.DIM:
			case JustMCFParser.DIMENSION:
			case JustMCFParser.ITEM_MODIFIER:
			case JustMCFParser.DPOS:
			case JustMCFParser.X:
			case JustMCFParser.Y:
			case JustMCFParser.Z:
			case JustMCFParser.DX:
			case JustMCFParser.DY:
			case JustMCFParser.DZ:
			case JustMCFParser.X_ROTATION:
			case JustMCFParser.Y_ROTATION:
			case JustMCFParser.DISTANCE:
			case JustMCFParser.NBT:
			case JustMCFParser.SCORES:
			case JustMCFParser.TEAM:
			case JustMCFParser.TYPE:
			case JustMCFParser.LEVEL:
			case JustMCFParser.GAMEMODE:
			case JustMCFParser.SPECTATOR:
			case JustMCFParser.SURVIVAL:
			case JustMCFParser.CREATIVE:
			case JustMCFParser.ADVENTURE:
			case JustMCFParser.ADVANCEMENTS:
			case JustMCFParser.ADVANCEMENT:
			case JustMCFParser.ADVM:
			case JustMCFParser.LIMIT:
			case JustMCFParser.SORT:
			case JustMCFParser.NEAREST:
			case JustMCFParser.FURTHEST:
			case JustMCFParser.RANDOM:
			case JustMCFParser.ARBITRARY:
			case JustMCFParser.SelectorKey:
			case JustMCFParser.BYTE:
			case JustMCFParser.SHORT:
			case JustMCFParser.INT_:
			case JustMCFParser.LONG:
			case JustMCFParser.FLOAT:
			case JustMCFParser.DOUBLE:
			case JustMCFParser.AcceptableName:
			case JustMCFParser.NBTName:
				_localctx = new SelectorTypeSingleContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3473;
				this.selectorType();
				}
				break;
			case JustMCFParser.T__35:
				_localctx = new SelectorTypeNotContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3474;
				this.match(JustMCFParser.T__35);
				this.state = 3475;
				this.selectorType();
				this.state = 3482;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3476;
						this.p_();
						this.state = 3477;
						this.match(JustMCFParser.T__35);
						this.state = 3478;
						this.selectorType();
						}
						}
					}
					this.state = 3484;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 416, this._ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectorNbtCompound(): SelectorNbtCompoundContext {
		let _localctx: SelectorNbtCompoundContext = new SelectorNbtCompoundContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, JustMCFParser.RULE_selectorNbtCompound);
		let _la: number;
		try {
			this.state = 3504;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 419, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3487;
				this.match(JustMCFParser.T__41);
				this.state = 3488;
				this.s_();
				this.state = 3489;
				this.nbtPair();
				this.state = 3496;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === JustMCFParser.T__33) {
					{
					{
					this.state = 3490;
					this.match(JustMCFParser.T__33);
					this.state = 3491;
					this.s_();
					this.state = 3492;
					this.nbtPair();
					}
					}
					this.state = 3498;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 3499;
				this.s_();
				this.state = 3500;
				this.match(JustMCFParser.T__4);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3502;
				this.match(JustMCFParser.T__41);
				this.state = 3503;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectorScoresPart(): SelectorScoresPartContext {
		let _localctx: SelectorScoresPartContext = new SelectorScoresPartContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, JustMCFParser.RULE_selectorScoresPart);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3506;
			this.nbtName(0);
			this.state = 3507;
			this.match(JustMCFParser.T__5);
			this.state = 3508;
			this.intRange();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectorScoresPartImprove(): SelectorScoresPartImproveContext {
		let _localctx: SelectorScoresPartImproveContext = new SelectorScoresPartImproveContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, JustMCFParser.RULE_selectorScoresPartImprove);
		try {
			this.state = 3516;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 420, this._ctx) ) {
			case 1:
				_localctx = new SelectorScoresPartCompareContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3510;
				this.nbtName(0);
				this.state = 3511;
				this.scbCompareNumber();
				}
				break;

			case 2:
				_localctx = new SelectorScoresPartRangeContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3513;
				this.nbtName(0);
				this.state = 3514;
				this.intRange();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectorAdvancementsPart(): SelectorAdvancementsPartContext {
		let _localctx: SelectorAdvancementsPartContext = new SelectorAdvancementsPartContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, JustMCFParser.RULE_selectorAdvancementsPart);
		try {
			let _alt: number;
			this.state = 3538;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 422, this._ctx) ) {
			case 1:
				_localctx = new SelectorAdvmPartDirectContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3518;
				this.nameSpaceAdvancement();
				this.state = 3519;
				this.match(JustMCFParser.T__5);
				this.state = 3520;
				this.boolValue();
				}
				break;

			case 2:
				_localctx = new SelectorAdvmPartCriteriaContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3522;
				this.nameSpaceAdvancement();
				this.state = 3523;
				this.match(JustMCFParser.T__5);
				this.state = 3524;
				this.match(JustMCFParser.T__3);
				this.state = 3525;
				this.s_();
				this.state = 3526;
				this.selectorAdvancementsCriteria();
				this.state = 3532;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
				while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
					if (_alt === 1) {
						{
						{
						this.state = 3527;
						this.p_();
						this.state = 3528;
						this.selectorAdvancementsCriteria();
						}
						}
					}
					this.state = 3534;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 421, this._ctx);
				}
				this.state = 3535;
				this.s_();
				this.state = 3536;
				this.match(JustMCFParser.T__4);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectorAdvancementsCriteria(): SelectorAdvancementsCriteriaContext {
		let _localctx: SelectorAdvancementsCriteriaContext = new SelectorAdvancementsCriteriaContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, JustMCFParser.RULE_selectorAdvancementsCriteria);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3540;
			this.acceptableName();
			this.state = 3541;
			this.match(JustMCFParser.T__5);
			this.state = 3542;
			this.boolValue();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 38:
			return this.scbSingleOperationExpression_sempred(_localctx as ScbSingleOperationExpressionContext, predIndex);

		case 83:
			return this.existExpression_sempred(_localctx as ExistExpressionContext, predIndex);

		case 91:
			return this.nbtPath_sempred(_localctx as NbtPathContext, predIndex);

		case 146:
			return this.nbtName_sempred(_localctx as NbtNameContext, predIndex);
		}
		return true;
	}
	private scbSingleOperationExpression_sempred(_localctx: ScbSingleOperationExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 6);

		case 1:
			return this.precpred(this._ctx, 5);

		case 2:
			return this.precpred(this._ctx, 4);
		}
		return true;
	}
	private existExpression_sempred(_localctx: ExistExpressionContext, predIndex: number): boolean {
		switch (predIndex) {
		case 3:
			return this.precpred(this._ctx, 5);

		case 4:
			return this.precpred(this._ctx, 4);

		case 5:
			return this.precpred(this._ctx, 3);

		case 6:
			return this.precpred(this._ctx, 2);
		}
		return true;
	}
	private nbtPath_sempred(_localctx: NbtPathContext, predIndex: number): boolean {
		switch (predIndex) {
		case 7:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}
	private nbtName_sempred(_localctx: NbtNameContext, predIndex: number): boolean {
		switch (predIndex) {
		case 8:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 7;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\xE0\u0DDB\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x07\x02\u0158\n\x02\f\x02\x0E" +
		"\x02\u015B\v\x02\x03\x02\x05\x02\u015E\n\x02\x05\x02\u0160\n\x02\x03\x03" +
		"\x03\x03\x05\x03\u0164\n\x03\x03\x04\x03\x04\x05\x04\u0168\n\x04\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x05\x05\u0186\n\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x06\x06\u0190\n\x06\r\x06\x0E\x06\u0191\x05\x06\u0194\n\x06" +
		"\x03\x07\x03\x07\x03\b\x03\b\x05\b\u019A\n\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x05\b\u01A1\n\b\x07\b\u01A3\n\b\f\b\x0E\b\u01A6\v\b\x03\b\x03\b\x03" +
		"\b\x05\b\u01AB\n\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x07\b\u01B3\n\b" +
		"\f\b\x0E\b\u01B6\v\b\x03\b\x05\b\u01B9\n\b\x05\b\u01BB\n\b\x03\b\x03\b" +
		"\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x05\t\u01E7\n\t\x03\n\x03\n\x03\n\x03\n\x05" +
		"\n\u01ED\n\n\x03\v\x03\v\x05\v\u01F1\n\v\x03\v\x03\v\x03\v\x03\v\x03\v" +
		"\x05\v\u01F8\n\v\x07\v\u01FA\n\v\f\v\x0E\v\u01FD\v\v\x03\v\x03\v\x03\v" +
		"\x05\v\u0202\n\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x07\v\u020A\n\v\f" +
		"\v\x0E\v\u020D\v\v\x03\v\x05\v\u0210\n\v\x05\v\u0212\n\v\x03\v\x03\v\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x05\f\u021D\n\f\x07\f\u021F\n\f" +
		"\f\f\x0E\f\u0222\v\f\x03\f\x03\f\x03\f\x05\f\u0227\n\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x07\f\u022E\n\f\f\f\x0E\f\u0231\v\f\x03\f\x03\f\x05\f\u0235" +
		"\n\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x07\f\u023D\n\f\f\f\x0E\f\u0240" +
		"\v\f\x03\f\x05\f\u0243\n\f\x05\f\u0245\n\f\x03\f\x03\f\x03\r\x03\r\x03" +
		"\r\x03\r\x05\r\u024D\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\u0253" +
		"\n\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x07\x0F\u025D\n\x0F\f\x0F\x0E\x0F\u0260\v\x0F\x03\x0F\x03\x0F\x05\x0F" +
		"\u0264\n\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F\u026C" +
		"\n\x0F\f\x0F\x0E\x0F\u026F\v\x0F\x03\x0F\x05\x0F\u0272\n\x0F\x05\x0F\u0274" +
		"\n\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x07\x10\u0281\n\x10\f\x10\x0E\x10\u0284\v\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u028B\n\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x07\x10\u0294\n\x10\f\x10" +
		"\x0E\x10\u0297\v\x10\x03\x10\x05\x10\u029A\n\x10\x05\x10\u029C\n\x10\x03" +
		"\x10\x03\x10\x03\x11\x05\x11\u02A1\n\x11\x03\x11\x03\x11\x03\x12\x03\x12" +
		"\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\u02AD\n\x13\x03" +
		"\x13\x05\x13\u02B0\n\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14" +
		"\u02B7\n\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\u02C5\n\x15\x03\x16\x03\x16" +
		"\x03\x16\x03\x16\x05\x16\u02CB\n\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x07\x18\u02D7\n\x18\f\x18" +
		"\x0E\x18\u02DA\v\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x05" +
		"\x1A\u02E2\n\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A" +
		"\u02EA\n\x1A\f\x1A\x0E\x1A\u02ED\v\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x07\x1A\u02F4\n\x1A\f\x1A\x0E\x1A\u02F7\v\x1A\x03\x1A\x03\x1A" +
		"\x05\x1A\u02FB\n\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x07\x1A\u0301\n\x1A" +
		"\f\x1A\x0E\x1A\u0304\v\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1A\x03\x1A\x06\x1A\u030D\n\x1A\r\x1A\x0E\x1A\u030E\x03\x1A\x03\x1A\x05" +
		"\x1A\u0313\n\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u0319\n\x1B\x03" +
		"\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u0321\n\x1B\x03\x1B" +
		"\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u0328\n\x1B\x03\x1B\x03\x1B\x03" +
		"\x1B\x05\x1B\u032D\n\x1B\x03\x1B\x03\x1B\x05\x1B\u0331\n\x1B\x03\x1B\x03" +
		"\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u0338\n\x1B\x03\x1B\x03\x1B\x03\x1B" +
		"\x05\x1B\u033D\n\x1B\x03\x1B\x03\x1B\x05\x1B\u0341\n\x1B\x03\x1B\x03\x1B" +
		"\x03\x1B\x03\x1B\x05\x1B\u0347\n\x1B\x03\x1B\x03\x1B\x05\x1B\u034B\n\x1B" +
		"\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u0352\n\x1B\x03\x1B\x03" +
		"\x1B\x05\x1B\u0356\n\x1B\x05\x1B\u0358\n\x1B\x03\x1C\x03\x1C\x03\x1C\x03" +
		"\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u0365" +
		"\n\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x07\x1C" +
		"\u036E\n\x1C\f\x1C\x0E\x1C\u0371\v\x1C\x03\x1C\x05\x1C\u0374\n\x1C\x05" +
		"\x1C\u0376\n\x1C\x03\x1C\x03\x1C\x05\x1C\u037A\n\x1C\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x05\x1D\u038A\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u0393\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x05\x1D\u039A\n\x1D\x03\x1D\x03\x1D\x05\x1D\u039E\n\x1D\x03" +
		"\x1D\x05\x1D\u03A1\n\x1D\x03\x1D\x03\x1D\x05\x1D\u03A5\n\x1D\x03\x1D\x05" +
		"\x1D\u03A8\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u03AF" +
		"\n\x1D\x03\x1D\x05\x1D\u03B2\n\x1D\x03\x1D\x03\x1D\x05\x1D\u03B6\n\x1D" +
		"\x03\x1D\x03\x1D\x05\x1D\u03BA\n\x1D\x03\x1D\x05\x1D\u03BD\n\x1D\x03\x1D" +
		"\x05\x1D\u03C0\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u03C6\n\x1D" +
		"\x03\x1D\x05\x1D\u03C9\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x05\x1D\u03D1\n\x1D\x03\x1D\x05\x1D\u03D4\n\x1D\x03\x1D\x03\x1D\x05" +
		"\x1D\u03D8\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u03DF" +
		"\n\x1D\x03\x1D\x05\x1D\u03E2\n\x1D\x03\x1D\x03\x1D\x05\x1D\u03E6\n\x1D" +
		"\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x03\x1F\x05\x1F\u03F2\n\x1F\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x05" +
		" \u03FC\n \x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x05!\u0406\n!\x03\"" +
		"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x05\"\u0410\n\"\x03#\x03#\x03" +
		"#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x05#\u041E\n#\x03$\x03" +
		"$\x05$\u0422\n$\x03$\x05$\u0425\n$\x03$\x03$\x03$\x03$\x03$\x03$\x03$" +
		"\x03$\x03$\x03$\x05$\u0431\n$\x03$\x03$\x03$\x03$\x03$\x05$\u0438\n$\x03" +
		"$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03" +
		"$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03" +
		"$\x03$\x03$\x03$\x03$\x05$\u045B\n$\x03%\x03%\x05%\u045F\n%\x03&\x03&" +
		"\x03&\x03&\x03&\x03&\x03&\x03&\x07&\u0469\n&\f&\x0E&\u046C\v&\x03&\x05" +
		"&\u046F\n&\x05&\u0471\n&\x03&\x03&\x03&\x03&\x03&\x03&\x05&\u0479\n&\x03" +
		"&\x03&\x03&\x03&\x07&\u047F\n&\f&\x0E&\u0482\v&\x03&\x03&\x05&\u0486\n" +
		"&\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x05\'\u04D0\n\'\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x05(\u04DB" +
		"\n(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03" +
		"(\x03(\x03(\x03(\x03(\x07(\u04EF\n(\f(\x0E(\u04F2\v(\x03)\x03)\x03)\x03" +
		")\x03)\x03)\x03)\x05)\u04FB\n)\x03*\x05*\u04FE\n*\x03*\x03*\x03+\x03+" +
		"\x03+\x03+\x03+\x03+\x03+\x03+\x07+\u050A\n+\f+\x0E+\u050D\v+\x03+\x05" +
		"+\u0510\n+\x05+\u0512\n+\x03+\x03+\x03,\x03,\x05,\u0518\n,\x03,\x05,\u051B" +
		"\n,\x03-\x03-\x03-\x03-\x03-\x05-\u0522\n-\x03-\x03-\x03-\x03-\x03-\x03" +
		"-\x03-\x05-\u052B\n-\x03-\x03-\x03-\x05-\u0530\n-\x03-\x03-\x07-\u0534" +
		"\n-\f-\x0E-\u0537\v-\x03-\x05-\u053A\n-\x05-\u053C\n-\x03-\x03-\x05-\u0540" +
		"\n-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x05-\u054D" +
		"\n-\x03-\x03-\x03-\x03-\x03-\x03-\x05-\u0555\n-\x03-\x03-\x03-\x05-\u055A" +
		"\n-\x03-\x03-\x07-\u055E\n-\f-\x0E-\u0561\v-\x03-\x05-\u0564\n-\x05-\u0566" +
		"\n-\x03-\x03-\x05-\u056A\n-\x03-\x03-\x03-\x03-\x03-\x03-\x05-\u0572\n" +
		"-\x03-\x03-\x03-\x05-\u0577\n-\x03-\x03-\x07-\u057B\n-\f-\x0E-\u057E\v" +
		"-\x03-\x05-\u0581\n-\x05-\u0583\n-\x03-\x03-\x05-\u0587\n-\x03.\x03.\x03" +
		".\x03.\x03.\x03.\x03.\x05.\u0590\n.\x03/\x03/\x03/\x03/\x03/\x03/\x03" +
		"/\x03/\x05/\u059A\n/\x03/\x03/\x03/\x07/\u059F\n/\f/\x0E/\u05A2\v/\x03" +
		"/\x03/\x05/\u05A6\n/\x03/\x03/\x03/\x03/\x03/\x03/\x05/\u05AE\n/\x03/" +
		"\x03/\x03/\x05/\u05B3\n/\x03/\x03/\x07/\u05B7\n/\f/\x0E/\u05BA\v/\x03" +
		"/\x05/\u05BD\n/\x05/\u05BF\n/\x03/\x03/\x05/\u05C3\n/\x030\x050\u05C6" +
		"\n0\x030\x030\x030\x050\u05CB\n0\x030\x030\x030\x050\u05D0\n0\x030\x03" +
		"0\x030\x050\u05D5\n0\x030\x030\x030\x050\u05DA\n0\x030\x030\x030\x050" +
		"\u05DF\n0\x030\x030\x030\x050\u05E4\n0\x030\x030\x030\x050\u05E9\n0\x03" +
		"0\x030\x030\x050\u05EE\n0\x030\x030\x050\u05F2\n0\x031\x031\x051\u05F6" +
		"\n1\x031\x031\x051\u05FA\n1\x031\x031\x031\x031\x031\x031\x031\x031\x05" +
		"1\u0604\n1\x032\x032\x032\x033\x033\x033\x033\x033\x033\x033\x033\x07" +
		"3\u0611\n3\f3\x0E3\u0614\v3\x033\x053\u0617\n3\x053\u0619\n3\x033\x03" +
		"3\x033\x033\x033\x033\x033\x033\x033\x033\x033\x033\x033\x073\u0628\n" +
		"3\f3\x0E3\u062B\v3\x033\x053\u062E\n3\x053\u0630\n3\x033\x033\x053\u0634" +
		"\n3\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x034\x03" +
		"4\x034\x074\u0645\n4\f4\x0E4\u0648\v4\x034\x054\u064B\n4\x054\u064D\n" +
		"4\x034\x034\x054\u0651\n4\x035\x035\x035\x035\x035\x035\x035\x035\x03" +
		"5\x055\u065C\n5\x036\x036\x036\x036\x036\x036\x036\x036\x036\x036\x03" +
		"6\x036\x056\u066A\n6\x037\x037\x037\x037\x037\x037\x037\x037\x077\u0674" +
		"\n7\f7\x0E7\u0677\v7\x037\x057\u067A\n7\x057\u067C\n7\x037\x037\x037\x03" +
		"7\x037\x037\x037\x037\x037\x037\x037\x037\x037\x077\u068B\n7\f7\x0E7\u068E" +
		"\v7\x037\x057\u0691\n7\x057\u0693\n7\x037\x037\x057\u0697\n7\x038\x03" +
		"8\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038\x038\x03" +
		"8\x038\x078\u06AA\n8\f8\x0E8\u06AD\v8\x038\x058\u06B0\n8\x058\u06B2\n" +
		"8\x038\x038\x058\u06B6\n8\x039\x039\x039\x039\x039\x039\x039\x039\x03" +
		"9\x039\x039\x079\u06C3\n9\f9\x0E9\u06C6\v9\x039\x059\u06C9\n9\x059\u06CB" +
		"\n9\x039\x039\x039\x039\x039\x039\x039\x059\u06D4\n9\x059\u06D6\n9\x03" +
		":\x03:\x03:\x03:\x03:\x03:\x03:\x03:\x07:\u06E0\n:\f:\x0E:\u06E3\v:\x03" +
		":\x05:\u06E6\n:\x05:\u06E8\n:\x03:\x03:\x03:\x03:\x03:\x03:\x03:\x03:" +
		"\x03:\x03:\x03:\x07:\u06F5\n:\f:\x0E:\u06F8\v:\x03:\x05:\u06FB\n:\x05" +
		":\u06FD\n:\x03:\x03:\x05:\u0701\n:\x03;\x03;\x03;\x03;\x03;\x03;\x03;" +
		"\x03;\x07;\u070B\n;\f;\x0E;\u070E\v;\x03;\x05;\u0711\n;\x05;\u0713\n;" +
		"\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x07;\u0720\n;" +
		"\f;\x0E;\u0723\v;\x03;\x05;\u0726\n;\x05;\u0728\n;\x03;\x03;\x05;\u072C" +
		"\n;\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03" +
		"<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x03<\x07" +
		"<\u0749\n<\f<\x0E<\u074C\v<\x03<\x05<\u074F\n<\x05<\u0751\n<\x03<\x03" +
		"<\x05<\u0755\n<\x03=\x03=\x05=\u0759\n=\x03>\x03>\x03>\x05>\u075E\n>\x03" +
		">\x03>\x03?\x03?\x03?\x03?\x05?\u0766\n?\x03?\x05?\u0769\n?\x03@\x03@" +
		"\x03@\x03@\x03@\x03@\x05@\u0771\n@\x03@\x03@\x03@\x03@\x03@\x03@\x03@" +
		"\x03@\x03@\x03@\x05@\u077D\n@\x03@\x03@\x03@\x03@\x05@\u0783\n@\x03A\x03" +
		"A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03" +
		"A\x03A\x03A\x03A\x07A\u0798\nA\fA\x0EA\u079B\vA\x03A\x03A\x05A\u079F\n" +
		"A\x03B\x03B\x03B\x05B\u07A4\nB\x03C\x03C\x03C\x03C\x05C\u07AA\nC\x03C" +
		"\x05C\u07AD\nC\x03C\x03C\x03C\x03C\x03C\x03C\x05C\u07B5\nC\x03C\x03C\x03" +
		"C\x03C\x03C\x03C\x05C\u07BD\nC\x03C\x03C\x03C\x03C\x05C\u07C3\nC\x03D" +
		"\x03D\x05D\u07C7\nD\x03D\x05D\u07CA\nD\x03D\x03D\x05D\u07CE\nD\x03D\x05" +
		"D\u07D1\nD\x03D\x03D\x05D\u07D5\nD\x03D\x05D\u07D8\nD\x03D\x03D\x05D\u07DC" +
		"\nD\x03D\x05D\u07DF\nD\x05D\u07E1\nD\x03E\x03E\x03E\x03E\x03E\x03E\x03" +
		"E\x03E\x07E\u07EB\nE\fE\x0EE\u07EE\vE\x03E\x05E\u07F1\nE\x05E\u07F3\n" +
		"E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x07E\u0800\n" +
		"E\fE\x0EE\u0803\vE\x03E\x05E\u0806\nE\x05E\u0808\nE\x03E\x03E\x05E\u080C" +
		"\nE\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x03F\x07F\u081A" +
		"\nF\fF\x0EF\u081D\vF\x03F\x05F\u0820\nF\x05F\u0822\nF\x03F\x03F\x05F\u0826" +
		"\nF\x03G\x03G\x05G\u082A\nG\x03G\x05G\u082D\nG\x03G\x05G\u0830\nG\x03" +
		"G\x03G\x03G\x05G\u0835\nG\x03G\x05G\u0838\nG\x03G\x03G\x03G\x03G\x03G" +
		"\x03G\x03G\x03G\x03G\x03G\x03G\x03G\x03G\x03G\x03G\x03G\x03G\x03G\x03" +
		"G\x03G\x03G\x03G\x03G\x05G\u0851\nG\x03G\x05G\u0854\nG\x05G\u0856\nG\x03" +
		"H\x03H\x03H\x03H\x03H\x03H\x05H\u085E\nH\x03H\x07H\u0861\nH\fH\x0EH\u0864" +
		"\vH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u0870\nH\x03" +
		"H\x03H\x03H\x05H\u0875\nH\x03H\x03H\x03H\x05H\u087A\nH\x03H\x03H\x07H" +
		"\u087E\nH\fH\x0EH\u0881\vH\x03H\x05H\u0884\nH\x05H\u0886\nH\x03H\x03H" +
		"\x05H\u088A\nH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u0894\nH\x03" +
		"H\x03H\x03H\x03H\x03H\x05H\u089B\nH\x03H\x03H\x03H\x05H\u08A0\nH\x03H" +
		"\x03H\x03H\x05H\u08A5\nH\x03H\x03H\x07H\u08A9\nH\fH\x0EH\u08AC\vH\x03" +
		"H\x05H\u08AF\nH\x05H\u08B1\nH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x07H" +
		"\u08BA\nH\fH\x0EH\u08BD\vH\x03H\x05H\u08C0\nH\x05H\u08C2\nH\x03H\x03H" +
		"\x05H\u08C6\nH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x07H\u08D0\nH\f" +
		"H\x0EH\u08D3\vH\x03H\x05H\u08D6\nH\x05H\u08D8\nH\x03H\x03H\x03H\x03H\x03" +
		"H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x07H\u08E7\nH\fH\x0EH\u08EA" +
		"\vH\x03H\x05H\u08ED\nH\x05H\u08EF\nH\x03H\x03H\x05H\u08F3\nH\x03I\x05" +
		"I\u08F6\nI\x03I\x03I\x03J\x03J\x03J\x03J\x03J\x03J\x07J\u0900\nJ\fJ\x0E" +
		"J\u0903\vJ\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x05K\u090D\nK\x03L" +
		"\x03L\x03L\x03L\x03L\x03L\x03L\x05L\u0916\n";
	private static readonly _serializedATNSegment1: string =
		"L\x03L\x05L\u0919\nL\x03L\x05L\u091C\nL\x03L\x03L\x03L\x03L\x03L\x03L" +
		"\x05L\u0924\nL\x03L\x05L\u0927\nL\x03L\x05L\u092A\nL\x03L\x03L\x05L\u092E" +
		"\nL\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03" +
		"M\x03M\x03M\x03M\x03M\x03M\x05M\u0943\nM\x03M\x03M\x05M\u0947\nM\x05M" +
		"\u0949\nM\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N" +
		"\x03N\x03N\x03N\x07N\u095A\nN\fN\x0EN\u095D\vN\x03N\x05N\u0960\nN\x05" +
		"N\u0962\nN\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x07N\u096E" +
		"\nN\fN\x0EN\u0971\vN\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03" +
		"N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x07N\u0986\nN\fN\x0EN\u0989" +
		"\vN\x03N\x05N\u098C\nN\x05N\u098E\nN\x03N\x03N\x03N\x03N\x03N\x03N\x03" +
		"N\x03N\x03N\x03N\x07N\u099A\nN\fN\x0EN\u099D\vN\x03N\x05N\u09A0\nN\x05" +
		"N\u09A2\nN\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03" +
		"N\x03N\x07N\u09B1\nN\fN\x0EN\u09B4\vN\x03N\x05N\u09B7\nN\x05N\u09B9\n" +
		"N\x03N\x03N\x03N\x05N\u09BE\nN\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03" +
		"O\x03O\x03O\x03O\x07O\u09CB\nO\fO\x0EO\u09CE\vO\x03O\x05O\u09D1\nO\x05" +
		"O\u09D3\nO\x03O\x03O\x05O\u09D7\nO\x03P\x03P\x03P\x03P\x03P\x03Q\x03Q" +
		"\x03Q\x03Q\x03Q\x03Q\x03Q\x03Q\x07Q\u09E6\nQ\fQ\x0EQ\u09E9\vQ\x03Q\x05" +
		"Q\u09EC\nQ\x05Q\u09EE\nQ\x03Q\x03Q\x03R\x03R\x03R\x05R\u09F5\nR\x03R\x03" +
		"R\x03R\x03R\x05R\u09FB\nR\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03R\x03" +
		"R\x03R\x05R\u0A07\nR\x03R\x05R\u0A0A\nR\x03R\x03R\x03R\x03R\x03R\x03R" +
		"\x05R\u0A12\nR\x05R\u0A14\nR\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x03S\x05" +
		"S\u0A1E\nS\x03T\x03T\x03T\x03T\x03U\x03U\x03U\x03U\x03U\x03U\x07U\u0A2A" +
		"\nU\fU\x0EU\u0A2D\vU\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03" +
		"U\x03U\x03U\x03U\x03U\x05U\u0A3D\nU\x03U\x03U\x03U\x03U\x03U\x03U\x03" +
		"U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03" +
		"U\x03U\x03U\x03U\x07U\u0A57\nU\fU\x0EU\u0A5A\vU\x03V\x03V\x03V\x03V\x03" +
		"V\x03V\x03V\x03V\x05V\u0A64\nV\x03W\x03W\x03W\x03W\x03W\x03W\x03W\x03" +
		"W\x05W\u0A6E\nW\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x07X\u0A77\nX\fX\x0E" +
		"X\u0A7A\vX\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x05X\u0A86" +
		"\nX\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Y\x03Z\x03Z\x03[\x03" +
		"[\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03" +
		"\\\x07\\\u0AA2\n\\\f\\\x0E\\\u0AA5\v\\\x03\\\x03\\\x03\\\x03\\\x03\\\x03" +
		"\\\x05\\\u0AAD\n\\\x03\\\x03\\\x03\\\x03\\\x05\\\u0AB3\n\\\x03]\x03]\x03" +
		"]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x03]\x07]\u0AC3\n" +
		"]\f]\x0E]\u0AC6\v]\x03]\x03]\x03]\x03]\x03]\x03]\x05]\u0ACE\n]\x05]\u0AD0" +
		"\n]\x03]\x03]\x03]\x07]\u0AD5\n]\f]\x0E]\u0AD8\v]\x03^\x03^\x03^\x03^" +
		"\x03^\x03^\x03^\x07^\u0AE1\n^\f^\x0E^\u0AE4\v^\x03^\x03^\x03^\x03^\x03" +
		"^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x07^\u0AF2\n^\f^\x0E^\u0AF5\v^\x03" +
		"^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x07^\u0B03\n" +
		"^\f^\x0E^\u0B06\v^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x07" +
		"^\u0B12\n^\f^\x0E^\u0B15\v^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03" +
		"^\x03^\x07^\u0B21\n^\f^\x0E^\u0B24\v^\x03^\x03^\x03^\x03^\x03^\x03^\x03" +
		"^\x03^\x03^\x03^\x05^\u0B30\n^\x03_\x03_\x03`\x03`\x03`\x03`\x03`\x03" +
		"`\x03`\x07`\u0B3B\n`\f`\x0E`\u0B3E\v`\x03`\x03`\x03`\x03`\x03`\x05`\u0B45" +
		"\n`\x03a\x03a\x03a\x03a\x03a\x03a\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x07" +
		"b\u0B54\nb\fb\x0Eb\u0B57\vb\x03b\x03b\x03b\x03b\x03b\x03b\x05b\u0B5F\n" +
		"b\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x03c\x05c\u0B6D" +
		"\nc\x03d\x03d\x03d\x03d\x03d\x03d\x03d\x07d\u0B76\nd\fd\x0Ed\u0B79\vd" +
		"\x03d\x03d\x03d\x03e\x03e\x03e\x03e\x03e\x03e\x03e\x07e\u0B85\ne\fe\x0E" +
		"e\u0B88\ve\x03e\x03e\x03e\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x07f\u0B94" +
		"\nf\ff\x0Ef\u0B97\vf\x03f\x03f\x03f\x03g\x03g\x03h\x03h\x03h\x03h\x03" +
		"h\x03h\x03h\x07h\u0BA5\nh\fh\x0Eh\u0BA8\vh\x03h\x03h\x03h\x03h\x03h\x03" +
		"h\x03h\x03h\x03h\x03h\x03h\x03h\x07h\u0BB6\nh\fh\x0Eh\u0BB9\vh\x03h\x03" +
		"h\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x03h\x05h\u0BC5\nh\x03i\x03i\x03" +
		"j\x03j\x03j\x03j\x03j\x03j\x03j\x07j\u0BD0\nj\fj\x0Ej\u0BD3\vj\x03j\x03" +
		"j\x03j\x03j\x03j\x05j\u0BDA\nj\x03k\x03k\x03k\x03k\x03k\x03k\x03l\x03" +
		"l\x03l\x03l\x03l\x03l\x03l\x07l\u0BE9\nl\fl\x0El\u0BEC\vl\x03l\x03l\x03" +
		"l\x03l\x03l\x03l\x05l\u0BF4\nl\x03m\x03m\x03m\x03m\x03m\x03m\x03m\x05" +
		"m\u0BFD\nm\x03n\x03n\x03o\x03o\x03p\x03p\x07p\u0C05\np\fp\x0Ep\u0C08\v" +
		"p\x03q\x06q\u0C0B\nq\rq\x0Eq\u0C0C\x03r\x03r\x07r\u0C11\nr\fr\x0Er\u0C14" +
		"\vr\x03s\x05s\u0C17\ns\x03s\x07s\u0C1A\ns\fs\x0Es\u0C1D\vs\x03t\x07t\u0C20" +
		"\nt\ft\x0Et\u0C23\vt\x03u\x03u\x03v\x03v\x03v\x03v\x03w\x03w\x03w\x03" +
		"x\x03x\x03x\x03x\x03x\x03x\x03y\x03y\x05y\u0C36\ny\x03z\x03z\x05z\u0C3A" +
		"\nz\x03z\x05z\u0C3D\nz\x03{\x03{\x03{\x03{\x03{\x03{\x05{\u0C45\n{\x03" +
		"{\x03{\x03{\x03|\x03|\x03|\x05|\u0C4D\n|\x03}\x03}\x03}\x03}\x03~\x03" +
		"~\x03~\x03~\x03~\x05~\u0C58\n~\x03\x7F\x03\x7F\x03\x80\x03\x80\x03\x81" +
		"\x03\x81\x03\x82\x03\x82\x03\x83\x03\x83\x03\x84\x03\x84\x03\x85\x03\x85" +
		"\x03\x86\x03\x86\x03\x87\x03\x87\x03\x88\x03\x88\x03\x89\x03\x89\x03\x8A" +
		"\x03\x8A\x03\x8B\x03\x8B\x03\x8B\x03\x8C\x03\x8C\x03\x8D\x03\x8D\x03\x8E" +
		"\x03\x8E\x03\x8F\x03\x8F\x03\x90\x03\x90\x03\x90\x05\x90\u0C80\n\x90\x03" +
		"\x90\x03\x90\x03\x91\x03\x91\x03\x92\x03\x92\x03\x92\x05\x92\u0C89\n\x92" +
		"\x03\x93\x03\x93\x03\x94\x03\x94\x03\x94\x05\x94\u0C90\n\x94\x03\x94\x03" +
		"\x94\x03\x94\x03\x94\x05\x94\u0C96\n\x94\x07\x94\u0C98\n\x94\f\x94\x0E" +
		"\x94\u0C9B\v\x94\x03\x95\x03\x95\x03\x96\x03\x96\x05\x96\u0CA1\n\x96\x03" +
		"\x97\x03\x97\x03\x97\x07\x97\u0CA6\n\x97\f\x97\x0E\x97\u0CA9\v\x97\x03" +
		"\x98\x03\x98\x03\x98\x05\x98\u0CAE\n\x98\x03\x98\x03\x98\x03\x98\x05\x98" +
		"\u0CB3\n\x98\x03\x99\x03\x99\x03\x9A\x03\x9A\x05\x9A\u0CB9\n\x9A\x03\x9B" +
		"\x03\x9B\x05\x9B\u0CBD\n\x9B\x03\x9B\x03\x9B\x05\x9B\u0CC1\n\x9B\x03\x9C" +
		"\x03\x9C\x05\x9C\u0CC5\n\x9C\x03\x9C\x05\x9C\u0CC8\n\x9C\x03\x9C\x03\x9C" +
		"\x05\x9C\u0CCC\n\x9C\x03\x9D\x03\x9D\x03\x9D\x05\x9D\u0CD1\n\x9D\x03\x9D" +
		"\x03\x9D\x03\x9D\x05\x9D\u0CD6\n\x9D\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0CDB" +
		"\n\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0CE0\n\x9E\x03\x9F\x03\x9F\x03" +
		"\x9F\x05\x9F\u0CE5\n\x9F\x03\x9F\x03\x9F\x03\x9F\x05\x9F\u0CEA\n\x9F\x03" +
		"\xA0\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x05\xA0\u0CF1\n\xA0\x03\xA1\x03\xA1" +
		"\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x05\xA1\u0CFB\n\xA1\x03" +
		"\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x07\xA1\u0D03\n\xA1\f\xA1" +
		"\x0E\xA1\u0D06\v\xA1\x03\xA1\x03\xA1\x03\xA1\x05\xA1\u0D0B\n\xA1\x03\xA2" +
		"\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0D26\n\xA2\x03" +
		"\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x07\xA2\u0D30" +
		"\n\xA2\f\xA2\x0E\xA2\u0D33\v\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x05\xA2\u0D3B\n\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0D41" +
		"\n\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0D47\n\xA2\x03\xA2\x03" +
		"\xA2\x03\xA2\x03\xA2\x05\xA2\u0D4D\n\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0D56\n\xA2\x03\xA2\x03\xA2\x03\xA2\x03" +
		"\xA2\x05\xA2\u0D5C\n\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2" +
		"\x03\xA2\x03\xA2\x03\xA2\x07\xA2\u0D67\n\xA2\f\xA2\x0E\xA2\u0D6A\v\xA2" +
		"\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0D72\n\xA2\x03" +
		"\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x05\xA2\u0D7C" +
		"\n\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2\x03\xA2" +
		"\x07\xA2\u0D86\n\xA2\f\xA2\x0E\xA2\u0D89\v\xA2\x03\xA2\x03\xA2\x03\xA2" +
		"\x05\xA2\u0D8E\n\xA2\x03\xA3\x03\xA3\x05\xA3\u0D92\n\xA3\x03\xA4\x03\xA4" +
		"\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x07\xA4\u0D9B\n\xA4\f\xA4\x0E" +
		"\xA4\u0D9E\v\xA4\x05\xA4\u0DA0\n\xA4\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03" +
		"\xA5\x03\xA5\x03\xA5\x07\xA5\u0DA9\n\xA5\f\xA5\x0E\xA5\u0DAC\v\xA5\x03" +
		"\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u0DB3\n\xA5\x03\xA6\x03\xA6" +
		"\x03\xA6\x03\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x05\xA7" +
		"\u0DBF\n\xA7\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03" +
		"\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x07\xA8\u0DCD\n\xA8\f\xA8\x0E\xA8" +
		"\u0DD0\v\xA8\x03\xA8\x03\xA8\x03\xA8\x05\xA8\u0DD5\n\xA8\x03\xA9\x03\xA9" +
		"\x03\xA9\x03\xA9\x03\xA9\x02\x02\x06N\xA8\xB8\u0126\xAA\x02\x02\x04\x02" +
		"\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18" +
		"\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x02" +
		"0\x022\x024\x026\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02" +
		"L\x02N\x02P\x02R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02" +
		"h\x02j\x02l\x02n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82" +
		"\x02\x84\x02\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94" +
		"\x02\x96\x02\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6" +
		"\x02\xA8\x02\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8" +
		"\x02\xBA\x02\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA" +
		"\x02\xCC\x02\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC" +
		"\x02\xDE\x02\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE" +
		"\x02\xF0\x02\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100" +
		"\x02\u0102\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E" +
		"\x02\u0110\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C" +
		"\x02\u011E\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A" +
		"\x02\u012C\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138" +
		"\x02\u013A\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146" +
		"\x02\u0148\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\x02.\x04\x02\x03" +
		"\x03OO\x03\x02KL\x03\x02\xB6\xB7\x03\x02\xCE\xCF\x04\x02\xAE\xAE\xB0\xB0" +
		"\x03\x02bc\x03\x02ST\x03\x02YZ\x03\x02[\\\x03\x02]^\x03\x02_`\x03\x02" +
		"\x1A\x1B\x04\x02\x0F\x0F\x1D\x1E\x03\x02\x1F \x03\x02rs\x05\x02bc||\x7F" +
		"\x7F\x03\x02\x80\x86\x03\x02\x8A\x8E\x03\x02\x90\x92\x03\x02\x9C\x9D\x05" +
		"\x02\x0F\x0F\x1F\x1F##\x04\x02\x14\x14ww\x04\x02\x15\x15xx\x04\x02\x15" +
		"\x15\x98\x98\x04\x02\x14\x14\x97\x97\x03\x02\x95\x96\x03\x02\xA4\xA6\x04" +
		"\x02\xA4\xA5\xA7\xA8\x04\x02``\xA6\xA6\x03\x02\xA9\xAB\x04\x02==AA\x03" +
		"\x02>?\x03\x02CD\x04\x0266FF\x04\x02$$FF\x07\x02Khjqt\xAE\xB0\xD6\xD8" +
		"\xDD\x03\x02\xD8\xDD\x04\x02  \"\"\x03\x02\xBA\xBC\x03\x02\xBD\xBF\x03" +
		"\x02\xC0\xC1\x03\x02\xC9\xCC\x04\x02\xCD\xCD\xCF\xCF\x03\x02\xD2\xD5\x02" +
		"\u0FD4\x02\u0152\x03\x02\x02\x02\x04\u0163\x03\x02\x02\x02\x06\u0167\x03" +
		"\x02\x02\x02\b\u0185\x03\x02\x02\x02\n\u0193\x03\x02\x02\x02\f\u0195\x03" +
		"\x02\x02\x02\x0E\u0197\x03\x02\x02\x02\x10\u01E6\x03\x02\x02\x02\x12\u01EC" +
		"\x03\x02\x02\x02\x14\u01EE\x03\x02\x02\x02\x16\u0215\x03\x02\x02\x02\x18" +
		"\u024C\x03\x02\x02\x02\x1A\u0252\x03\x02\x02\x02\x1C\u0254\x03\x02\x02" +
		"\x02\x1E\u0277\x03\x02\x02\x02 \u02A0\x03\x02\x02\x02\"\u02A4\x03\x02" +
		"\x02\x02$\u02A7\x03\x02\x02\x02&\u02B6\x03\x02\x02\x02(\u02C4\x03\x02" +
		"\x02\x02*\u02CA\x03\x02\x02\x02,\u02CC\x03\x02\x02\x02.\u02CE\x03\x02" +
		"\x02\x020\u02DE\x03\x02\x02\x022\u0312\x03\x02\x02\x024\u0357\x03\x02" +
		"\x02\x026\u0379\x03\x02\x02\x028\u03E5\x03\x02\x02\x02:\u03E7\x03\x02" +
		"\x02\x02<\u03F1\x03\x02\x02\x02>\u03FB\x03\x02\x02\x02@\u0405\x03\x02" +
		"\x02\x02B\u040F\x03\x02\x02\x02D\u041D\x03\x02\x02\x02F\u045A\x03\x02" +
		"\x02\x02H\u045E\x03\x02\x02\x02J\u0485\x03\x02\x02\x02L\u04CF\x03\x02" +
		"\x02\x02N\u04DA\x03\x02\x02\x02P\u04FA\x03\x02\x02\x02R\u04FD\x03\x02" +
		"\x02\x02T\u0501\x03\x02\x02\x02V\u051A\x03\x02\x02\x02X\u0586\x03\x02" +
		"\x02\x02Z\u058F\x03\x02\x02\x02\\\u05C2\x03\x02\x02\x02^\u05F1\x03\x02" +
		"\x02\x02`\u0603\x03\x02\x02\x02b\u0605\x03\x02\x02\x02d\u0633\x03\x02" +
		"\x02\x02f\u0650\x03\x02\x02\x02h\u065B\x03\x02\x02\x02j\u0669\x03\x02" +
		"\x02\x02l\u0696\x03\x02\x02\x02n\u06B5\x03\x02\x02\x02p\u06D5\x03\x02" +
		"\x02\x02r\u0700\x03\x02\x02\x02t\u072B\x03\x02\x02\x02v\u0754\x03\x02" +
		"\x02\x02x\u0758\x03\x02\x02\x02z\u075D\x03\x02\x02\x02|\u0761\x03\x02" +
		"\x02\x02~\u0782\x03\x02\x02\x02\x80\u079E\x03\x02\x02\x02\x82\u07A3\x03" +
		"\x02\x02\x02\x84\u07C2\x03\x02\x02\x02\x86\u07E0\x03\x02\x02\x02\x88\u080B" +
		"\x03\x02\x02\x02\x8A\u0825\x03\x02\x02\x02\x8C\u0855\x03\x02\x02\x02\x8E" +
		"\u08F2\x03\x02\x02\x02\x90\u08F5\x03\x02\x02\x02\x92\u08F9\x03\x02\x02" +
		"\x02\x94\u090C\x03\x02\x02\x02\x96\u092D\x03\x02\x02\x02\x98\u0948\x03" +
		"\x02\x02\x02\x9A\u09BD\x03\x02\x02\x02\x9C\u09D6\x03\x02\x02\x02\x9E\u09D8" +
		"\x03\x02\x02\x02\xA0\u09DD\x03\x02\x02\x02\xA2\u0A13\x03\x02\x02\x02\xA4" +
		"\u0A1D\x03\x02\x02\x02\xA6\u0A1F\x03\x02\x02\x02\xA8\u0A3C\x03\x02\x02" +
		"\x02\xAA\u0A5B\x03\x02\x02\x02\xAC\u0A6D\x03\x02\x02\x02\xAE\u0A85\x03" +
		"\x02\x02\x02\xB0\u0A87\x03\x02\x02\x02\xB2\u0A91\x03\x02\x02\x02\xB4\u0A93" +
		"\x03\x02\x02\x02\xB6\u0AB2\x03\x02\x02\x02\xB8\u0ACF\x03\x02\x02\x02\xBA" +
		"\u0B2F\x03\x02\x02\x02\xBC\u0B31\x03\x02\x02\x02\xBE\u0B44\x03\x02\x02" +
		"\x02\xC0\u0B46\x03\x02\x02\x02\xC2\u0B5E\x03\x02\x02\x02\xC4\u0B6C\x03" +
		"\x02\x02\x02\xC6\u0B6E\x03\x02\x02\x02\xC8\u0B7D\x03\x02\x02\x02\xCA\u0B8C" +
		"\x03\x02\x02\x02\xCC\u0B9B\x03\x02\x02\x02\xCE\u0BC4\x03\x02\x02\x02\xD0" +
		"\u0BC6\x03\x02\x02\x02\xD2\u0BD9\x03\x02\x02\x02\xD4\u0BDB\x03\x02\x02" +
		"\x02\xD6\u0BF3\x03\x02\x02\x02\xD8\u0BFC\x03\x02\x02\x02\xDA\u0BFE\x03" +
		"\x02\x02\x02\xDC\u0C00\x03\x02\x02\x02\xDE\u0C02\x03\x02\x02\x02\xE0\u0C0A" +
		"\x03\x02\x02\x02\xE2\u0C0E\x03\x02\x02\x02\xE4\u0C16\x03\x02\x02\x02\xE6" +
		"\u0C21\x03\x02\x02\x02\xE8\u0C24\x03\x02\x02\x02\xEA\u0C26\x03\x02\x02" +
		"\x02\xEC\u0C2A\x03\x02\x02\x02\xEE\u0C2D\x03\x02\x02\x02\xF0\u0C35\x03" +
		"\x02\x02\x02\xF2\u0C37\x03\x02\x02\x02\xF4\u0C3E\x03\x02\x02\x02\xF6\u0C4C" +
		"\x03\x02\x02\x02\xF8\u0C4E\x03\x02\x02\x02\xFA\u0C57\x03\x02\x02\x02\xFC" +
		"\u0C59\x03\x02\x02\x02\xFE\u0C5B\x03\x02\x02\x02\u0100\u0C5D\x03\x02\x02" +
		"\x02\u0102\u0C5F\x03\x02\x02\x02\u0104\u0C61\x03\x02\x02\x02\u0106\u0C63" +
		"\x03\x02\x02\x02\u0108\u0C65\x03\x02\x02\x02\u010A\u0C67\x03\x02\x02\x02" +
		"\u010C\u0C69\x03\x02\x02\x02\u010E\u0C6B\x03\x02\x02\x02\u0110\u0C6D\x03" +
		"\x02\x02\x02\u0112\u0C6F\x03\x02\x02\x02\u0114\u0C71\x03\x02\x02\x02\u0116" +
		"\u0C74\x03\x02\x02\x02\u0118\u0C76\x03\x02\x02\x02\u011A\u0C78\x03\x02" +
		"\x02\x02\u011C\u0C7A\x03\x02\x02\x02\u011E\u0C7F\x03\x02\x02\x02\u0120" +
		"\u0C83\x03\x02\x02\x02\u0122\u0C88\x03\x02\x02\x02\u0124\u0C8A\x03\x02" +
		"\x02\x02\u0126\u0C8F\x03\x02\x02\x02\u0128\u0C9C\x03\x02\x02\x02\u012A" +
		"\u0CA0\x03\x02\x02\x02\u012C\u0CA2\x03\x02\x02\x02\u012E\u0CAD\x03\x02" +
		"\x02\x02\u0130\u0CB4\x03\x02\x02\x02\u0132\u0CB8\x03\x02\x02\x02\u0134" +
		"\u0CBC\x03\x02\x02\x02\u0136\u0CC4\x03\x02\x02\x02\u0138\u0CD5\x03\x02" +
		"\x02\x02\u013A\u0CDF\x03\x02\x02\x02\u013C\u0CE9\x03\x02\x02\x02\u013E" +
		"\u0CF0\x03\x02\x02\x02\u0140\u0CF2\x03\x02\x02\x02\u0142\u0D8D\x03\x02" +
		"\x02\x02\u0144\u0D91\x03\x02\x02\x02\u0146\u0D9F\x03\x02\x02\x02\u0148" +
		"\u0DB2\x03\x02\x02\x02\u014A\u0DB4\x03\x02\x02\x02\u014C\u0DBE\x03\x02" +
		"\x02\x02\u014E\u0DD4\x03\x02\x02\x02\u0150\u0DD6\x03\x02\x02\x02\u0152" +
		"\u015F\x05\xE6t\x02\u0153\u0159\x05\x04\x03\x02\u0154\u0155\x05\xE0q\x02" +
		"\u0155\u0156\x05\x04\x03\x02\u0156\u0158\x03\x02\x02\x02\u0157\u0154\x03" +
		"\x02\x02\x02\u0158\u015B\x03\x02\x02\x02\u0159\u0157\x03\x02\x02\x02\u0159" +
		"\u015A\x03\x02\x02\x02\u015A\u015D\x03\x02\x02\x02\u015B\u0159\x03\x02" +
		"\x02\x02\u015C\u015E\x05\xE0q\x02\u015D\u015C\x03\x02\x02\x02\u015D\u015E" +
		"\x03\x02\x02\x02\u015E\u0160\x03\x02\x02\x02\u015F\u0153\x03\x02\x02\x02" +
		"\u015F\u0160\x03\x02\x02\x02\u0160\x03\x03\x02\x02\x02\u0161\u0164\x05" +
		"\x0E\b\x02\u0162\u0164\x05\x12\n\x02\u0163\u0161\x03\x02\x02\x02\u0163" +
		"\u0162\x03\x02\x02\x02\u0164\x05\x03\x02\x02\x02\u0165\u0168\x05\n\x06" +
		"\x02\u0166\u0168\x05\b\x05\x02\u0167\u0165\x03\x02\x02\x02\u0167\u0166" +
		"\x03\x02\x02\x02\u0168\x07\x03\x02\x02\x02\u0169\u0186\x05\xAAV\x02\u016A" +
		"\u0186\x05\xB0Y\x02\u016B\u0186\x05\xAEX\x02\u016C\u0186\x05\x14\v\x02" +
		"\u016D\u0186\x05*\x16\x02\u016E\u0186\x05,\x17\x02\u016F\u0186\x05\"\x12" +
		"\x02\u0170\u0186\x05$\x13\x02\u0171\u0186\x05&\x14\x02\u0172\u0186\x05" +
		"(\x15\x02\u0173\u0186\x052\x1A\x02\u0174\u0186\x05J&\x02\u0175\u0186\x05" +
		"T+\x02\u0176\u0186\x05X-\x02\u0177\u0186\x05d3\x02\u0178\u0186\x05\\/" +
		"\x02\u0179\u0186\x05l7\x02\u017A\u0186\x05t;\x02\u017B\u0186\x05r:\x02" +
		"\u017C\u0186\x05\x88E\x02\u017D\u0186\x05\x8EH\x02\u017E\u0186\x05\xA0" +
		"Q\x02\u017F\u0186\x05F$\x02\u0180\u0186\x05\xA6T\x02\u0181\u0186\x05L" +
		"\'\x02\u0182\u0186\x05`1\x02\u0183\u0186\x05\x9EP\x02\u0184\u0186\x05" +
		"\f\x07\x02\u0185\u0169\x03\x02\x02\x02\u0185\u016A\x03\x02\x02\x02\u0185" +
		"\u016B\x03\x02\x02\x02\u0185\u016C\x03\x02\x02\x02\u0185\u016D\x03\x02" +
		"\x02\x02\u0185\u016E\x03\x02\x02\x02\u0185\u016F\x03\x02\x02\x02\u0185" +
		"\u0170\x03\x02\x02\x02\u0185\u0171\x03\x02\x02\x02\u0185\u0172\x03\x02" +
		"\x02\x02\u0185\u0173\x03\x02\x02\x02\u0185\u0174\x03\x02\x02\x02\u0185" +
		"\u0175\x03\x02\x02\x02\u0185\u0176\x03\x02\x02\x02\u0185\u0177\x03\x02" +
		"\x02\x02\u0185\u0178\x03\x02\x02\x02\u0185\u0179\x03\x02\x02\x02\u0185" +
		"\u017A\x03\x02\x02\x02\u0185\u017B\x03\x02\x02\x02\u0185\u017C\x03\x02" +
		"\x02\x02\u0185\u017D\x03\x02\x02\x02\u0185\u017E\x03\x02\x02\x02\u0185" +
		"\u017F\x03\x02\x02\x02\u0185\u0180\x03\x02\x02\x02\u0185\u0181\x03\x02" +
		"\x02\x02\u0185\u0182\x03\x02\x02\x02\u0185\u0183\x03\x02\x02\x02\u0185" +
		"\u0184\x03\x02\x02\x02\u0186\t\x03\x02\x02\x02\u0187\u0194\x05\x1C\x0F" +
		"\x02\u0188\u0189\t\x02\x02\x02\u0189\u0194\x05\x1C\x0F\x02\u018A\u0194" +
		"\x05\x1E\x10\x02\u018B\u0194\x05\xA4S\x02\u018C\u018D\x05\b\x05\x02\u018D" +
		"\u018F\x05\xE6t\x02\u018E\u0190\x054\x1B\x02\u018F\u018E\x03\x02\x02\x02" +
		"\u0190\u0191\x03\x02\x02\x02\u0191\u018F\x03\x02\x02\x02\u0191\u0192\x03" +
		"\x02\x02\x02\u0192\u0194\x03\x02\x02\x02\u0193\u0187\x03\x02\x02\x02\u0193" +
		"\u0188\x03\x02\x02\x02\u0193\u018A\x03\x02\x02\x02\u0193\u018B\x03\x02" +
		"\x02\x02\u0193\u018C\x03\x02\x02\x02\u0194\v\x03\x02\x02\x02\u0195\u0196" +
		"\x07H\x02\x02\u0196\r\x03\x02\x02\x02\u0197\u0199\t\x03\x02\x02\u0198" +
		"\u019A\x05\u0128\x95\x02\u0199\u0198\x03\x02\x02\x02\u0199\u019A\x03\x02" +
		"\x02\x02\u019A\u019B\x03\x02\x02\x02\u019B\u01AA\x05\xE6t\x02\u019C\u019D" +
		"\x07\x04\x02\x02\u019D\u01A4\x05\xE6t\x02\u019E\u01A0\x05\x10\t\x02\u019F" +
		"\u01A1\x05\xE2r\x02\u01A0\u019F\x03\x02\x02\x02\u01A0\u01A1\x03\x02\x02" +
		"\x02\u01A1\u01A3\x03\x02\x02\x02\u01A2\u019E\x03\x02\x02\x02\u01A3\u01A6" +
		"\x03\x02\x02\x02\u01A4\u01A2\x03\x02\x02\x02\u01A4\u01A5\x03\x02\x02\x02" +
		"\u01A5\u01A7\x03\x02\x02\x02\u01A6\u01A4\x03\x02\x02\x02\u01A7\u01A8\x07" +
		"\x05\x02\x02\u01A8\u01A9\x05\xE6t\x02\u01A9\u01AB\x03\x02\x02\x02\u01AA" +
		"\u019C\x03\x02\x02\x02\u01AA\u01AB\x03\x02\x02\x02\u01AB\u01AC\x03\x02" +
		"\x02\x02\u01AC\u01AD\x07\x06\x02\x02\u01AD\u01BA\x05\xE6t\x02\u01AE\u01B4" +
		"\x05\x12\n\x02\u01AF\u01B0\x05\xE0q\x02\u01B0";
	private static readonly _serializedATNSegment2: string =
		"\u01B1\x05\x12\n\x02\u01B1\u01B3\x03\x02\x02\x02\u01B2\u01AF\x03\x02\x02" +
		"\x02\u01B3\u01B6\x03\x02\x02\x02\u01B4\u01B2\x03\x02\x02\x02\u01B4\u01B5" +
		"\x03\x02\x02\x02\u01B5\u01B8\x03\x02\x02\x02\u01B6\u01B4\x03\x02\x02\x02" +
		"\u01B7\u01B9\x05\xE0q\x02\u01B8\u01B7\x03\x02\x02\x02\u01B8\u01B9\x03" +
		"\x02\x02\x02\u01B9\u01BB\x03\x02\x02\x02\u01BA\u01AE\x03\x02\x02\x02\u01BA" +
		"\u01BB\x03\x02\x02\x02\u01BB\u01BC\x03\x02\x02\x02\u01BC\u01BD\x07\x07" +
		"\x02\x02\u01BD\x0F\x03\x02\x02\x02\u01BE\u01BF\x07y\x02\x02\u01BF\u01C0" +
		"\x07\b\x02\x02\u01C0\u01E7\x05\u0128\x95\x02\u01C1\u01C2\x07g\x02\x02" +
		"\u01C2\u01C3\x07\b\x02\x02\u01C3\u01E7\x05\u0128\x95\x02\u01C4\u01C5\x07" +
		"u\x02\x02\u01C5\u01C6\x07\b\x02\x02\u01C6\u01E7\x05\u0128\x95\x02\u01C7" +
		"\u01C8\x07~\x02\x02\u01C8\u01C9\x07\b\x02\x02\u01C9\u01E7\x05\u0128\x95" +
		"\x02\u01CA\u01CB\x07a\x02\x02\u01CB\u01CC\x07\b\x02\x02\u01CC\u01E7\x05" +
		"\u0128\x95\x02\u01CD\u01CE\x07d\x02\x02\u01CE\u01CF\x07\b\x02\x02\u01CF" +
		"\u01E7\x05\u0128\x95\x02\u01D0\u01D1\x07f\x02\x02\u01D1\u01D2\x07\b\x02" +
		"\x02\u01D2\u01E7\x05\u0128\x95\x02\u01D3\u01D4\t\x04\x02\x02\u01D4\u01D5" +
		"\x07\b\x02\x02\u01D5\u01E7\x05\u0128\x95\x02\u01D6\u01D7\x07\x95\x02\x02" +
		"\u01D7\u01D8\x07\b\x02\x02\u01D8\u01E7\x05\u0128\x95\x02\u01D9\u01DA\x07" +
		"\x96\x02\x02\u01DA\u01DB\x07\b\x02\x02\u01DB\u01E7\x05\u0128\x95\x02\u01DC" +
		"\u01DD\x07\xB8\x02\x02\u01DD\u01DE\x07\b\x02\x02\u01DE\u01E7\x05\u0128" +
		"\x95\x02\u01DF\u01E0\x07{\x02\x02\u01E0\u01E1\x07\b\x02\x02\u01E1\u01E7" +
		"\x05\u0128\x95\x02\u01E2\u01E3\t\x05\x02\x02\u01E3\u01E4\x07\b\x02\x02" +
		"\u01E4\u01E7\x05\u0128\x95\x02\u01E5\u01E7\x07{\x02\x02\u01E6\u01BE\x03" +
		"\x02\x02\x02\u01E6\u01C1\x03\x02\x02\x02\u01E6\u01C4\x03\x02\x02\x02\u01E6" +
		"\u01C7\x03\x02\x02\x02\u01E6\u01CA\x03\x02\x02\x02\u01E6\u01CD\x03\x02" +
		"\x02\x02\u01E6\u01D0\x03\x02\x02\x02\u01E6\u01D3\x03\x02\x02\x02\u01E6" +
		"\u01D6\x03\x02\x02\x02\u01E6\u01D9\x03\x02\x02\x02\u01E6\u01DC\x03\x02" +
		"\x02\x02\u01E6\u01DF\x03\x02\x02\x02\u01E6\u01E2\x03\x02\x02\x02\u01E6" +
		"\u01E5\x03\x02\x02\x02\u01E7\x11\x03\x02\x02\x02\u01E8\u01ED\x05\x16\f" +
		"\x02\u01E9\u01ED\x05\x1A\x0E\x02\u01EA\u01ED\x05\xA4S\x02\u01EB\u01ED" +
		"\x05\x0E\b\x02\u01EC\u01E8\x03\x02\x02\x02\u01EC\u01E9\x03\x02\x02\x02" +
		"\u01EC\u01EA\x03\x02\x02\x02\u01EC\u01EB\x03\x02\x02\x02\u01ED\x13\x03" +
		"\x02\x02\x02\u01EE\u01F0\t\x03\x02\x02\u01EF\u01F1\x05\u0128\x95\x02\u01F0" +
		"\u01EF\x03\x02\x02\x02\u01F0\u01F1\x03\x02\x02\x02\u01F1\u01F2\x03\x02" +
		"\x02\x02\u01F2\u0201\x05\xE6t\x02\u01F3\u01F4\x07\x04\x02\x02\u01F4\u01FB" +
		"\x05\xE6t\x02\u01F5\u01F7\x05\x10\t\x02\u01F6\u01F8\x05\xE2r\x02\u01F7" +
		"\u01F6\x03\x02\x02\x02\u01F7\u01F8\x03\x02\x02\x02\u01F8\u01FA\x03\x02" +
		"\x02\x02\u01F9\u01F5\x03\x02\x02\x02\u01FA\u01FD\x03\x02\x02\x02\u01FB" +
		"\u01F9\x03\x02\x02\x02\u01FB\u01FC\x03\x02\x02\x02\u01FC\u01FE\x03\x02" +
		"\x02\x02\u01FD\u01FB\x03\x02\x02\x02\u01FE\u01FF\x07\x05\x02\x02\u01FF" +
		"\u0200\x05\xE6t\x02\u0200\u0202\x03\x02\x02\x02\u0201\u01F3\x03\x02\x02" +
		"\x02\u0201\u0202\x03\x02\x02\x02\u0202\u0203\x03\x02\x02\x02\u0203\u0204" +
		"\x07\x06\x02\x02\u0204\u0211\x05\xE6t\x02\u0205\u020B\x05\x06\x04\x02" +
		"\u0206\u0207\x05\xE0q\x02\u0207\u0208\x05\x06\x04\x02\u0208\u020A\x03" +
		"\x02\x02\x02\u0209\u0206\x03\x02\x02\x02\u020A\u020D\x03\x02\x02\x02\u020B" +
		"\u0209\x03\x02\x02\x02\u020B\u020C\x03\x02\x02\x02\u020C\u020F\x03\x02" +
		"\x02\x02\u020D\u020B\x03\x02\x02\x02\u020E\u0210\x05\xE0q\x02\u020F\u020E" +
		"\x03\x02\x02\x02\u020F\u0210\x03\x02\x02\x02\u0210\u0212\x03\x02\x02\x02" +
		"\u0211\u0205\x03\x02\x02\x02\u0211\u0212\x03\x02\x02\x02\u0212\u0213\x03" +
		"\x02\x02\x02\u0213\u0214\x07\x07\x02\x02\u0214\x15\x03\x02\x02\x02\u0215" +
		"\u0216\x07y\x02\x02\u0216\u0217\x05\u011A\x8E\x02\u0217\u0226\x05\xE6" +
		"t\x02\u0218\u0219\x07\x04\x02\x02\u0219\u0220\x05\xE6t\x02\u021A\u021C" +
		"\x05\x18\r\x02\u021B\u021D\x05\xE2r\x02\u021C\u021B\x03\x02\x02\x02\u021C" +
		"\u021D\x03\x02\x02\x02\u021D\u021F\x03\x02\x02\x02\u021E\u021A\x03\x02" +
		"\x02\x02\u021F\u0222\x03\x02\x02\x02\u0220\u021E\x03\x02\x02\x02\u0220" +
		"\u0221\x03\x02\x02\x02\u0221\u0223\x03\x02\x02\x02\u0222\u0220\x03\x02" +
		"\x02\x02\u0223\u0224\x07\x05\x02\x02\u0224\u0225\x05\xE6t\x02\u0225\u0227" +
		"\x03\x02\x02\x02\u0226\u0218\x03\x02\x02\x02\u0226\u0227\x03\x02\x02\x02" +
		"\u0227\u0234\x03\x02\x02\x02\u0228\u0229\x07z\x02\x02\u0229\u022F\x05" +
		"\u011A\x8E\x02\u022A\u022B\x05\xE2r\x02\u022B\u022C\x05\u011A\x8E\x02" +
		"\u022C\u022E\x03\x02\x02\x02\u022D\u022A\x03\x02\x02\x02\u022E\u0231\x03" +
		"\x02\x02\x02\u022F\u022D\x03\x02\x02\x02\u022F\u0230\x03\x02\x02\x02\u0230" +
		"\u0232\x03\x02\x02\x02\u0231\u022F\x03\x02\x02\x02\u0232\u0233\x05\xE6" +
		"t\x02\u0233\u0235\x03\x02\x02\x02\u0234\u0228\x03\x02\x02\x02\u0234\u0235" +
		"\x03\x02\x02\x02\u0235\u0236\x03\x02\x02\x02\u0236\u0237\x07\x06\x02\x02" +
		"\u0237\u0244\x05\xE6t\x02\u0238\u023E\x05\x1A\x0E\x02\u0239\u023A\x05" +
		"\xE0q\x02\u023A\u023B\x05\x1A\x0E\x02\u023B\u023D\x03\x02\x02\x02\u023C" +
		"\u0239\x03\x02\x02\x02\u023D\u0240\x03\x02\x02\x02\u023E\u023C\x03\x02" +
		"\x02\x02\u023E\u023F\x03\x02\x02\x02\u023F\u0242\x03\x02\x02\x02\u0240" +
		"\u023E\x03\x02\x02\x02\u0241\u0243\x05\xE0q\x02\u0242\u0241\x03\x02\x02" +
		"\x02\u0242\u0243\x03\x02\x02\x02\u0243\u0245\x03\x02\x02\x02\u0244\u0238" +
		"\x03\x02\x02\x02\u0244\u0245\x03\x02\x02\x02\u0245\u0246\x03\x02\x02\x02" +
		"\u0246\u0247\x07\x07\x02\x02\u0247\x17\x03\x02\x02\x02\u0248\u0249\x07" +
		"\xA6\x02\x02\u0249\u024A\x07\b\x02\x02\u024A\u024D\x05\xDAn\x02\u024B" +
		"\u024D\x07\xB5\x02\x02\u024C\u0248\x03\x02\x02\x02\u024C\u024B\x03\x02" +
		"\x02\x02\u024D\x19\x03\x02\x02\x02\u024E\u0253\x05\x1C\x0F\x02\u024F\u0253" +
		"\x05*\x16\x02\u0250\u0253\x05\x1E\x10\x02\u0251\u0253\x05\x16\f\x02\u0252" +
		"\u024E\x03\x02\x02\x02\u0252\u024F\x03\x02\x02\x02\u0252\u0250\x03\x02" +
		"\x02\x02\u0252\u0251\x03\x02\x02\x02\u0253\x1B\x03\x02\x02\x02\u0254\u0255" +
		"\x07y\x02\x02\u0255\u0256\x05\xFE\x80\x02\u0256\u0263\x05\xE6t\x02\u0257" +
		"\u0258\x07z\x02\x02\u0258\u025E\x05\u011A\x8E\x02\u0259\u025A\x05\xE2" +
		"r\x02\u025A\u025B\x05\u011A\x8E\x02\u025B\u025D\x03\x02\x02\x02\u025C" +
		"\u0259\x03\x02\x02\x02\u025D\u0260\x03\x02\x02\x02\u025E\u025C\x03\x02" +
		"\x02\x02\u025E\u025F\x03\x02\x02\x02\u025F\u0261\x03\x02\x02\x02\u0260" +
		"\u025E\x03\x02\x02\x02\u0261\u0262\x05\xE6t\x02\u0262\u0264\x03\x02\x02" +
		"\x02\u0263\u0257\x03\x02\x02\x02\u0263\u0264\x03\x02\x02\x02\u0264\u0265" +
		"\x03\x02\x02\x02\u0265\u0266\x07\x06\x02\x02\u0266\u0273\x05\xE6t\x02" +
		"\u0267\u026D\x05\x06\x04\x02\u0268\u0269\x05\xE0q\x02\u0269\u026A\x05" +
		"\x06\x04\x02\u026A\u026C\x03\x02\x02\x02\u026B\u0268\x03\x02\x02\x02\u026C" +
		"\u026F\x03\x02\x02\x02\u026D\u026B\x03\x02\x02\x02\u026D\u026E\x03\x02" +
		"\x02\x02\u026E\u0271\x03\x02\x02\x02\u026F\u026D\x03\x02\x02\x02\u0270" +
		"\u0272\x05\xE0q\x02\u0271\u0270\x03\x02\x02\x02\u0271\u0272\x03\x02\x02" +
		"\x02\u0272\u0274\x03\x02\x02\x02\u0273\u0267\x03\x02\x02\x02\u0273\u0274" +
		"\x03\x02\x02\x02\u0274\u0275\x03\x02\x02\x02\u0275\u0276\x07\x07\x02\x02" +
		"\u0276\x1D\x03\x02\x02\x02\u0277\u0278\x07y\x02\x02\u0278\u0279\x05\xFE" +
		"\x80\x02\u0279\u027A\x05\xE6t\x02\u027A\u027B\x07\t\x02\x02\u027B\u027C" +
		"\x05\xE6t\x02\u027C\u0282\x05 \x11\x02\u027D\u027E\x05\xE2r\x02\u027E" +
		"\u027F\x05 \x11\x02\u027F\u0281\x03\x02\x02\x02\u0280\u027D\x03\x02\x02" +
		"\x02\u0281\u0284\x03\x02\x02\x02\u0282\u0280\x03\x02\x02\x02\u0282\u0283" +
		"\x03\x02\x02\x02\u0283\u0285\x03\x02\x02\x02\u0284\u0282\x03\x02\x02\x02" +
		"\u0285\u0286\x05\xE6t\x02\u0286\u028A\x07\n\x02\x02\u0287\u0288\x05\xE6" +
		"t\x02\u0288\u0289\x05\u012E\x98\x02\u0289\u028B\x03\x02\x02\x02\u028A" +
		"\u0287\x03\x02\x02\x02\u028A\u028B\x03\x02\x02\x02\u028B\u028C\x03\x02" +
		"\x02\x02\u028C\u028D\x05\xE6t\x02\u028D\u028E\x07\x06\x02\x02\u028E\u029B" +
		"\x05\xE6t\x02\u028F\u0295\x05\x06\x04\x02\u0290\u0291\x05\xE0q\x02\u0291" +
		"\u0292\x05\x06\x04\x02\u0292\u0294\x03\x02\x02\x02\u0293\u0290\x03\x02" +
		"\x02\x02\u0294\u0297\x03\x02\x02\x02\u0295\u0293\x03\x02\x02\x02\u0295" +
		"\u0296\x03\x02\x02\x02\u0296\u0299\x03\x02\x02\x02\u0297\u0295\x03\x02" +
		"\x02\x02\u0298\u029A\x05\xE0q\x02\u0299\u0298\x03\x02\x02\x02\u0299\u029A" +
		"\x03\x02\x02\x02\u029A\u029C\x03\x02\x02\x02\u029B\u028F\x03\x02\x02\x02" +
		"\u029B\u029C\x03\x02\x02\x02\u029C\u029D\x03\x02\x02\x02\u029D\u029E\x07" +
		"\x07\x02\x02\u029E\x1F\x03\x02\x02\x02\u029F\u02A1\x05\u012E\x98\x02\u02A0" +
		"\u029F\x03\x02\x02\x02\u02A0\u02A1\x03\x02\x02\x02\u02A1\u02A2\x03\x02" +
		"\x02\x02\u02A2\u02A3\x05\u0128\x95\x02\u02A3!\x03\x02\x02\x02\u02A4\u02A5" +
		"\x07\xB1\x02\x02\u02A5\u02A6\x05<\x1F\x02\u02A6#\x03\x02\x02\x02\u02A7" +
		"\u02AC\x07\xB4\x02\x02\u02A8\u02A9\x07\t\x02\x02\u02A9\u02AA\x05\xFE\x80" +
		"\x02\u02AA\u02AB\x07\n\x02\x02\u02AB\u02AD\x03\x02\x02\x02\u02AC\u02A8" +
		"\x03\x02\x02\x02\u02AC\u02AD\x03\x02\x02\x02\u02AD\u02AF\x03\x02\x02\x02" +
		"\u02AE\u02B0\x05<\x1F\x02\u02AF\u02AE\x03\x02\x02\x02\u02AF\u02B0\x03" +
		"\x02\x02\x02\u02B0%\x03\x02\x02\x02\u02B1\u02B7\x07\xB2\x02\x02\u02B2" +
		"\u02B3\x07\xB4\x02\x02\u02B3\u02B4\x07\x04\x02\x02\u02B4\u02B5\t\x06\x02" +
		"\x02\u02B5\u02B7\x07\x05\x02\x02\u02B6\u02B1\x03\x02\x02\x02\u02B6\u02B2" +
		"\x03\x02\x02\x02\u02B7\'\x03\x02\x02\x02\u02B8\u02C5\x07\xB3\x02\x02\u02B9" +
		"\u02BA\x07\xB4\x02\x02\u02BA\u02BB\x07\x04\x02\x02\u02BB\u02BC\t\x06\x02" +
		"\x02\u02BC\u02BD\x07\x05\x02\x02\u02BD\u02C5\x07\v\x02\x02\u02BE\u02BF" +
		"\x07\xB4\x02\x02\u02BF\u02C0\x07\t\x02\x02\u02C0\u02C1\x05\xFE\x80\x02" +
		"\u02C1\u02C2\x07\n\x02\x02\u02C2\u02C3\x07\v\x02\x02\u02C3\u02C5\x03\x02" +
		"\x02\x02\u02C4\u02B8\x03\x02\x02\x02\u02C4\u02B9\x03\x02\x02\x02\u02C4" +
		"\u02BE\x03\x02\x02\x02\u02C5)\x03\x02\x02\x02\u02C6\u02C7\x07y\x02\x02" +
		"\u02C7\u02CB\x05\xFE\x80\x02\u02C8\u02C9\x07y\x02\x02\u02C9\u02CB\x05" +
		"\u011A\x8E\x02\u02CA\u02C6\x03\x02\x02\x02\u02CA\u02C8\x03\x02\x02\x02" +
		"\u02CB+\x03\x02\x02\x02\u02CC\u02CD\x05.\x18\x02\u02CD-\x03\x02\x02\x02" +
		"\u02CE\u02CF\x07y\x02\x02\u02CF\u02D0\x05\xFE\x80\x02\u02D0\u02D1\x07" +
		"\t\x02\x02\u02D1\u02D2\x05\xE6t\x02\u02D2\u02D8\x050\x19\x02\u02D3\u02D4" +
		"\x05\xE2r\x02\u02D4\u02D5\x050\x19\x02\u02D5\u02D7\x03\x02\x02\x02\u02D6" +
		"\u02D3\x03\x02\x02\x02\u02D7\u02DA\x03\x02\x02\x02\u02D8\u02D6\x03\x02" +
		"\x02\x02\u02D8\u02D9\x03\x02\x02\x02\u02D9\u02DB\x03\x02\x02\x02\u02DA" +
		"\u02D8\x03\x02\x02\x02\u02DB\u02DC\x05\xE6t\x02\u02DC\u02DD\x07\n\x02" +
		"\x02\u02DD/\x03\x02\x02\x02\u02DE\u02DF\x05<\x1F\x02\u02DF1\x03\x02\x02" +
		"\x02\u02E0\u02E2\x07N\x02\x02\u02E1\u02E0\x03\x02\x02\x02\u02E1\u02E2" +
		"\x03\x02\x02\x02\u02E2\u02E3\x03\x02\x02\x02\u02E3\u02E4\x05\xE6t\x02" +
		"\u02E4\u02E5\x07\x06\x02\x02\u02E5\u02EB\x05\xE6t\x02\u02E6\u02E7\x05" +
		"8\x1D\x02\u02E7\u02E8\x05\xE4s\x02\u02E8\u02EA\x03\x02\x02\x02\u02E9\u02E6" +
		"\x03\x02\x02\x02\u02EA\u02ED\x03\x02\x02\x02\u02EB\u02E9\x03\x02\x02\x02" +
		"\u02EB\u02EC\x03\x02\x02\x02\u02EC\u02EE\x03\x02\x02\x02\u02ED\u02EB\x03" +
		"\x02\x02\x02\u02EE\u02EF\x07\x07\x02\x02\u02EF\u02F5\x05\xE6t\x02\u02F0" +
		"\u02F1\x054\x1B\x02\u02F1\u02F2\x05\xE6t\x02\u02F2\u02F4\x03\x02\x02\x02" +
		"\u02F3\u02F0\x03\x02\x02\x02\u02F4\u02F7\x03\x02\x02\x02\u02F5\u02F3\x03" +
		"\x02\x02\x02\u02F5\u02F6\x03\x02\x02\x02\u02F6\u02FA\x03\x02\x02\x02\u02F7" +
		"\u02F5\x03\x02\x02\x02\u02F8\u02FB\x056\x1C\x02\u02F9\u02FB\x054\x1B\x02" +
		"\u02FA\u02F8\x03\x02\x02\x02\u02FA\u02F9\x03\x02\x02\x02\u02FB\u02FC\x03" +
		"\x02\x02\x02\u02FC\u0302\x05\xE6t\x02\u02FD\u02FE\x054\x1B\x02\u02FE\u02FF" +
		"\x05\xE6t\x02\u02FF\u0301\x03\x02\x02\x02\u0300\u02FD\x03\x02\x02\x02" +
		"\u0301\u0304\x03\x02\x02\x02\u0302\u0300\x03\x02\x02\x02\u0302\u0303\x03" +
		"\x02\x02\x02\u0303\u0313\x03\x02\x02\x02\u0304\u0302\x03\x02\x02\x02\u0305" +
		"\u0306\x07N\x02\x02\u0306\u0307\x05\xE6t\x02\u0307\u0308\x07\x06\x02\x02" +
		"\u0308\u030C\x05\xE6t\x02\u0309\u030A\x058\x1D\x02\u030A\u030B\x05\xE4" +
		"s\x02\u030B\u030D\x03\x02\x02\x02\u030C\u0309\x03\x02\x02\x02\u030D\u030E" +
		"\x03\x02\x02\x02\u030E\u030C\x03\x02\x02\x02\u030E\u030F\x03\x02\x02\x02" +
		"\u030F\u0310\x03\x02\x02\x02\u0310\u0311\x07\x07\x02\x02\u0311\u0313\x03" +
		"\x02\x02\x02\u0312\u02E1\x03\x02\x02\x02\u0312\u0305\x03\x02\x02\x02\u0313" +
		"3\x03\x02\x02\x02\u0314\u0319\x07\f\x02\x02\u0315\u0319\x07P\x02\x02\u0316" +
		"\u0317\x07P\x02\x02\u0317\u0319\x07j\x02\x02\u0318\u0314\x03\x02\x02\x02" +
		"\u0318\u0315\x03\x02\x02\x02\u0318\u0316\x03\x02\x02\x02\u0319\u031A\x03" +
		"\x02\x02\x02\u031A\u0358\x05R*\x02\u031B\u0321\x07\r\x02\x02\u031C\u031D" +
		"\x07\x0E\x02\x02\u031D\u0321\x07P\x02\x02\u031E\u031F\x07P\x02\x02\u031F" +
		"\u0321\x07k\x02\x02\u0320\u031B\x03\x02\x02\x02\u0320\u031C\x03\x02\x02" +
		"\x02\u0320\u031E\x03\x02\x02\x02\u0321\u0322\x03\x02\x02\x02\u0322\u0358" +
		"\x05R*\x02\u0323\u0328\x07\f\x02\x02\u0324\u0328\x07P\x02\x02\u0325\u0326" +
		"\x07P\x02\x02\u0326\u0328\x07j\x02\x02\u0327\u0323\x03\x02\x02\x02\u0327" +
		"\u0324\x03\x02\x02\x02\u0327\u0325\x03\x02\x02\x02\u0328\u0329\x03\x02" +
		"\x02\x02\u0329\u0330\x05<\x1F\x02\u032A\u032C\x05\u0120\x91\x02\u032B" +
		"\u032D\x07\x0F\x02\x02\u032C\u032B\x03\x02\x02\x02\u032C\u032D\x03\x02" +
		"\x02\x02\u032D\u032E\x03\x02\x02\x02\u032E\u032F\x05\xDCo\x02\u032F\u0331" +
		"\x03\x02\x02\x02\u0330\u032A\x03\x02\x02\x02\u0330\u0331\x03\x02\x02\x02" +
		"\u0331\u0358\x03\x02\x02\x02\u0332\u0338\x07\r\x02\x02\u0333\u0334\x07" +
		"\x0E\x02\x02\u0334\u0338\x07P\x02\x02\u0335\u0336\x07P\x02\x02\u0336\u0338" +
		"\x07k\x02\x02\u0337\u0332\x03\x02\x02\x02\u0337\u0333\x03\x02\x02\x02" +
		"\u0337\u0335\x03\x02\x02\x02\u0338\u0339\x03\x02\x02\x02\u0339\u0340\x05" +
		"<\x1F\x02\u033A\u033C\x05\u0120\x91\x02\u033B\u033D\x07\x0F\x02\x02\u033C" +
		"\u033B\x03\x02\x02\x02\u033C\u033D\x03\x02\x02\x02\u033D\u033E\x03\x02" +
		"\x02\x02\u033E\u033F\x05\xDCo\x02\u033F\u0341\x03\x02\x02\x02\u0340\u033A" +
		"\x03\x02\x02\x02\u0340\u0341\x03\x02\x02\x02\u0341\u0358\x03\x02\x02\x02" +
		"\u0342\u0347\x07\f\x02\x02\u0343\u0347\x07P\x02\x02\u0344\u0345\x07P\x02" +
		"\x02\u0345\u0347\x07j\x02\x02\u0346\u0342\x03\x02\x02\x02\u0346\u0343" +
		"\x03\x02\x02\x02\u0346\u0344\x03\x02\x02\x02\u0347\u0348\x03\x02\x02\x02" +
		"\u0348\u034A\x05b2\x02\u0349\u034B\t\x07\x02\x02\u034A\u0349\x03\x02\x02" +
		"\x02\u034A\u034B\x03\x02\x02\x02\u034B\u0358\x03\x02\x02\x02\u034C\u0352" +
		"\x07\r\x02\x02\u034D\u034E\x07\x0E\x02\x02\u034E\u0352\x07P\x02\x02\u034F" +
		"\u0350\x07P\x02\x02\u0350\u0352\x07k\x02\x02\u0351\u034C\x03\x02\x02\x02" +
		"\u0351\u034D\x03\x02\x02\x02\u0351\u034F\x03\x02\x02\x02\u0352\u0353\x03" +
		"\x02\x02\x02\u0353\u0355\x05b2\x02\u0354\u0356\t\x07\x02\x02\u0355\u0354" +
		"\x03\x02\x02\x02\u0355\u0356\x03\x02\x02\x02\u0356\u0358\x03\x02\x02\x02" +
		"\u0357\u0318\x03\x02\x02\x02\u0357\u0320\x03\x02\x02\x02\u0357\u0327\x03" +
		"\x02\x02\x02\u0357\u0337\x03\x02\x02\x02\u0357\u0346\x03\x02\x02\x02\u0357" +
		"\u0351\x03\x02\x02\x02\u03585\x03\x02\x02\x02\u0359\u035A\t\x02\x02\x02" +
		"\u035A\u035B\x05\xE6t\x02\u035B\u035C\x05\b\x05\x02\u035C\u037A\x03\x02" +
		"\x02\x02\u035D\u035E\t\x02\x02\x02\u035E\u035F\x05\xE6t\x02\u035F\u0360" +
		"\x05\x1C\x0F\x02\u0360\u037A\x03\x02\x02\x02\u0361\u0362\t\x02\x02\x02" +
		"\u0362\u0364\x05\xE6t\x02\u0363\u0365\x07y\x02\x02\u0364\u0363\x03\x02" +
		"\x02\x02\u0364\u0365\x03\x02\x02\x02\u0365\u0366\x03\x02\x02\x02\u0366" +
		"\u0367\x05\xE6t\x02\u0367\u0368\x07\x06\x02\x02\u0368\u0375\x05\xE6t\x02" +
		"\u0369\u036F\x05\x06\x04\x02\u036A\u036B\x05\xE0q\x02\u036B\u036C\x05" +
		"\x06\x04\x02\u036C\u036E\x03\x02\x02\x02\u036D\u036A\x03\x02\x02\x02\u036E" +
		"\u0371\x03\x02\x02\x02\u036F\u036D\x03\x02\x02\x02\u036F\u0370\x03\x02" +
		"\x02\x02\u0370\u0373\x03\x02\x02\x02\u0371\u036F\x03\x02\x02\x02\u0372" +
		"\u0374\x05\xE0q\x02\u0373\u0372\x03\x02\x02\x02\u0373\u0374\x03\x02\x02" +
		"\x02\u0374\u0376\x03\x02\x02\x02\u0375\u0369\x03\x02\x02\x02\u0375\u0376" +
		"\x03\x02\x02\x02\u0376\u0377\x03\x02\x02\x02\u0377\u0378\x07\x07\x02\x02" +
		"\u0378\u037A\x03\x02\x02\x02\u0379\u0359\x03\x02\x02\x02\u0379\u035D\x03" +
		"\x02\x02\x02\u0379\u0361\x03\x02\x02\x02\u037A7\x03\x02\x02\x02\u037B" +
		"\u037C\x07Q\x02\x02\u037C\u03E6\x07\xDE\x02\x02\u037D\u037E\x07R\x02\x02" +
		"\u037E\u03E6\t\b\x02\x02\u037F\u0380\x07U\x02\x02\u0380\u03E6\x05\u0106" +
		"\x84\x02\u0381\u0382\x07V\x02\x02\u0382\u03E6\x05\u013E\xA0\x02\u0383" +
		"\u0384\x07W\x02\x02\u0384\u03E6\x05\u013E\xA0\x02\u0385\u0386\x07X\x02" +
		"\x02\u0386\u03E6\x05\xEAv\x02\u0387\u0389\x07X\x02\x02\u0388\u038A\x07" +
		"d\x02\x02\u0389\u0388\x03\x02\x02\x02\u0389\u038A\x03\x02\x02\x02\u038A" +
		"\u038B\x03\x02\x02\x02\u038B\u038C\x05\u013E\xA0\x02\u038C\u038D\t\b\x02" +
		"\x02\u038D\u03E6\x03\x02\x02\x02\u038E\u038F\t\t\x02\x02\u038F\u03E6\x05" +
		"\xEAv\x02\u0390\u0392\t\t\x02\x02\u0391\u0393\x07V\x02\x02\u0392\u0391" +
		"\x03\x02\x02\x02\u0392\u0393\x03\x02\x02\x02\u0393\u0394\x03\x02\x02\x02" +
		"\u0394\u03E6\x05\u013E\xA0\x02\u0395\u0396\t\n\x02\x02\u0396\u03E6\x05" +
		"\xECw\x02\u0397\u0399\t\n\x02\x02\u0398\u039A\x07V\x02\x02\u0399\u0398" +
		"\x03\x02\x02\x02\u0399\u039A\x03\x02\x02\x02\u039A\u039B\x03\x02\x02\x02" +
		"\u039B\u03E6\x05\u013E\xA0\x02\u039C\u039E\t\v\x02\x02\u039D\u039C\x03" +
		"\x02\x02\x02\u039D\u039E\x03\x02\x02\x02\u039E\u03A0\x03\x02\x02\x02\u039F" +
		"\u03A1\x07d\x02\x02\u03A0\u039F\x03\x02\x02\x02\u03A0\u03A1\x03\x02\x02" +
		"\x02\u03A1\u03A2\x03\x02\x02\x02\u03A2\u03E6\x05\u013E\xA0\x02\u03A3\u03A5" +
		"\t\v\x02\x02\u03A4\u03A3\x03\x02\x02\x02\u03A4\u03A5\x03\x02\x02\x02\u03A5" +
		"\u03A7\x03\x02\x02\x02\u03A6\u03A8\x07e\x02\x02\u03A7\u03A6\x03\x02\x02" +
		"\x02\u03A7\u03A8\x03\x02\x02\x02\u03A8\u03A9\x03\x02\x02\x02\u03A9\u03AA" +
		"\x05P)\x02\u03AA\u03AB\x07\xE0\x02\x02\u03AB\u03AC\x05P)\x02\u03AC\u03E6" +
		"\x03\x02\x02\x02\u03AD\u03AF\t\v\x02\x02\u03AE\u03AD\x03\x02\x02\x02\u03AE" +
		"\u03AF\x03\x02\x02\x02\u03AF\u03B1\x03\x02\x02\x02\u03B0\u03B2\x07e\x02" +
		"\x02\u03B1\u03B0\x03\x02\x02\x02\u03B1\u03B2\x03\x02\x02\x02\u03B2\u03B3" +
		"\x03\x02\x02\x02\u03B3\u03B9\x05P)\x02\u03B4\u03B6\x07i\x02\x02\u03B5" +
		"\u03B4\x03\x02\x02\x02\u03B5\u03B6\x03\x02\x02\x02\u03B6\u03B7\x03\x02" +
		"\x02\x02\u03B7\u03BA\x05\u0138\x9D\x02\u03B8\u03BA\x05:\x1E\x02\u03B9" +
		"\u03B5\x03\x02\x02\x02\u03B9\u03B8\x03\x02\x02\x02\u03BA\u03E6\x03\x02" +
		"\x02\x02\u03BB\u03BD\t\v\x02\x02\u03BC\u03BB\x03\x02\x02\x02\u03BC\u03BD" +
		"\x03\x02\x02\x02\u03BD\u03BF\x03\x02\x02\x02\u03BE\u03C0\x07g\x02\x02" +
		"\u03BF\u03BE\x03\x02\x02\x02\u03BF\u03C0\x03\x02\x02\x02\u03C0\u03C1\x03" +
		"\x02\x02\x02\u03C1\u03C2\x05\xEAv\x02\u03C2\u03C3\x05\xF2z\x02\u03C3\u03E6" +
		"\x03\x02\x02\x02\u03C4\u03C6\t\v\x02\x02\u03C5\u03C4\x03\x02\x02\x02\u03C5" +
		"\u03C6\x03\x02\x02\x02\u03C6\u03C8\x03\x02\x02\x02\u03C7\u03C9\x07h\x02" +
		"\x02\u03C8\u03C7\x03\x02\x02\x02\u03C8\u03C9\x03\x02\x02\x02\u03C9\u03CA" +
		"\x03\x02\x02\x02\u03CA\u03CB\x05\xEAv\x02\u03CB\u03CC\x05\xEAv\x02\u03CC" +
		"\u03CD\x05\xEAv\x02\u03CD\u03CE\t\f\x02\x02\u03CE\u03E6\x03\x02\x02\x02" +
		"\u03CF\u03D1\t\v\x02\x02\u03D0\u03CF\x03\x02\x02\x02\u03D0\u03D1\x03\x02" +
		"\x02\x02\u03D1\u03D3\x03\x02\x02\x02\u03D2\u03D4\x07t\x02\x02\u03D3\u03D2" +
		"\x03\x02\x02\x02\u03D3\u03D4\x03\x02\x02\x02\u03D4\u03D5\x03\x02\x02\x02" +
		"\u03D5\u03E6\x05<\x1F\x02\u03D6\u03D8\t\v\x02\x02\u03D7\u03D6\x03\x02" +
		"\x02\x02\u03D7\u03D8\x03\x02\x02\x02\u03D8\u03D9\x03\x02\x02\x02\u03D9" +
		"\u03DA\x07a\x02\x02\u03DA\u03DB\x05\xEAv\x02\u03DB\u03DC\x05\u0104\x83" +
		"\x02\u03DC\u03E6\x03\x02\x02\x02\u03DD\u03DF\t\v\x02\x02\u03DE\u03DD\x03" +
		"\x02\x02\x02\u03DE\u03DF\x03\x02\x02\x02\u03DF\u03E1\x03\x02\x02\x02\u03E0" +
		"\u03E2\x07f\x02\x02\u03E1\u03E0\x03\x02\x02\x02\u03E1\u03E2\x03\x02\x02" +
		"\x02\u03E2\u03E3\x03\x02\x02\x02\u03E3\u03E6\x05\u0108\x85\x02\u03E4\u03E6" +
		"\x054\x1B\x02\u03E5\u037B\x03\x02\x02\x02\u03E5\u037D\x03\x02\x02\x02" +
		"\u03E5\u037F\x03\x02\x02\x02\u03E5\u0381\x03\x02\x02\x02\u03E5\u0383\x03" +
		"\x02\x02\x02\u03E5\u0385\x03\x02\x02\x02\u03E5\u0387\x03\x02\x02\x02\u03E5" +
		"\u038E\x03\x02\x02\x02\u03E5\u0390\x03\x02\x02\x02\u03E5\u0395\x03\x02" +
		"\x02\x02\u03E5\u0397\x03\x02\x02\x02\u03E5\u039D\x03\x02\x02\x02\u03E5" +
		"\u03A4\x03\x02\x02\x02\u03E5\u03AE\x03\x02\x02\x02\u03E5\u03BC\x03\x02" +
		"\x02\x02\u03E5\u03C5\x03\x02\x02\x02\u03E5\u03D0\x03\x02\x02\x02\u03E5" +
		"\u03D7\x03\x02\x02\x02\u03E5\u03DE\x03\x02\x02\x02\u03E5\u03E4\x03\x02" +
		"\x02\x02\u03E69\x03\x02\x02\x02\u03E7\u03E8\x07\xE0\x02\x02\u03E8\u03E9" +
		"\x07C\x02\x02\u03E9;\x03\x02\x02\x02\u03EA\u03EB\x07M\x02\x02\u03EB\u03EC" +
		"\x07\x10\x02\x02\u03EC\u03F2\x05\xB8]\x02\u03ED\u03F2\x05> \x02\u03EE" +
		"\u03F2\x05\xB6\\\x02\u03EF\u03F2\x05@!\x02\u03F0\u03F2\x05B\"\x02\u03F1" +
		"\u03EA\x03\x02\x02\x02\u03F1\u03ED\x03\x02\x02\x02\u03F1\u03EE\x03\x02" +
		"\x02\x02\u03F1\u03EF\x03\x02\x02\x02\u03F1\u03F0\x03\x02\x02\x02\u03F2" +
		"=\x03\x02\x02\x02\u03F3\u03F4\x05\u0100\x81\x02\u03F4\u03F5\x07\x10\x02" +
		"\x02\u03F5\u03F6\x05\xB8]\x02\u03F6\u03FC\x03\x02\x02\x02\u03F7\u03F8" +
		"\x07u\x02\x02\u03F8\u03F9\x05\u0100\x81\x02\u03F9\u03FA\x05\xB8]\x02\u03FA" +
		"\u03FC\x03\x02\x02\x02\u03FB\u03F3\x03\x02\x02\x02\u03FB\u03F7\x03\x02" +
		"\x02\x02\u03FC?\x03\x02\x02\x02\u03FD\u03FE\x05\u013E\xA0\x02\u03FE\u03FF" +
		"\x07\x10\x02\x02\u03FF\u0400\x05\xB8]\x02\u0400\u0406\x03\x02\x02\x02" +
		"\u0401\u0402\x07d\x02\x02\u0402\u0403\x05\u013E\xA0\x02\u0403\u0404\x05" +
		"\xB8]\x02\u0404\u0406\x03\x02\x02\x02\u0405\u03FD\x03\x02\x02\x02\u0405" +
		"\u0401\x03\x02\x02\x02\u0406A\x03\x02\x02\x02\u0407\u0408\x05\xEAv\x02" +
		"\u0408\u0409\x07\x10\x02\x02\u0409\u040A\x05\xB8]\x02\u040A\u0410\x03" +
		"\x02\x02\x02\u040B\u040C\x07g\x02\x02\u040C\u040D\x05\xEAv\x02\u040D\u040E" +
		"\x05\xB8]\x02\u040E\u0410\x03\x02\x02\x02\u040F\u0407\x03\x02\x02\x02" +
		"\u040F\u040B\x03\x02\x02\x02\u0410C\x03\x02\x02\x02\u0411\u0412\x05\u0100" +
		"\x81\x02\u0412\u0413\x07\x11\x02\x02\u0413\u0414\x05\xB2Z\x02\u0414\u041E" +
		"\x03\x02\x02\x02\u0415\u0416\x05\u013E\xA0\x02\u0416\u0417\x07\x11\x02" +
		"\x02\u0417\u0418\x05\xB2Z\x02\u0418\u041E\x03\x02\x02\x02\u0419\u041A" +
		"\x05\xEAv\x02\u041A\u041B\x07\x11\x02\x02\u041B\u041C\x05\xB2Z\x02\u041C" +
		"\u041E\x03\x02\x02\x02\u041D\u0411\x03\x02\x02\x02\u041D\u0415\x03\x02" +
		"\x02\x02\u041D\u0419\x03\x02\x02\x02\u041EE\x03\x02\x02\x02\u041F\u0424" +
		"\x05<\x1F\x02\u0420\u0422\x07\x0F\x02\x02\u0421\u0420\x03\x02\x02\x02" +
		"\u0421\u0422\x03\x02\x02\x02\u0422\u0423\x03\x02\x02\x02\u0423\u0425\x05" +
		"\xDCo\x02\u0424\u0421\x03\x02\x02\x02\u0424\u0425\x03\x02\x02\x02\u0425" +
		"\u045B\x03\x02\x02\x02\u0426\u045B\x05D#\x02\u0427\u0428\x05<\x1F\x02" +
		"\u0428\u0429\x07\x11\x02\x02\u0429\u042A\x05\xB2Z\x02\u042A\u045B\x03" +
		"\x02\x02\x02\u042B\u042C\x05<\x1F\x02\u042C\u042D\x07\x11\x02\x02\u042D" +
		"\u042E\x05H%\x02\u042E\u045B\x03\x02\x02\x02\u042F\u0431\x05\u012E\x98" +
		"\x02\u0430\u042F\x03\x02\x02\x02\u0430\u0431\x03\x02\x02\x02\u0431\u0432" +
		"\x03\x02\x02\x02\u0432\u0433\x05<\x1F\x02\u0433\u0434\x07\b\x02\x02\u0434" +
		"\u0435\x05\xB2Z\x02\u0435\u045B\x03\x02\x02\x02\u0436\u0438\x05\u012E" +
		"\x98\x02\u0437\u0436\x03\x02\x02\x02\u0437\u0438\x03\x02\x02\x02\u0438" +
		"\u0439\x03\x02\x02\x02\u0439\u043A\x05<\x1F\x02\u043A\u043B\x07\b\x02" +
		"\x02\u043B\u043C\x05H%\x02\u043C\u045B\x03\x02\x02\x02\u043D\u043E\x05" +
		"<\x1F\x02\u043E\u043F\x07\x12\x02\x02\u043F\u0440\x05\xB2Z\x02\u0440\u045B" +
		"\x03\x02\x02\x02\u0441\u0442\x05<\x1F\x02\u0442\u0443\x07\x12\x02\x02" +
		"\u0443\u0444\x05H%\x02\u0444\u045B\x03\x02\x02\x02\u0445\u0446\x05<\x1F" +
		"\x02\u0446\u0447\x07\x13\x02\x02\u0447\u0448\x05\xB2Z\x02\u0448\u045B" +
		"\x03\x02\x02\x02\u0449\u044A\x05<\x1F\x02\u044A\u044B\x07\x13\x02\x02" +
		"\u044B\u044C\x05H%\x02\u044C\u045B\x03\x02\x02\x02\u044D\u044E\x05<\x1F" +
		"\x02\u044E\u044F\x07\x12\x02\x02\u044F\u0450\x07C\x02\x02\u0450\u0451" +
		"\x05\xB2Z\x02\u0451\u045B\x03\x02\x02\x02\u0452\u0453\x05<\x1F\x02\u0453" +
		"\u0454\x07\x12\x02\x02\u0454\u0455\x07C\x02\x02\u0455\u0456\x05H%\x02" +
		"\u0456\u045B\x03\x02\x02\x02\u0457\u0458\x05<\x1F\x02\u0458\u0459\x07" +
		"x\x02\x02\u0459\u045B\x03\x02\x02\x02\u045A\u041F\x03\x02\x02\x02\u045A" +
		"\u0426\x03\x02\x02\x02\u045A\u0427\x03\x02\x02\x02\u045A\u042B\x03\x02" +
		"\x02\x02\u045A\u0430\x03\x02\x02\x02\u045A\u0437\x03\x02\x02\x02\u045A" +
		"\u043D\x03\x02\x02\x02\u045A\u0441\x03";
	private static readonly _serializedATNSegment3: string =
		"\x02\x02\x02\u045A\u0445\x03\x02\x02\x02\u045A\u0449\x03\x02\x02\x02\u045A" +
		"\u044D\x03\x02\x02\x02\u045A\u0452\x03\x02\x02\x02\u045A\u0457\x03\x02" +
		"\x02\x02\u045BG\x03\x02\x02\x02\u045C\u045F\x05<\x1F\x02\u045D\u045F\x05" +
		".\x18\x02\u045E\u045C\x03\x02\x02\x02\u045E\u045D\x03\x02\x02\x02\u045F" +
		"I\x03\x02\x02\x02\u0460\u0461\x07t\x02\x02\u0461\u0462\x05\xE6t\x02\u0462" +
		"\u0463\x07\x06\x02\x02\u0463\u0470\x05\xE6t\x02\u0464\u046A\x05F$\x02" +
		"\u0465\u0466\x05\xE0q\x02\u0466\u0467\x05F$\x02\u0467\u0469\x03\x02\x02" +
		"\x02\u0468\u0465\x03\x02\x02\x02\u0469\u046C\x03\x02\x02\x02\u046A\u0468" +
		"\x03\x02\x02\x02\u046A\u046B\x03\x02\x02\x02\u046B\u046E\x03\x02\x02\x02" +
		"\u046C\u046A\x03\x02\x02\x02\u046D\u046F\x05\xE0q\x02\u046E\u046D\x03" +
		"\x02\x02\x02\u046E\u046F\x03\x02\x02\x02\u046F\u0471\x03\x02\x02\x02\u0470" +
		"\u0464\x03\x02\x02\x02\u0470\u0471\x03\x02\x02\x02\u0471\u0472\x03\x02" +
		"\x02\x02\u0472\u0473\x07\x07\x02\x02\u0473\u0486\x03\x02\x02\x02\u0474" +
		"\u0475\x07t\x02\x02\u0475\u0478\x05\u0100\x81\x02\u0476\u0477\x07\x10" +
		"\x02\x02\u0477\u0479\x05\xB8]\x02\u0478\u0476\x03\x02\x02\x02\u0478\u0479" +
		"\x03\x02\x02\x02\u0479\u047A\x03\x02\x02\x02\u047A\u047B\x05\xE6t\x02" +
		"\u047B\u047C\x07\x06\x02\x02\u047C\u0480\x05\xE6t\x02\u047D\u047F\x05" +
		"F$\x02\u047E\u047D\x03\x02\x02\x02\u047F\u0482\x03\x02\x02\x02\u0480\u047E" +
		"\x03\x02\x02\x02\u0480\u0481\x03\x02\x02\x02\u0481\u0483\x03\x02\x02\x02" +
		"\u0482\u0480\x03\x02\x02\x02\u0483\u0484\x07\x07\x02\x02\u0484\u0486\x03" +
		"\x02\x02\x02\u0485\u0460\x03\x02\x02\x02\u0485\u0474\x03\x02\x02\x02\u0486" +
		"K\x03\x02\x02\x02\u0487\u04D0\x05P)\x02\u0488\u0489\x05P)\x02\u0489\u048A" +
		"\x07\x14\x02\x02\u048A\u048B\x07C\x02\x02\u048B\u04D0\x03\x02\x02\x02" +
		"\u048C\u048D\x05P)\x02\u048D\u048E\x07\x15\x02\x02\u048E\u048F\x07C\x02" +
		"\x02\u048F\u04D0\x03\x02\x02\x02\u0490\u0491\x05P)\x02\u0491\u0492\x07" +
		"\b\x02\x02\u0492\u0493\x07C\x02\x02\u0493\u04D0\x03\x02\x02\x02\u0494" +
		"\u0495\x05P)\x02\u0495\u0496\x07\x16\x02\x02\u0496\u0497\x07C\x02\x02" +
		"\u0497\u04D0\x03\x02\x02\x02\u0498\u0499\x05P)\x02\u0499\u049A\x07\x17" +
		"\x02\x02\u049A\u049B\x07C\x02\x02\u049B\u04D0\x03\x02\x02\x02\u049C\u049D" +
		"\x05P)\x02\u049D\u049E\x07\x18\x02\x02\u049E\u049F\x07C\x02\x02\u049F" +
		"\u04D0\x03\x02\x02\x02\u04A0\u04A1\x05P)\x02\u04A1\u04A2\x07\x14\x02\x02" +
		"\u04A2\u04A3\x05P)\x02\u04A3\u04D0\x03\x02\x02\x02\u04A4\u04A5\x05P)\x02" +
		"\u04A5\u04A6\x07\x15\x02\x02\u04A6\u04A7\x05P)\x02\u04A7\u04D0\x03\x02" +
		"\x02\x02\u04A8\u04A9\x05P)\x02\u04A9\u04AA\x07\x16\x02\x02\u04AA\u04AB" +
		"\x05P)\x02\u04AB\u04D0\x03\x02\x02\x02\u04AC\u04AD\x05P)\x02\u04AD\u04AE" +
		"\x07\x17\x02\x02\u04AE\u04AF\x05P)\x02\u04AF\u04D0\x03\x02\x02\x02\u04B0" +
		"\u04B1\x05P)\x02\u04B1\u04B2\x07\x18\x02\x02\u04B2\u04B3\x05P)\x02\u04B3" +
		"\u04D0\x03\x02\x02\x02\u04B4\u04B5\x05P)\x02\u04B5\u04B6\x07\x19\x02\x02" +
		"\u04B6\u04B7\x05P)\x02\u04B7\u04D0\x03\x02\x02\x02\u04B8\u04B9\x05P)\x02" +
		"\u04B9\u04BA\x07\x1A\x02\x02\u04BA\u04BB\x05P)\x02\u04BB\u04D0\x03\x02" +
		"\x02\x02\u04BC\u04BD\x05P)\x02\u04BD\u04BE\x07\x1B\x02\x02\u04BE\u04BF" +
		"\x05P)\x02\u04BF\u04D0\x03\x02\x02\x02\u04C0\u04C1\x05P)\x02\u04C1\u04C2" +
		"\x07\b\x02\x02\u04C2\u04C3\x05P)\x02\u04C3\u04D0\x03\x02\x02\x02\u04C4" +
		"\u04C5\x05P)\x02\u04C5\u04C6\x07v\x02\x02\u04C6\u04D0\x03\x02\x02\x02" +
		"\u04C7\u04C8\x05P)\x02\u04C8\u04C9\x07p\x02\x02\u04C9\u04D0\x03\x02\x02" +
		"\x02\u04CA\u04CB\x05P)\x02\u04CB\u04CC\x07\x1C\x02\x02\u04CC\u04CD\x05" +
		"\xE6t\x02\u04CD\u04CE\x05N(\x02\u04CE\u04D0\x03\x02\x02\x02\u04CF\u0487" +
		"\x03\x02\x02\x02\u04CF\u0488\x03\x02\x02\x02\u04CF\u048C\x03\x02\x02\x02" +
		"\u04CF\u0490\x03\x02\x02\x02\u04CF\u0494\x03\x02\x02\x02\u04CF\u0498\x03" +
		"\x02\x02\x02\u04CF\u049C\x03\x02\x02\x02\u04CF\u04A0\x03\x02\x02\x02\u04CF" +
		"\u04A4\x03\x02\x02\x02\u04CF\u04A8\x03\x02\x02\x02\u04CF\u04AC\x03\x02" +
		"\x02\x02\u04CF\u04B0\x03\x02\x02\x02\u04CF\u04B4\x03\x02\x02\x02\u04CF" +
		"\u04B8\x03\x02\x02\x02\u04CF\u04BC\x03\x02\x02\x02\u04CF\u04C0\x03\x02" +
		"\x02\x02\u04CF\u04C4\x03\x02\x02\x02\u04CF\u04C7\x03\x02\x02\x02\u04CF" +
		"\u04CA\x03\x02\x02\x02\u04D0M\x03\x02\x02\x02\u04D1\u04D2\b(\x01\x02\u04D2" +
		"\u04DB\x07C\x02\x02\u04D3\u04DB\x05P)\x02\u04D4\u04D5\x07\t\x02\x02\u04D5" +
		"\u04D6\x05\xE6t\x02\u04D6\u04D7\x05N(\x02\u04D7\u04D8\x05\xE6t\x02\u04D8" +
		"\u04D9\x07\n\x02\x02\u04D9\u04DB\x03\x02\x02\x02\u04DA\u04D1\x03\x02\x02" +
		"\x02\u04DA\u04D3\x03\x02\x02\x02\u04DA\u04D4\x03\x02\x02\x02\u04DB\u04F0" +
		"\x03\x02\x02\x02\u04DC\u04DD\f\b\x02\x02\u04DD\u04DE\x05\xE6t\x02\u04DE" +
		"\u04DF\t\r\x02\x02\u04DF\u04E0\x05\xE6t\x02\u04E0\u04E1\x05N(\t\u04E1" +
		"\u04EF\x03\x02\x02\x02\u04E2\u04E3\f\x07\x02\x02\u04E3\u04E4\x05\xE6t" +
		"\x02\u04E4\u04E5\t\x0E\x02\x02\u04E5\u04E6\x05\xE6t\x02\u04E6\u04E7\x05" +
		"N(\b\u04E7\u04EF\x03\x02\x02\x02\u04E8\u04E9\f\x06\x02\x02\u04E9\u04EA" +
		"\x05\xE6t\x02\u04EA\u04EB\t\x0F\x02\x02\u04EB\u04EC\x05\xE6t\x02\u04EC" +
		"\u04ED\x05N(\x07\u04ED\u04EF\x03\x02\x02\x02\u04EE\u04DC\x03\x02\x02\x02" +
		"\u04EE\u04E2\x03\x02\x02\x02\u04EE\u04E8\x03\x02\x02\x02\u04EF\u04F2\x03" +
		"\x02\x02\x02\u04F0\u04EE\x03\x02\x02\x02\u04F0\u04F1\x03\x02\x02\x02\u04F1" +
		"O\x03\x02\x02\x02\u04F2\u04F0\x03\x02\x02\x02\u04F3\u04F4\x05\u0126\x94" +
		"\x02\u04F4\u04F5\x05\u013E\xA0\x02\u04F5\u04FB\x03\x02\x02\x02\u04F6\u04F7" +
		"\x05\u013E\xA0\x02\u04F7\u04F8\x07!\x02\x02\u04F8\u04F9\x05\u0126\x94" +
		"\x02\u04F9\u04FB\x03\x02\x02\x02\u04FA\u04F3\x03\x02\x02\x02\u04FA\u04F6" +
		"\x03\x02\x02\x02\u04FBQ\x03\x02\x02\x02\u04FC\u04FE\x07e\x02\x02\u04FD" +
		"\u04FC\x03\x02\x02\x02\u04FD\u04FE\x03\x02\x02\x02\u04FE\u04FF\x03\x02" +
		"\x02\x02\u04FF\u0500\x05P)\x02\u0500S\x03\x02\x02\x02\u0501\u0502\x07" +
		"l\x02\x02\u0502\u0503\x05\xE6t\x02\u0503\u0504\x07\x06\x02\x02\u0504\u0511" +
		"\x05\xE6t\x02\u0505\u050B\x05V,\x02\u0506\u0507\x05\xE0q\x02\u0507\u0508" +
		"\x05V,\x02\u0508\u050A\x03\x02\x02\x02\u0509\u0506\x03\x02\x02\x02\u050A" +
		"\u050D\x03\x02\x02\x02\u050B\u0509\x03\x02\x02\x02\u050B\u050C\x03\x02" +
		"\x02\x02\u050C\u050F\x03\x02\x02\x02\u050D\u050B\x03\x02\x02\x02\u050E" +
		"\u0510\x05\xE0q\x02\u050F\u050E\x03\x02\x02\x02\u050F\u0510\x03\x02\x02" +
		"\x02\u0510\u0512\x03\x02\x02\x02\u0511\u0505\x03\x02\x02\x02\u0511\u0512" +
		"\x03\x02\x02\x02\u0512\u0513\x03\x02\x02\x02\u0513\u0514\x07\x07\x02\x02" +
		"\u0514U\x03\x02\x02\x02\u0515\u051B\x05L\'\x02\u0516\u0518\x05\u013E\xA0" +
		"\x02\u0517\u0516\x03\x02\x02\x02\u0517\u0518\x03\x02\x02\x02\u0518\u0519" +
		"\x03\x02\x02\x02\u0519\u051B\x07q\x02\x02\u051A\u0515\x03\x02\x02\x02" +
		"\u051A\u0517\x03\x02\x02\x02\u051BW\x03\x02\x02\x02\u051C\u0521\x07l\x02" +
		"\x02\u051D\u051E\x07\t\x02\x02\u051E\u051F\x05\u0124\x93\x02\u051F\u0520" +
		"\x07\n\x02\x02\u0520\u0522\x03\x02\x02\x02\u0521\u051D\x03\x02\x02\x02" +
		"\u0521\u0522\x03\x02\x02\x02\u0522\u0523\x03\x02\x02\x02\u0523\u0524\x05" +
		"\u0126\x94\x02\u0524\u0525\x05\xE6t\x02\u0525\u0526\x05\xB4[\x02\u0526" +
		"\u053F\x05\xE6t\x02\u0527\u0528\x07\x06\x02\x02\u0528\u053B\x05\xE6t\x02" +
		"\u0529\u052B\x07\"\x02\x02\u052A\u0529\x03\x02\x02\x02\u052A\u052B\x03" +
		"\x02\x02\x02\u052B\u052C\x03\x02\x02\x02\u052C\u0535\x05Z.\x02\u052D\u052F" +
		"\x05\xE0q\x02\u052E\u0530\x07\"\x02\x02\u052F\u052E\x03\x02\x02\x02\u052F" +
		"\u0530\x03\x02\x02\x02\u0530\u0531\x03\x02\x02\x02\u0531\u0532\x05Z.\x02" +
		"\u0532\u0534\x03\x02\x02\x02\u0533\u052D\x03\x02\x02\x02\u0534\u0537\x03" +
		"\x02\x02\x02\u0535\u0533\x03\x02\x02\x02\u0535\u0536\x03\x02\x02\x02\u0536" +
		"\u0539\x03\x02\x02\x02\u0537\u0535\x03\x02\x02\x02\u0538\u053A\x05\xE0" +
		"q\x02\u0539\u0538\x03\x02\x02\x02\u0539\u053A\x03\x02\x02\x02\u053A\u053C" +
		"\x03\x02\x02\x02\u053B\u052A\x03\x02\x02\x02\u053B\u053C\x03\x02\x02\x02" +
		"\u053C\u053D\x03\x02\x02\x02\u053D\u053E\x07\x07\x02\x02\u053E\u0540\x03" +
		"\x02\x02\x02\u053F\u0527\x03\x02\x02\x02\u053F\u0540\x03\x02\x02\x02\u0540" +
		"\u0587\x03\x02\x02\x02\u0541\u0542\x07l\x02\x02\u0542\u0543\x07\t\x02" +
		"\x02\u0543\u0544\x05\u0124\x93\x02\u0544\u0545\x07\n\x02\x02\u0545\u0546" +
		"\x05\u0126\x94\x02\u0546\u0587\x03\x02\x02\x02\u0547\u054C\x07l\x02\x02" +
		"\u0548\u0549\x07\t\x02\x02\u0549\u054A\x05\u0124\x93\x02\u054A\u054B\x07" +
		"\n\x02\x02\u054B\u054D\x03\x02\x02\x02\u054C\u0548\x03\x02\x02\x02\u054C" +
		"\u054D\x03\x02\x02\x02\u054D\u054E\x03\x02\x02\x02\u054E\u054F\x05\u0126" +
		"\x94\x02\u054F\u0550\x07{\x02\x02\u0550\u0569\x05\xE6t\x02\u0551\u0552" +
		"\x07\x06\x02\x02\u0552\u0565\x05\xE6t\x02\u0553\u0555\x07\"\x02\x02\u0554" +
		"\u0553\x03\x02\x02\x02\u0554\u0555\x03\x02\x02\x02\u0555\u0556\x03\x02" +
		"\x02\x02\u0556\u055F\x05Z.\x02\u0557\u0559\x05\xE0q\x02\u0558\u055A\x07" +
		"\"\x02\x02\u0559\u0558\x03\x02\x02\x02\u0559\u055A\x03\x02\x02\x02\u055A" +
		"\u055B\x03\x02\x02\x02\u055B\u055C\x05Z.\x02\u055C\u055E\x03\x02\x02\x02" +
		"\u055D\u0557\x03\x02\x02\x02\u055E\u0561\x03\x02\x02\x02\u055F\u055D\x03" +
		"\x02\x02\x02\u055F\u0560\x03\x02\x02\x02\u0560\u0563\x03\x02\x02\x02\u0561" +
		"\u055F\x03\x02\x02\x02\u0562\u0564\x05\xE0q\x02\u0563\u0562\x03\x02\x02" +
		"\x02\u0563\u0564\x03\x02\x02\x02\u0564\u0566\x03\x02\x02\x02\u0565\u0554" +
		"\x03\x02\x02\x02\u0565\u0566\x03\x02\x02\x02\u0566\u0567\x03\x02\x02\x02" +
		"\u0567\u0568\x07\x07\x02\x02\u0568\u056A\x03\x02\x02\x02\u0569\u0551\x03" +
		"\x02\x02\x02\u0569\u056A\x03\x02\x02\x02\u056A\u0587\x03\x02\x02\x02\u056B" +
		"\u056C\x07l\x02\x02\u056C\u056D\x05\u0126\x94\x02\u056D\u056E\x05\xE6" +
		"t\x02\u056E\u056F\x07\x06\x02\x02\u056F\u0582\x05\xE6t\x02\u0570\u0572" +
		"\x07\"\x02\x02\u0571\u0570\x03\x02\x02\x02\u0571\u0572\x03\x02\x02\x02" +
		"\u0572\u0573\x03\x02\x02\x02\u0573\u057C\x05Z.\x02\u0574\u0576\x05\xE0" +
		"q\x02\u0575\u0577\x07\"\x02\x02\u0576\u0575\x03\x02\x02\x02\u0576\u0577" +
		"\x03\x02\x02\x02\u0577\u0578\x03\x02\x02\x02\u0578\u0579\x05Z.\x02\u0579" +
		"\u057B\x03\x02\x02\x02\u057A\u0574\x03\x02\x02\x02\u057B\u057E\x03\x02" +
		"\x02\x02\u057C\u057A\x03\x02\x02\x02\u057C\u057D\x03\x02\x02\x02\u057D" +
		"\u0580\x03\x02\x02\x02\u057E\u057C\x03\x02\x02\x02\u057F\u0581\x05\xE0" +
		"q\x02\u0580\u057F\x03\x02\x02\x02\u0580\u0581\x03\x02\x02\x02\u0581\u0583" +
		"\x03\x02\x02\x02\u0582\u0571\x03\x02\x02\x02\u0582\u0583\x03\x02\x02\x02" +
		"\u0583\u0584\x03\x02\x02\x02\u0584\u0585\x07\x07\x02\x02\u0585\u0587\x03" +
		"\x02\x02\x02\u0586\u051C\x03\x02\x02\x02\u0586\u0541\x03\x02\x02\x02\u0586" +
		"\u0547\x03\x02\x02\x02\u0586\u056B\x03\x02\x02\x02\u0587Y\x03\x02\x02" +
		"\x02\u0588\u0590\x07x\x02\x02\u0589\u058A\x07m\x02\x02\u058A\u0590\x05" +
		"\xB4[\x02\u058B\u058C\x07n\x02\x02\u058C\u0590\t\x10\x02\x02\u058D\u058E" +
		"\x07o\x02\x02\u058E\u0590\x05\u0128\x95\x02\u058F\u0588\x03\x02\x02\x02" +
		"\u058F\u0589\x03\x02\x02\x02\u058F\u058B\x03\x02\x02\x02\u058F\u058D\x03" +
		"\x02\x02\x02\u0590[\x03\x02\x02\x02\u0591\u0592\x07~\x02\x02\u0592\u0593" +
		"\x05\u0102\x82\x02\u0593\u0594\x05\xE6t\x02\u0594\u0595\x05\xB4[\x02\u0595" +
		"\u05A5\x05\xE6t\x02\u0596\u0597\x07\x06\x02\x02\u0597\u05A0\x05\xE6t\x02" +
		"\u0598\u059A\x07\"\x02\x02\u0599\u0598\x03\x02\x02\x02\u0599\u059A\x03" +
		"\x02\x02\x02\u059A\u059B\x03\x02\x02\x02\u059B\u059C\x05^0\x02\u059C\u059D" +
		"\x05\xE0q\x02\u059D\u059F\x03\x02\x02\x02\u059E\u0599\x03\x02\x02\x02" +
		"\u059F\u05A2\x03\x02\x02\x02\u05A0\u059E\x03\x02\x02\x02\u05A0\u05A1\x03" +
		"\x02\x02\x02\u05A1\u05A3\x03\x02\x02\x02\u05A2\u05A0\x03\x02\x02\x02\u05A3" +
		"\u05A4\x07\x07\x02\x02\u05A4\u05A6\x03\x02\x02\x02\u05A5\u0596\x03\x02" +
		"\x02\x02\u05A5\u05A6\x03\x02\x02\x02\u05A6\u05C3\x03\x02\x02\x02\u05A7" +
		"\u05A8\x07~\x02\x02\u05A8\u05A9\x05\u0102\x82\x02\u05A9\u05AA\x05\xE6" +
		"t\x02\u05AA\u05AB\x07\x06\x02\x02\u05AB\u05BE\x05\xE6t\x02\u05AC\u05AE" +
		"\x07\"\x02\x02\u05AD\u05AC\x03\x02\x02\x02\u05AD\u05AE\x03\x02\x02\x02" +
		"\u05AE\u05AF\x03\x02\x02\x02\u05AF\u05B8\x05^0\x02\u05B0\u05B2\x05\xE0" +
		"q\x02\u05B1\u05B3\x07\"\x02\x02\u05B2\u05B1\x03\x02\x02\x02\u05B2\u05B3" +
		"\x03\x02\x02\x02\u05B3\u05B4\x03\x02\x02\x02\u05B4\u05B5\x05^0\x02\u05B5" +
		"\u05B7\x03\x02\x02\x02\u05B6\u05B0\x03\x02\x02\x02\u05B7\u05BA\x03\x02" +
		"\x02\x02\u05B8\u05B6\x03\x02\x02\x02\u05B8\u05B9\x03\x02\x02\x02\u05B9" +
		"\u05BC\x03\x02\x02\x02\u05BA\u05B8\x03\x02\x02\x02\u05BB\u05BD\x05\xE0" +
		"q\x02\u05BC\u05BB\x03\x02\x02\x02\u05BC\u05BD\x03\x02\x02\x02\u05BD\u05BF" +
		"\x03\x02\x02\x02\u05BE\u05AD\x03\x02\x02\x02\u05BE\u05BF\x03\x02\x02\x02" +
		"\u05BF\u05C0\x03\x02\x02\x02\u05C0\u05C1\x07\x07\x02\x02\u05C1\u05C3\x03" +
		"\x02\x02\x02\u05C2\u0591\x03\x02\x02\x02\u05C2\u05A7\x03\x02\x02\x02\u05C3" +
		"]\x03\x02\x02\x02\u05C4\u05C6\x07\xA1\x02\x02\u05C5\u05C4\x03\x02\x02" +
		"\x02\u05C5\u05C6\x03\x02\x02\x02\u05C6\u05C7\x03\x02\x02\x02\u05C7\u05F2" +
		"\t\x11\x02\x02\u05C8\u05F2\x07x\x02\x02\u05C9\u05CB\x07\x8F\x02\x02\u05CA" +
		"\u05C9\x03\x02\x02\x02\u05CA\u05CB\x03\x02\x02\x02\u05CB\u05CC\x03\x02" +
		"\x02\x02\u05CC\u05CD\x07\x87\x02\x02\u05CD\u05F2\t\x12\x02\x02\u05CE\u05D0" +
		"\x07\x8F\x02\x02\u05CF\u05CE\x03\x02\x02\x02\u05CF\u05D0\x03\x02\x02\x02" +
		"\u05D0\u05D1\x03\x02\x02\x02\u05D1\u05D2\x07c\x02\x02\u05D2\u05F2\x07" +
		"C\x02\x02\u05D3\u05D5\x07\x8F\x02\x02\u05D4\u05D3\x03\x02\x02\x02\u05D4" +
		"\u05D5\x03\x02\x02\x02\u05D5\u05D6\x03\x02\x02\x02\u05D6\u05D7\x07\x88" +
		"\x02\x02\u05D7\u05F2\x05\xB4[\x02\u05D8\u05DA\x07\x8F\x02\x02\u05D9\u05D8" +
		"\x03\x02\x02\x02\u05D9\u05DA\x03\x02\x02\x02\u05DA\u05DB\x03\x02\x02\x02" +
		"\u05DB\u05DC\x07}\x02\x02\u05DC\u05F2\x05\u013E\xA0\x02\u05DD\u05DF\x07" +
		"\x8F\x02\x02\u05DE\u05DD\x03\x02\x02\x02\u05DE\u05DF\x03\x02\x02\x02\u05DF" +
		"\u05E0\x03\x02\x02\x02\u05E0\u05E1\x07}\x02\x02\u05E1\u05F2\x07{\x02\x02" +
		"\u05E2\u05E4\x07\x8F\x02\x02\u05E3\u05E2\x03\x02\x02\x02\u05E3\u05E4\x03" +
		"\x02\x02\x02\u05E4\u05E5\x03\x02\x02\x02\u05E5\u05E6\x07\x89\x02\x02\u05E6" +
		"\u05F2\t\x13\x02\x02\u05E7\u05E9\x07\x8F\x02\x02\u05E8\u05E7\x03\x02\x02" +
		"\x02\u05E8\u05E9\x03\x02\x02\x02\u05E9\u05EA\x03\x02\x02\x02\u05EA\u05EB" +
		"\x07b\x02\x02\u05EB\u05F2\x07C\x02\x02\u05EC\u05EE\x07\x8F\x02\x02\u05ED" +
		"\u05EC\x03\x02\x02\x02\u05ED\u05EE\x03\x02\x02\x02\u05EE\u05EF\x03\x02" +
		"\x02\x02\u05EF\u05F0\x07\x7F\x02\x02\u05F0\u05F2\x05\xDAn\x02\u05F1\u05C5" +
		"\x03\x02\x02\x02\u05F1\u05C8\x03\x02\x02\x02\u05F1\u05CA\x03\x02\x02\x02" +
		"\u05F1\u05CF\x03\x02\x02\x02\u05F1\u05D4\x03\x02\x02\x02\u05F1\u05D9\x03" +
		"\x02\x02\x02\u05F1\u05DE\x03\x02\x02\x02\u05F1\u05E3\x03\x02\x02\x02\u05F1" +
		"\u05E8\x03\x02\x02\x02\u05F1\u05ED\x03\x02\x02\x02\u05F2_\x03\x02\x02" +
		"\x02\u05F3\u05F5\x05b2\x02\u05F4\u05F6\t\x11\x02\x02\u05F5\u05F4\x03\x02" +
		"\x02\x02\u05F5\u05F6\x03\x02\x02\x02\u05F6\u0604\x03\x02\x02\x02\u05F7" +
		"\u05F9\x05b2\x02\u05F8\u05FA\x07b\x02\x02\u05F9\u05F8\x03\x02\x02\x02" +
		"\u05F9\u05FA\x03\x02\x02\x02\u05FA\u05FB\x03\x02\x02\x02\u05FB\u05FC\x07" +
		"\b\x02\x02\u05FC\u05FD\x07C\x02\x02\u05FD\u0604\x03\x02\x02\x02\u05FE" +
		"\u05FF\x05b2\x02\u05FF\u0600\x07c\x02\x02\u0600\u0601\x07\b\x02\x02\u0601" +
		"\u0602\x07C\x02\x02\u0602\u0604\x03\x02\x02\x02\u0603\u05F3\x03\x02\x02" +
		"\x02\u0603\u05F7\x03\x02\x02\x02\u0603\u05FE\x03\x02\x02\x02\u0604a\x03" +
		"\x02\x02\x02\u0605\u0606\x07~\x02\x02\u0606\u0607\x05\u0102\x82\x02\u0607" +
		"c\x03\x02\x02\x02\u0608\u0609\x07\x90\x02\x02\u0609\u060A\x05\xE6t\x02" +
		"\u060A\u060B\x07\x06\x02\x02\u060B\u0618\x05\xE6t\x02\u060C\u0612\x05" +
		"f4\x02\u060D\u060E\x05\xE0q\x02\u060E\u060F\x05f4\x02\u060F\u0611\x03" +
		"\x02\x02\x02\u0610\u060D\x03\x02\x02\x02\u0611\u0614\x03\x02\x02\x02\u0612" +
		"\u0610\x03\x02\x02\x02\u0612\u0613\x03\x02\x02\x02\u0613\u0616\x03\x02" +
		"\x02\x02\u0614\u0612\x03\x02\x02\x02\u0615\u0617\x05\xE0q\x02\u0616\u0615" +
		"\x03\x02\x02\x02\u0616\u0617\x03\x02\x02\x02\u0617\u0619\x03\x02\x02\x02" +
		"\u0618\u060C\x03\x02\x02\x02\u0618\u0619\x03\x02\x02\x02\u0619\u061A\x03" +
		"\x02\x02\x02\u061A\u061B\x07\x07\x02\x02\u061B\u0634\x03\x02\x02\x02\u061C" +
		"\u061D\x07\x90\x02\x02\u061D\u061E\x05\u013E\xA0\x02\u061E\u061F\x05\xE6" +
		"t\x02\u061F\u0620\x07\x06\x02\x02\u0620\u062F\x05\xE6t\x02\u0621\u0622" +
		"\x07\"\x02\x02\u0622\u0629\x05h5\x02\u0623\u0624\x05\xE0q\x02\u0624\u0625" +
		"\x07\"\x02\x02\u0625\u0626\x05h5\x02\u0626\u0628\x03\x02\x02\x02\u0627" +
		"\u0623\x03\x02\x02\x02\u0628\u062B\x03\x02\x02\x02\u0629\u0627\x03\x02" +
		"\x02\x02\u0629\u062A\x03\x02\x02\x02\u062A\u062D\x03\x02\x02\x02\u062B" +
		"\u0629\x03\x02\x02\x02\u062C\u062E\x05\xE0q\x02\u062D\u062C\x03\x02\x02" +
		"\x02\u062D\u062E\x03\x02\x02\x02\u062E\u0630\x03\x02\x02\x02\u062F\u0621" +
		"\x03\x02\x02\x02\u062F\u0630\x03\x02\x02\x02\u0630\u0631\x03\x02\x02\x02" +
		"\u0631\u0632\x07\x07\x02\x02\u0632\u0634\x03\x02\x02\x02\u0633\u0608\x03" +
		"\x02\x02\x02\u0633\u061C\x03\x02\x02\x02\u0634e\x03\x02\x02\x02\u0635" +
		"\u0636\x05\u013E\xA0\x02\u0636\u0637\x05\xE6t\x02\u0637\u0638\x07\"\x02" +
		"\x02\u0638\u0639\x05h5\x02\u0639\u0651\x03\x02\x02\x02\u063A\u063B\x05" +
		"\u013E\xA0\x02\u063B\u063C\x05\xE6t\x02\u063C\u063D\x07\x06\x02\x02\u063D" +
		"\u064C\x05\xE6t\x02\u063E\u063F\x07\"\x02\x02\u063F\u0646\x05h5\x02\u0640" +
		"\u0641\x05\xE0q\x02\u0641\u0642\x07\"\x02\x02\u0642\u0643\x05h5\x02\u0643" +
		"\u0645\x03\x02\x02\x02\u0644\u0640\x03\x02\x02\x02\u0645\u0648\x03\x02" +
		"\x02\x02\u0646\u0644\x03\x02\x02\x02\u0646\u0647\x03\x02\x02\x02\u0647" +
		"\u064A\x03\x02\x02\x02\u0648\u0646\x03\x02\x02\x02\u0649\u064B\x05\xE0" +
		"q\x02\u064A\u0649\x03\x02\x02\x02\u064A\u064B\x03\x02\x02\x02\u064B\u064D" +
		"\x03\x02\x02\x02\u064C\u063E\x03\x02\x02\x02\u064C\u064D\x03\x02\x02\x02" +
		"\u064D\u064E\x03\x02\x02\x02\u064E\u064F\x07\x07\x02\x02\u064F\u0651\x03" +
		"\x02\x02\x02\u0650\u0635\x03\x02\x02\x02\u0650\u063A\x03\x02\x02\x02\u0651" +
		"g\x03\x02\x02\x02\u0652\u0653\t\x14\x02\x02\u0653\u065C\x05\xB4[\x02\u0654" +
		"\u065C\x07\x98\x02\x02\u0655\u065C\x07v\x02\x02\u0656\u0657\x07\x93\x02" +
		"\x02\u0657\u0658\x05\xDCo\x02\u0658\u0659\x05\xDCo\x02\u0659\u065A\x05" +
		"\xDCo\x02\u065A\u065C\x03\x02\x02\x02\u065B\u0652\x03\x02\x02\x02\u065B" +
		"\u0654\x03\x02\x02\x02\u065B\u0655\x03\x02\x02\x02\u065B\u0656\x03\x02" +
		"\x02\x02\u065Ci\x03\x02\x02\x02\u065D\u065E\t\x14\x02\x02\u065E\u066A" +
		"\x05\xB4[\x02\u065F\u0660\x07\x90\x02\x02\u0660\u066A\x07\x98\x02\x02" +
		"\u0661\u0662\x07\x90\x02\x02\u0662\u066A\x07v\x02\x02\u0663\u0664\x07" +
		"\x90\x02\x02\u0664\u0665\x07\x93\x02\x02\u0665\u0666\x05\xDCo\x02\u0666" +
		"\u0667\x05\xDCo\x02\u0667\u0668\x05\xDCo\x02\u0668\u066A\x03\x02\x02\x02" +
		"\u0669\u065D\x03\x02\x02\x02\u0669\u065F\x03\x02\x02\x02\u0669\u0661\x03" +
		"\x02\x02\x02\u0669\u0663\x03\x02\x02\x02\u066Ak\x03\x02\x02\x02\u066B" +
		"\u066C\x07o\x02\x02\u066C\u066D\x05\xE6t\x02\u066D\u066E\x07\x06\x02\x02" +
		"\u066E\u067B\x05\xE6t\x02\u066F\u0675\x05n8\x02\u0670\u0671\x05\xE0q\x02" +
		"\u0671\u0672\x05n8\x02\u0672\u0674\x03\x02\x02\x02\u0673\u0670\x03\x02" +
		"\x02\x02\u0674\u0677\x03\x02\x02\x02\u0675\u0673\x03\x02\x02\x02\u0675" +
		"\u0676\x03\x02\x02\x02\u0676\u0679\x03\x02\x02\x02\u0677\u0675\x03\x02" +
		"\x02\x02\u0678\u067A\x05\xE0q\x02\u0679\u0678\x03\x02\x02\x02\u0679\u067A" +
		"\x03\x02\x02\x02\u067A\u067C\x03\x02\x02\x02\u067B\u066F\x03\x02\x02\x02" +
		"\u067B\u067C\x03\x02\x02\x02\u067C\u067D\x03\x02\x02\x02\u067D\u067E\x07" +
		"\x07\x02\x02\u067E\u0697\x03\x02\x02\x02\u067F\u0680\x07o\x02\x02\u0680" +
		"\u0681\x05\u013E\xA0\x02\u0681\u0682\x05\xE6t\x02\u0682\u0683\x07\x06" +
		"\x02\x02\u0683\u0692\x05\xE6t\x02\u0684\u0685\x07\"\x02\x02\u0685\u068C" +
		"\x05p9\x02\u0686\u0687\x05\xE0q\x02\u0687\u0688\x07\"\x02\x02\u0688\u0689" +
		"\x05p9\x02\u0689\u068B\x03\x02\x02\x02\u068A\u0686\x03\x02\x02\x02\u068B" +
		"\u068E\x03\x02\x02\x02\u068C\u068A\x03\x02\x02\x02\u068C\u068D\x03\x02" +
		"\x02\x02\u068D\u0690\x03\x02\x02\x02\u068E\u068C\x03\x02\x02\x02\u068F" +
		"\u0691\x05\xE0q\x02\u0690\u068F\x03\x02\x02\x02\u0690\u0691\x03\x02\x02" +
		"\x02\u0691\u0693\x03\x02\x02\x02\u0692\u0684\x03\x02\x02\x02\u0692\u0693" +
		"\x03\x02\x02\x02\u0693\u0694\x03\x02\x02\x02\u0694\u0695\x07\x07\x02\x02" +
		"\u0695\u0697\x03\x02\x02\x02\u0696\u066B\x03\x02\x02\x02\u0696\u067F\x03" +
		"\x02\x02\x02\u0697m\x03\x02\x02\x02\u0698\u06B6\x05X-\x02\u0699\u06B6" +
		"\x05\\/\x02\u069A\u069B\x05\u013E\xA0\x02\u069B\u069C\x05\xE6t\x02\u069C" +
		"\u069D\x07\"\x02\x02\u069D\u069E\x05p9\x02\u069E\u06B6\x03\x02\x02\x02" +
		"\u069F\u06A0\x05\u013E\xA0\x02\u06A0\u06A1\x05\xE6t\x02\u06A1\u06A2\x07" +
		"\x06\x02\x02\u06A2\u06B1\x05\xE6t\x02\u06A3\u06A4\x07\"\x02\x02\u06A4" +
		"\u06AB\x05p9\x02\u06A5\u06A6\x05\xE0q\x02\u06A6\u06A7\x07\"\x02\x02\u06A7" +
		"\u06A8\x05p9\x02\u06A8\u06AA\x03\x02\x02\x02\u06A9\u06A5\x03\x02\x02\x02" +
		"\u06AA\u06AD\x03\x02\x02\x02\u06AB\u06A9\x03\x02\x02\x02\u06AB\u06AC\x03" +
		"\x02\x02\x02\u06AC\u06AF\x03\x02\x02\x02\u06AD\u06AB\x03\x02\x02\x02\u06AE" +
		"\u06B0\x05\xE0q\x02\u06AF\u06AE\x03\x02\x02\x02\u06AF\u06B0\x03\x02\x02" +
		"\x02\u06B0\u06B2\x03\x02\x02\x02\u06B1\u06A3\x03\x02\x02\x02\u06B1\u06B2" +
		"\x03\x02\x02\x02\u06B2\u06B3\x03\x02\x02\x02\u06B3\u06B4\x07\x07\x02\x02" +
		"\u06B4\u06B6\x03\x02\x02\x02\u06B5\u0698\x03\x02\x02\x02\u06B5\u0699\x03" +
		"\x02\x02\x02\u06B5\u069A\x03\x02\x02\x02\u06B5\u069F\x03\x02\x02\x02\u06B6" +
		"o\x03\x02\x02\x02\u06B7\u06D6\x05j6\x02\u06B8\u06B9\x07\x90\x02\x02\u06B9" +
		"\u06BA\x05\xE6t\x02\u06BA\u06BB\x07\x06\x02\x02\u06BB\u06CA\x05\xE6t\x02" +
		"\u06BC\u06BD\x07\"\x02\x02\u06BD\u06C4\x05h5\x02\u06BE\u06BF\x05\xE0q" +
		"\x02\u06BF\u06C0\x07\"\x02\x02\u06C0\u06C1\x05h5\x02\u06C1\u06C3\x03\x02" +
		"\x02\x02\u06C2\u06BE\x03\x02\x02\x02\u06C3\u06C6\x03\x02\x02\x02\u06C4" +
		"\u06C2\x03\x02\x02\x02\u06C4\u06C5\x03\x02\x02\x02\u06C5\u06C8\x03\x02" +
		"\x02\x02\u06C6\u06C4\x03\x02\x02\x02\u06C7\u06C9\x05\xE0q\x02\u06C8\u06C7" +
		"\x03\x02\x02\x02\u06C8\u06C9\x03\x02\x02\x02\u06C9\u06CB\x03\x02\x02\x02" +
		"\u06CA\u06BC\x03\x02\x02\x02\u06CA\u06CB\x03\x02\x02\x02\u06CB\u06CC\x03" +
		"\x02\x02\x02\u06CC\u06CD\x07\x07\x02\x02\u06CD\u06D6\x03\x02\x02\x02\u06CE" +
		"\u06CF\x07\x94\x02\x02\u06CF\u06D6\x05\xB4[\x02\u06D0\u06D1\x07~\x02\x02" +
		"\u06D1\u06D3\x05\u0102\x82\x02\u06D2\u06D4\x05\xB4[\x02\u06D3\u06D2\x03" +
		"\x02\x02\x02\u06D3\u06D4\x03\x02\x02\x02\u06D4\u06D6\x03\x02\x02\x02\u06D5" +
		"\u06B7\x03\x02\x02\x02\u06D5\u06B8\x03\x02\x02\x02\u06D5\u06CE\x03\x02" +
		"\x02\x02\u06D5\u06D0\x03\x02\x02\x02\u06D6q\x03\x02\x02\x02\u06D7\u06D8" +
		"\x07\x95\x02\x02\u06D8\u06D9\x05\xE6t\x02\u06D9\u06DA\x07\x06\x02\x02" +
		"\u06DA\u06E7\x05\xE6t\x02\u06DB\u06E1\x05\x80A\x02\u06DC\u06DD\x05\xE0" +
		"q\x02\u06DD\u06DE\x05\x80A\x02\u06DE\u06E0\x03\x02\x02\x02\u06DF\u06DC" +
		"\x03\x02\x02\x02\u06E0\u06E3\x03\x02\x02\x02\u06E1\u06DF\x03\x02\x02\x02" +
		"\u06E1\u06E2\x03\x02\x02\x02\u06E2\u06E5\x03\x02\x02\x02\u06E3\u06E1\x03" +
		"\x02\x02\x02\u06E4\u06E6\x05\xE0q\x02\u06E5\u06E4\x03\x02\x02\x02\u06E5" +
		"\u06E6\x03\x02\x02\x02\u06E6\u06E8\x03\x02\x02\x02\u06E7\u06DB\x03\x02" +
		"\x02\x02\u06E7\u06E8\x03\x02\x02\x02\u06E8\u06E9\x03\x02\x02\x02\u06E9" +
		"\u06EA\x07\x07\x02\x02\u06EA\u0701\x03\x02\x02\x02\u06EB\u06EC\x07\x95" +
		"\x02\x02\u06EC\u06ED\x05\u013E\xA0\x02\u06ED\u06EE\x05\xE6t\x02\u06EE" +
		"\u06EF\x07\x06\x02\x02\u06EF\u06FC\x05\xE6t\x02\u06F0\u06F6\x05\x82B\x02" +
		"\u06F1\u06F2\x05\xE0q\x02\u06F2\u06F3\x05\x82B\x02\u06F3\u06F5\x03\x02" +
		"\x02\x02\u06F4\u06F1\x03\x02\x02\x02\u06F5\u06F8\x03\x02\x02\x02\u06F6" +
		"\u06F4\x03\x02\x02\x02\u06F6\u06F7\x03\x02\x02\x02\u06F7\u06FA\x03\x02" +
		"\x02\x02\u06F8\u06F6\x03\x02\x02\x02\u06F9\u06FB\x05\xE0q\x02\u06FA\u06F9" +
		"\x03\x02\x02\x02\u06FA\u06FB\x03\x02\x02\x02\u06FB\u06FD\x03\x02\x02\x02" +
		"\u06FC\u06F0\x03\x02\x02\x02\u06FC\u06FD\x03\x02\x02\x02\u06FD\u06FE\x03" +
		"\x02\x02\x02\u06FE\u06FF\x07\x07\x02\x02\u06FF\u0701\x03\x02\x02\x02\u0700" +
		"\u06D7\x03\x02\x02\x02\u0700\u06EB\x03\x02\x02\x02\u0701s\x03\x02\x02" +
		"\x02\u0702\u0703\x07\x96\x02\x02\u0703\u0704\x05\xE6t\x02\u0704\u0705" +
		"\x07\x06\x02\x02\u0705\u0712\x05\xE6t\x02\u0706\u070C\x05v<\x02\u0707" +
		"\u0708\x05\xE0q\x02\u0708\u0709\x05v<\x02\u0709\u070B\x03\x02\x02\x02" +
		"\u070A\u0707\x03\x02\x02\x02\u070B\u070E\x03\x02\x02\x02\u070C\u070A\x03" +
		"\x02\x02\x02\u070C\u070D\x03\x02\x02";
	private static readonly _serializedATNSegment4: string =
		"\x02\u070D\u0710\x03\x02\x02\x02\u070E\u070C\x03\x02\x02\x02\u070F\u0711" +
		"\x05\xE0q\x02\u0710\u070F\x03\x02\x02\x02\u0710\u0711\x03\x02\x02\x02" +
		"\u0711\u0713\x03\x02\x02\x02\u0712\u0706\x03\x02\x02\x02\u0712\u0713\x03" +
		"\x02\x02\x02\u0713\u0714\x03\x02\x02\x02\u0714\u0715\x07\x07\x02\x02\u0715" +
		"\u072C\x03\x02\x02\x02\u0716\u0717\x07\x96\x02\x02\u0717\u0718\x05\u013E" +
		"\xA0\x02\u0718\u0719\x05\xE6t\x02\u0719\u071A\x07\x06\x02\x02\u071A\u0727" +
		"\x05\xE6t\x02\u071B\u0721\x05x=\x02\u071C\u071D\x05\xE0q\x02\u071D\u071E" +
		"\x05x=\x02\u071E\u0720\x03\x02\x02\x02\u071F\u071C\x03\x02\x02\x02\u0720" +
		"\u0723\x03\x02\x02\x02\u0721\u071F\x03\x02\x02\x02\u0721\u0722\x03\x02" +
		"\x02\x02\u0722\u0725\x03\x02\x02\x02\u0723\u0721\x03\x02\x02\x02\u0724" +
		"\u0726\x05\xE0q\x02\u0725\u0724\x03\x02\x02\x02\u0725\u0726\x03\x02\x02" +
		"\x02\u0726\u0728\x03\x02\x02\x02\u0727\u071B\x03\x02\x02\x02\u0727\u0728" +
		"\x03\x02\x02\x02\u0728\u0729\x03\x02\x02\x02\u0729\u072A\x07\x07\x02\x02" +
		"\u072A\u072C\x03\x02\x02\x02\u072B\u0702\x03\x02\x02\x02\u072B\u0716\x03" +
		"\x02\x02\x02\u072Cu\x03\x02\x02\x02\u072D\u072E\x05\xEAv\x02\u072E\u072F" +
		"\x07\x14\x02\x02\u072F\u0730\x05~@\x02\u0730\u0755\x03\x02\x02\x02\u0731" +
		"\u0732\x05\xEAv\x02\u0732\u0733\x07\b\x02\x02\u0733\u0734\x05~@\x02\u0734" +
		"\u0755\x03\x02\x02\x02\u0735\u0736\x05\xEAv\x02\u0736\u0737\x07\x10\x02" +
		"\x02\u0737\u0738\x05|?\x02\u0738\u0755\x03\x02\x02\x02\u0739\u073A\x05" +
		"\u013E\xA0\x02\u073A\u073B\x05z>\x02\u073B\u0755\x03\x02\x02\x02\u073C" +
		"\u073D\x05\u013E\xA0\x02\u073D\u073E\x07\x10\x02\x02\u073E\u073F\x05|" +
		"?\x02\u073F\u0755\x03\x02\x02\x02\u0740\u0741\x05\u013E\xA0\x02\u0741" +
		"\u0742\x05\xE6t\x02\u0742\u0743\x07\x06\x02\x02\u0743\u0750\x05\xE6t\x02" +
		"\u0744\u074A\x05x=\x02\u0745\u0746\x05\xE0q\x02\u0746\u0747\x05x=\x02" +
		"\u0747\u0749\x03\x02\x02\x02\u0748\u0745\x03\x02\x02\x02\u0749\u074C\x03" +
		"\x02\x02\x02\u074A\u0748\x03\x02\x02\x02\u074A\u074B\x03\x02\x02\x02\u074B" +
		"\u074E\x03\x02\x02\x02\u074C\u074A\x03\x02\x02\x02\u074D\u074F\x05\xE0" +
		"q\x02\u074E\u074D\x03\x02\x02\x02\u074E\u074F\x03\x02\x02\x02\u074F\u0751" +
		"\x03\x02\x02\x02\u0750\u0744\x03\x02\x02\x02\u0750\u0751\x03\x02\x02\x02" +
		"\u0751\u0752\x03\x02\x02\x02\u0752\u0753\x07\x07\x02\x02\u0753\u0755\x03" +
		"\x02\x02\x02\u0754\u072D\x03\x02\x02\x02\u0754\u0731\x03\x02\x02\x02\u0754" +
		"\u0735\x03\x02\x02\x02\u0754\u0739\x03\x02\x02\x02\u0754\u073C\x03\x02" +
		"\x02\x02\u0754\u0740\x03\x02\x02\x02\u0755w\x03\x02\x02\x02\u0756\u0759" +
		"\x05z>\x02\u0757\u0759\x05|?\x02\u0758\u0756\x03\x02\x02\x02\u0758\u0757" +
		"\x03\x02\x02\x02\u0759y\x03\x02\x02\x02\u075A\u075E\x07\x14\x02\x02\u075B" +
		"\u075C\x07\"\x02\x02\u075C\u075E\x07\x97\x02\x02\u075D\u075A\x03\x02\x02" +
		"\x02\u075D\u075B\x03\x02\x02\x02\u075E\u075F\x03\x02\x02\x02\u075F\u0760" +
		"\x05~@\x02\u0760{\x03\x02\x02\x02\u0761\u0762\x05\u0130\x99\x02\u0762" +
		"\u0763\x07\b\x02\x02\u0763\u0768\x05~@\x02\u0764\u0766\x07\x0F\x02\x02" +
		"\u0765\u0764\x03\x02\x02\x02\u0765\u0766\x03\x02\x02\x02\u0766\u0767\x03" +
		"\x02\x02\x02\u0767\u0769\x07C\x02\x02\u0768\u0765\x03\x02\x02\x02\u0768" +
		"\u0769\x03\x02\x02\x02\u0769}\x03\x02\x02\x02\u076A\u076B\x07\x96\x02" +
		"\x02\u076B\u0783\x05\u010E\x88\x02\u076C\u076D\x07\x99\x02\x02\u076D\u076E" +
		"\x05\u010E\x88\x02\u076E\u0770\x05\xEAv\x02\u076F\u0771\t\x15\x02\x02" +
		"\u0770\u076F\x03\x02\x02\x02\u0770\u0771\x03\x02\x02\x02\u0771\u0783\x03" +
		"\x02\x02\x02\u0772\u0773\x07\x99\x02\x02\u0773\u0774\x05\u010E\x88\x02" +
		"\u0774\u0775\x05\xEAv\x02\u0775\u0776\x05\u010A\x86\x02\u0776\u0783\x03" +
		"\x02\x02\x02\u0777\u0778\x07\x9A\x02\x02\u0778\u0783\x05\u013E\xA0\x02" +
		"\u0779\u077A\x07\x9B\x02\x02\u077A\u077C\x05\xEAv\x02\u077B\u077D\t\x15" +
		"\x02\x02\u077C\u077B\x03\x02\x02\x02\u077C\u077D\x03\x02\x02\x02\u077D" +
		"\u0783\x03\x02\x02\x02\u077E\u077F\x07\x9B\x02\x02\u077F\u0780\x05\xEA" +
		"v\x02\u0780\u0781\x05\u010A\x86\x02\u0781\u0783\x03\x02\x02\x02\u0782" +
		"\u076A\x03\x02\x02\x02\u0782\u076C\x03\x02\x02\x02\u0782\u0772\x03\x02" +
		"\x02\x02\u0782\u0777\x03\x02\x02\x02\u0782\u0779\x03\x02\x02\x02\u0782" +
		"\u077E\x03\x02\x02\x02\u0783\x7F\x03\x02\x02\x02\u0784\u0785\x05\u013E" +
		"\xA0\x02\u0785\u0786\x05\x86D\x02\u0786\u079F\x03\x02\x02\x02\u0787\u0788" +
		"\x05\u013E\xA0\x02\u0788\u0789\x07\x10\x02\x02\u0789\u078A\x05\x84C\x02" +
		"\u078A\u079F\x03\x02\x02\x02\u078B\u078C\x05\xEAv\x02\u078C\u078D\x07" +
		"\x10\x02\x02\u078D\u078E\x05\x84C\x02\u078E\u079F\x03\x02\x02\x02\u078F" +
		"\u079F\x05v<\x02\u0790\u0791\x05\u013E\xA0\x02\u0791\u0792\x05\xE6t\x02" +
		"\u0792\u0793\x07\x06\x02\x02\u0793\u0799\x05\xE6t\x02\u0794\u0795\x05" +
		"\x82B\x02\u0795\u0796\x05\xE6t\x02\u0796\u0798\x03\x02\x02\x02\u0797\u0794" +
		"\x03\x02\x02\x02\u0798\u079B\x03\x02\x02\x02\u0799\u0797\x03\x02\x02\x02" +
		"\u0799\u079A\x03\x02\x02\x02\u079A\u079C\x03\x02\x02\x02\u079B\u0799\x03" +
		"\x02\x02\x02\u079C\u079D\x07\x07\x02\x02\u079D\u079F\x03\x02\x02\x02\u079E" +
		"\u0784\x03\x02\x02\x02\u079E\u0787\x03\x02\x02\x02\u079E\u078B\x03\x02" +
		"\x02\x02\u079E\u078F\x03\x02\x02\x02\u079E\u0790\x03\x02\x02\x02\u079F" +
		"\x81\x03\x02\x02\x02\u07A0\u07A4\x05\x86D\x02\u07A1\u07A4\x05\x84C\x02" +
		"\u07A2\u07A4\x05x=\x02\u07A3\u07A0\x03\x02\x02\x02\u07A3\u07A1\x03\x02" +
		"\x02\x02\u07A3\u07A2\x03\x02\x02\x02\u07A4\x83\x03\x02\x02\x02\u07A5\u07A6" +
		"\x05\u0130\x99\x02\u07A6\u07A7\x07\b\x02\x02\u07A7\u07AC\x05\u010A\x86" +
		"\x02\u07A8\u07AA\x07\x0F\x02\x02\u07A9\u07A8\x03\x02\x02\x02\u07A9\u07AA" +
		"\x03\x02\x02\x02\u07AA\u07AB\x03\x02\x02\x02\u07AB\u07AD\x07C\x02\x02" +
		"\u07AC\u07A9\x03\x02\x02\x02\u07AC\u07AD\x03\x02\x02\x02\u07AD\u07C3\x03" +
		"\x02\x02\x02\u07AE\u07AF\x05\u0130\x99\x02\u07AF\u07B0\x07\b\x02\x02\u07B0" +
		"\u07B1\x05\u013E\xA0\x02\u07B1\u07B2\x07\x10\x02\x02\u07B2\u07B4\x05\u0130" +
		"\x99\x02\u07B3\u07B5\x05\u0110\x89\x02\u07B4\u07B3\x03\x02\x02\x02\u07B4" +
		"\u07B5\x03\x02\x02\x02\u07B5\u07C3\x03\x02\x02\x02\u07B6\u07B7\x05\u0130" +
		"\x99\x02\u07B7\u07B8\x07\b\x02\x02\u07B8\u07B9\x05\xEAv\x02\u07B9\u07BA" +
		"\x07\x10\x02\x02\u07BA\u07BC\x05\u0130\x99\x02\u07BB\u07BD\x05\u0110\x89" +
		"\x02\u07BC\u07BB\x03\x02\x02\x02\u07BC\u07BD\x03\x02\x02\x02\u07BD\u07C3" +
		"\x03\x02\x02\x02\u07BE\u07BF\x05\u0130\x99\x02\u07BF\u07C0\x07\x14\x02" +
		"\x02\u07C0\u07C1\x05\u0110\x89\x02\u07C1\u07C3\x03\x02\x02\x02\u07C2\u07A5" +
		"\x03\x02\x02\x02\u07C2\u07AE\x03\x02\x02\x02\u07C2\u07B6\x03\x02\x02\x02" +
		"\u07C2\u07BE\x03\x02\x02\x02\u07C3\x85\x03\x02\x02\x02\u07C4\u07CA\x07" +
		"\x14\x02\x02\u07C5\u07C7\x07\"\x02\x02\u07C6\u07C5\x03\x02\x02\x02\u07C6" +
		"\u07C7\x03\x02\x02\x02\u07C7\u07C8\x03\x02\x02\x02\u07C8\u07CA\x07\x97" +
		"\x02\x02\u07C9\u07C4\x03\x02\x02\x02\u07C9\u07C6\x03\x02\x02\x02\u07CA" +
		"\u07CB\x03\x02\x02\x02\u07CB\u07D0\x05\u010A\x86\x02\u07CC\u07CE\x07\x0F" +
		"\x02\x02\u07CD\u07CC\x03\x02\x02\x02\u07CD\u07CE\x03\x02\x02\x02\u07CE" +
		"\u07CF\x03\x02\x02\x02\u07CF\u07D1\x07C\x02\x02\u07D0\u07CD\x03\x02\x02" +
		"\x02\u07D0\u07D1\x03\x02\x02\x02\u07D1\u07E1\x03\x02\x02\x02\u07D2\u07D8" +
		"\x07\x15\x02\x02\u07D3\u07D5\x07\"\x02\x02\u07D4\u07D3\x03\x02\x02\x02" +
		"\u07D4\u07D5\x03\x02\x02\x02\u07D5\u07D6\x03\x02\x02\x02\u07D6\u07D8\x07" +
		"\x98\x02\x02\u07D7\u07D2\x03\x02\x02\x02\u07D7\u07D4\x03\x02\x02\x02\u07D8" +
		"\u07D9\x03\x02\x02\x02\u07D9\u07DE\x05\u0134\x9B\x02\u07DA\u07DC\x07\x0F" +
		"\x02\x02\u07DB\u07DA\x03\x02\x02\x02\u07DB\u07DC\x03\x02\x02\x02\u07DC" +
		"\u07DD\x03\x02\x02\x02\u07DD\u07DF\x07C\x02\x02\u07DE\u07DB\x03\x02\x02" +
		"\x02\u07DE\u07DF\x03\x02\x02\x02\u07DF\u07E1\x03\x02\x02\x02\u07E0\u07C9" +
		"\x03\x02\x02\x02\u07E0\u07D7\x03\x02\x02\x02\u07E1\x87\x03\x02\x02\x02" +
		"\u07E2\u07E3\x07\xA2\x02\x02\u07E3\u07E4\x05\xE6t\x02\u07E4\u07E5\x07" +
		"\x06\x02\x02\u07E5\u07F2\x05\xE6t\x02\u07E6\u07EC\x05\x8AF\x02\u07E7\u07E8" +
		"\x05\xE0q\x02\u07E8\u07E9\x05\x8AF\x02\u07E9\u07EB\x03\x02\x02\x02\u07EA" +
		"\u07E7\x03\x02\x02\x02\u07EB\u07EE\x03\x02\x02\x02\u07EC\u07EA\x03\x02" +
		"\x02\x02\u07EC\u07ED\x03\x02\x02\x02\u07ED\u07F0\x03\x02\x02\x02\u07EE" +
		"\u07EC\x03\x02\x02\x02\u07EF\u07F1\x05\xE0q\x02\u07F0\u07EF\x03\x02\x02" +
		"\x02\u07F0\u07F1\x03\x02\x02\x02\u07F1\u07F3\x03\x02\x02\x02\u07F2\u07E6" +
		"\x03\x02\x02\x02\u07F2\u07F3\x03\x02\x02\x02\u07F3\u07F4\x03\x02\x02\x02" +
		"\u07F4\u07F5\x07\x07\x02\x02\u07F5\u080C\x03\x02\x02\x02\u07F6\u07F7\x07" +
		"\xA2\x02\x02\u07F7\u07F8\x05\u013E\xA0\x02\u07F8\u07F9\x05\xE6t\x02\u07F9" +
		"\u07FA\x07\x06\x02\x02\u07FA\u0807\x05\xE6t\x02\u07FB\u0801\x05\x8CG\x02" +
		"\u07FC\u07FD\x05\xE0q\x02\u07FD\u07FE\x05\x8CG\x02\u07FE\u0800\x03\x02" +
		"\x02\x02\u07FF\u07FC\x03\x02\x02\x02\u0800\u0803\x03\x02\x02\x02\u0801" +
		"\u07FF\x03\x02\x02\x02\u0801\u0802\x03\x02\x02\x02\u0802\u0805\x03\x02" +
		"\x02\x02\u0803\u0801\x03\x02\x02\x02\u0804\u0806\x05\xE0q\x02\u0805\u0804" +
		"\x03\x02\x02\x02\u0805\u0806\x03\x02\x02\x02\u0806\u0808\x03\x02\x02\x02" +
		"\u0807\u07FB\x03\x02\x02\x02\u0807\u0808\x03\x02\x02\x02\u0808\u0809\x03" +
		"\x02\x02\x02\u0809\u080A\x07\x07\x02\x02\u080A\u080C\x03\x02\x02\x02\u080B" +
		"\u07E2\x03\x02\x02\x02\u080B\u07F6\x03\x02\x02\x02\u080C\x89\x03\x02\x02" +
		"\x02\u080D\u080E\x05\u013E\xA0\x02\u080E\u080F\x07\x10\x02\x02\u080F\u0810" +
		"\x05\x8CG\x02\u0810\u0826\x03\x02\x02\x02\u0811\u0812\x05\u013E\xA0\x02" +
		"\u0812\u0813\x05\xE6t\x02\u0813\u0814\x07\x06\x02\x02\u0814\u0821\x05" +
		"\xE6t\x02\u0815\u081B\x05\x8CG\x02\u0816\u0817\x05\xE0q\x02\u0817\u0818" +
		"\x05\x8CG\x02\u0818\u081A\x03\x02\x02\x02\u0819\u0816\x03\x02\x02\x02" +
		"\u081A\u081D\x03\x02\x02\x02\u081B\u0819\x03\x02\x02\x02\u081B\u081C\x03" +
		"\x02\x02\x02\u081C\u081F\x03\x02\x02\x02\u081D\u081B\x03\x02\x02\x02\u081E" +
		"\u0820\x05\xE0q\x02\u081F\u081E\x03\x02\x02\x02\u081F\u0820\x03\x02\x02" +
		"\x02\u0820\u0822\x03\x02\x02\x02\u0821\u0815\x03\x02\x02\x02\u0821\u0822" +
		"\x03\x02\x02\x02\u0822\u0823\x03\x02\x02\x02\u0823\u0824\x07\x07\x02\x02" +
		"\u0824\u0826\x03\x02\x02\x02\u0825\u080D\x03\x02\x02\x02\u0825\u0811\x03" +
		"\x02\x02\x02\u0826\x8B\x03\x02\x02\x02\u0827\u0829\x05\u011E\x90\x02\u0828" +
		"\u082A\x07_\x02\x02\u0829\u0828\x03\x02\x02\x02\u0829\u082A\x03\x02\x02" +
		"\x02\u082A\u082F\x03\x02\x02\x02\u082B\u082D\x07\x0F\x02\x02\u082C\u082B" +
		"\x03\x02\x02\x02\u082C\u082D\x03\x02\x02\x02\u082D\u082E\x03\x02\x02\x02" +
		"\u082E\u0830\x05\xDCo\x02\u082F\u082C\x03\x02\x02\x02\u082F\u0830\x03" +
		"\x02\x02\x02\u0830\u0856\x03\x02\x02\x02\u0831\u0832\x05\u011E\x90\x02" +
		"\u0832\u0837\x07\xA3\x02\x02\u0833\u0835\x07\x0F\x02\x02\u0834\u0833\x03" +
		"\x02\x02\x02\u0834\u0835\x03\x02\x02\x02\u0835\u0836\x03\x02\x02\x02\u0836" +
		"\u0838\x05\xDCo\x02\u0837\u0834\x03\x02\x02\x02\u0837\u0838\x03\x02\x02" +
		"\x02\u0838\u0856\x03\x02\x02\x02\u0839\u083A\x05\u011E\x90\x02\u083A\u083B" +
		"\x07\xA3\x02\x02\u083B\u083C\x07\b\x02\x02\u083C\u083D\x05\xDCo\x02\u083D" +
		"\u0856\x03\x02\x02\x02\u083E\u083F\x05\u011E\x90\x02\u083F\u0840\x07\x14" +
		"\x02\x02\u0840\u0841\x05\xE6t\x02\u0841\u0842\x07B\x02\x02\u0842\u0843" +
		"\x05\u0132\x9A\x02\u0843\u0844\x07\t\x02\x02\u0844\u0845\t\x16\x02\x02" +
		"\u0845\u0846\x05\xDCo\x02\u0846\u0847\x07\n\x02\x02\u0847\u0856\x03\x02" +
		"\x02\x02\u0848\u0849\x05\u011E\x90\x02\u0849\u084A\x07\x15\x02\x02\u084A" +
		"\u084B\x05\xE6t\x02\u084B\u084C\x07B\x02\x02\u084C\u0856\x03\x02\x02\x02" +
		"\u084D\u084E\x05\u011E\x90\x02\u084E\u0853\x07B\x02\x02\u084F\u0851\x07" +
		"\x0F\x02\x02\u0850\u084F\x03\x02\x02\x02\u0850\u0851\x03\x02\x02\x02\u0851" +
		"\u0852\x03\x02\x02\x02\u0852\u0854\x05\xDCo\x02\u0853\u0850\x03\x02\x02" +
		"\x02\u0853\u0854\x03\x02\x02\x02\u0854\u0856\x03\x02\x02\x02\u0855\u0827" +
		"\x03\x02\x02\x02\u0855\u0831\x03\x02\x02\x02\u0855\u0839\x03\x02\x02\x02" +
		"\u0855\u083E\x03\x02\x02\x02\u0855\u0848\x03\x02\x02\x02\u0855\u084D\x03" +
		"\x02\x02\x02\u0856\x8D\x03\x02\x02\x02\u0857\u0858\x07d\x02\x02\u0858" +
		"\u0859\x07\t\x02\x02\u0859\u085A\x07|\x02\x02\u085A\u085B\x07\n\x02\x02" +
		"\u085B\u0862\x05\x90I\x02\u085C\u085E\x07$\x02\x02\u085D\u085C\x03\x02" +
		"\x02\x02\u085D\u085E\x03\x02\x02\x02\u085E\u085F\x03\x02\x02\x02\u085F" +
		"\u0861\x05\x90I\x02\u0860\u085D\x03\x02\x02\x02\u0861\u0864\x03\x02\x02" +
		"\x02\u0862\u0860\x03\x02\x02\x02\u0862\u0863\x03\x02\x02\x02\u0863\u08F3" +
		"\x03\x02\x02\x02\u0864\u0862\x03\x02\x02\x02\u0865\u0866\x07d\x02\x02" +
		"\u0866\u0867\x07\t\x02\x02\u0867\u0868\x05\u010C\x87\x02\u0868\u0869\x07" +
		"\n\x02\x02\u0869\u086A\x05\xE6t\x02\u086A\u086B\x05\xEAv\x02\u086B\u086F" +
		"\x05\xE6t\x02\u086C\u086D\x05\xB2Z\x02\u086D\u086E\x05\xE6t\x02\u086E" +
		"\u0870\x03\x02\x02\x02\u086F\u086C\x03\x02\x02\x02\u086F\u0870\x03\x02" +
		"\x02\x02\u0870\u0889\x03\x02\x02\x02\u0871\u0872\x07\x06\x02\x02\u0872" +
		"\u0885\x05\xE6t\x02\u0873\u0875\x07\"\x02\x02\u0874\u0873\x03\x02\x02" +
		"\x02\u0874\u0875\x03\x02\x02\x02\u0875\u0876\x03\x02\x02\x02\u0876\u087F" +
		"\x05\x92J\x02\u0877\u0879\x05\xE0q\x02\u0878\u087A\x07\"\x02\x02\u0879" +
		"\u0878\x03\x02\x02\x02\u0879\u087A\x03\x02\x02\x02\u087A\u087B\x03\x02" +
		"\x02\x02\u087B\u087C\x05\x92J\x02\u087C\u087E\x03\x02\x02\x02\u087D\u0877" +
		"\x03\x02\x02\x02\u087E\u0881\x03\x02\x02\x02\u087F\u087D\x03\x02\x02\x02" +
		"\u087F\u0880\x03\x02\x02\x02\u0880\u0883\x03\x02\x02\x02\u0881\u087F\x03" +
		"\x02\x02\x02\u0882\u0884\x05\xE0q\x02\u0883\u0882\x03\x02\x02\x02\u0883" +
		"\u0884\x03\x02\x02\x02\u0884\u0886\x03\x02\x02\x02\u0885\u0874\x03\x02" +
		"\x02\x02\u0885\u0886\x03\x02\x02\x02\u0886\u0887\x03\x02\x02\x02\u0887" +
		"\u0888\x07\x07\x02\x02\u0888\u088A\x03\x02\x02\x02\u0889\u0871\x03\x02" +
		"\x02\x02\u0889\u088A\x03\x02\x02\x02\u088A\u08F3\x03\x02\x02\x02\u088B" +
		"\u088C\x07d\x02\x02\u088C\u088D\x07\t\x02\x02\u088D\u088E\x05\u010C\x87" +
		"\x02\u088E\u088F\x07\n\x02\x02\u088F\u0893\x05\xE6t\x02\u0890\u0891\x05" +
		"\xEAv\x02\u0891\u0892\x05\xE6t\x02\u0892\u0894\x03\x02\x02\x02\u0893\u0890" +
		"\x03\x02\x02\x02\u0893\u0894\x03\x02\x02\x02\u0894\u0895\x03\x02\x02\x02" +
		"\u0895\u0896\x05\u0128\x95\x02\u0896\u089A\x05\xE6t\x02\u0897\u0898\x05" +
		"\xB2Z\x02\u0898\u0899\x05\xE6t\x02\u0899\u089B\x03\x02\x02\x02\u089A\u0897" +
		"\x03\x02\x02\x02\u089A\u089B\x03\x02\x02\x02\u089B\u08C5\x03\x02\x02\x02" +
		"\u089C\u089D\x07\x06\x02\x02\u089D\u08B0\x05\xE6t\x02\u089E\u08A0\x07" +
		"\"\x02\x02\u089F\u089E\x03\x02\x02\x02\u089F\u08A0\x03\x02\x02\x02\u08A0" +
		"\u08A1\x03\x02\x02\x02\u08A1\u08AA\x05\x92J\x02\u08A2\u08A4\x05\xE0q\x02" +
		"\u08A3\u08A5\x07\"\x02\x02\u08A4\u08A3\x03\x02\x02\x02\u08A4\u08A5\x03" +
		"\x02\x02\x02\u08A5\u08A6\x03\x02\x02\x02\u08A6\u08A7\x05\x92J\x02\u08A7" +
		"\u08A9\x03\x02\x02\x02\u08A8\u08A2\x03\x02\x02\x02\u08A9\u08AC\x03\x02" +
		"\x02\x02\u08AA\u08A8\x03\x02\x02\x02\u08AA\u08AB\x03\x02\x02\x02\u08AB" +
		"\u08AE\x03\x02\x02\x02\u08AC\u08AA\x03\x02\x02\x02\u08AD\u08AF\x05\xE0" +
		"q\x02\u08AE\u08AD\x03\x02\x02\x02\u08AE\u08AF\x03\x02\x02\x02\u08AF\u08B1" +
		"\x03\x02\x02\x02\u08B0\u089F\x03\x02\x02\x02\u08B0\u08B1\x03\x02\x02\x02" +
		"\u08B1\u08B2\x03\x02\x02\x02\u08B2\u08C1\x05\xE6t\x02\u08B3\u08B4\x07" +
		"\"\x02\x02\u08B4\u08BB\x05\x9AN\x02\u08B5\u08B6\x05\xE0q\x02\u08B6\u08B7" +
		"\x07\"\x02\x02\u08B7\u08B8\x05\x9AN\x02\u08B8\u08BA\x03\x02\x02\x02\u08B9" +
		"\u08B5\x03\x02\x02\x02\u08BA\u08BD\x03\x02\x02\x02\u08BB\u08B9\x03\x02" +
		"\x02\x02\u08BB\u08BC\x03\x02\x02\x02\u08BC\u08BF\x03\x02\x02\x02\u08BD" +
		"\u08BB\x03\x02\x02\x02\u08BE\u08C0\x05\xE0q\x02\u08BF\u08BE\x03\x02\x02" +
		"\x02\u08BF\u08C0\x03\x02\x02\x02\u08C0\u08C2\x03\x02\x02\x02\u08C1\u08B3" +
		"\x03\x02\x02\x02\u08C1\u08C2\x03\x02\x02\x02\u08C2\u08C3\x03\x02\x02\x02" +
		"\u08C3\u08C4\x07\x07\x02\x02\u08C4\u08C6\x03\x02\x02\x02\u08C5\u089C\x03" +
		"\x02\x02\x02\u08C5\u08C6\x03\x02\x02\x02\u08C6\u08F3\x03\x02\x02\x02\u08C7" +
		"\u08C8\x07d\x02\x02\u08C8\u08C9\x05\xE6t\x02\u08C9\u08CA\x07\x06\x02\x02" +
		"\u08CA\u08D7\x05\xE6t\x02\u08CB\u08D1\x05\x9CO\x02\u08CC\u08CD\x05\xE0" +
		"q\x02\u08CD\u08CE\x05\x9CO\x02\u08CE\u08D0\x03\x02\x02\x02\u08CF\u08CC" +
		"\x03\x02\x02\x02\u08D0\u08D3\x03\x02\x02\x02\u08D1\u08CF\x03\x02\x02\x02" +
		"\u08D1\u08D2\x03\x02\x02\x02\u08D2\u08D5\x03\x02\x02\x02\u08D3\u08D1\x03" +
		"\x02\x02\x02\u08D4\u08D6\x05\xE0q\x02\u08D5\u08D4\x03\x02\x02\x02\u08D5" +
		"\u08D6\x03\x02\x02\x02\u08D6\u08D8\x03\x02\x02\x02\u08D7\u08CB\x03\x02" +
		"\x02\x02\u08D7\u08D8\x03\x02\x02\x02\u08D8\u08D9\x03\x02\x02\x02\u08D9" +
		"\u08DA\x07\x07\x02\x02\u08DA\u08F3\x03\x02\x02\x02\u08DB\u08DC\x07d\x02" +
		"\x02\u08DC\u08DD\x05\u013E\xA0\x02\u08DD\u08DE\x05\xE6t\x02\u08DE\u08DF" +
		"\x07\x06\x02\x02\u08DF\u08EE\x05\xE6t\x02\u08E0\u08E1\x07\"\x02\x02\u08E1" +
		"\u08E8\x05\x9AN\x02\u08E2\u08E3\x05\xE0q\x02\u08E3\u08E4\x07\"\x02\x02" +
		"\u08E4\u08E5\x05\x9AN\x02\u08E5\u08E7\x03\x02\x02\x02\u08E6\u08E2\x03" +
		"\x02\x02\x02\u08E7\u08EA\x03\x02\x02\x02\u08E8\u08E6\x03\x02\x02\x02\u08E8" +
		"\u08E9\x03\x02\x02\x02\u08E9\u08EC\x03\x02\x02\x02\u08EA\u08E8\x03\x02" +
		"\x02\x02\u08EB\u08ED\x05\xE0q\x02\u08EC\u08EB\x03\x02\x02\x02\u08EC\u08ED" +
		"\x03\x02\x02\x02\u08ED\u08EF\x03\x02\x02\x02\u08EE\u08E0\x03\x02\x02\x02" +
		"\u08EE\u08EF\x03\x02\x02\x02\u08EF\u08F0\x03\x02\x02\x02\u08F0\u08F1\x07" +
		"\x07\x02\x02\u08F1\u08F3\x03\x02\x02\x02\u08F2\u0857\x03\x02\x02\x02\u08F2" +
		"\u0865\x03\x02\x02\x02\u08F2\u088B\x03\x02\x02\x02\u08F2\u08C7\x03\x02" +
		"\x02\x02\u08F2\u08DB\x03\x02\x02\x02\u08F3\x8F\x03\x02\x02\x02\u08F4\u08F6" +
		"\x07%\x02\x02\u08F5\u08F4\x03\x02\x02\x02\u08F5\u08F6\x03\x02\x02\x02" +
		"\u08F6\u08F7\x03\x02\x02\x02\u08F7\u08F8\x05\u0126\x94\x02\u08F8\x91\x03" +
		"\x02\x02\x02\u08F9\u08FA\x07\x9F\x02\x02\u08FA\u08FB\x07\b\x02\x02\u08FB" +
		"\u0901\x05\u0126\x94\x02\u08FC\u08FD\x05\xE2r\x02\u08FD\u08FE\x05\u0126" +
		"\x94\x02\u08FE\u0900\x03\x02\x02\x02\u08FF\u08FC\x03\x02\x02\x02\u0900" +
		"\u0903\x03\x02\x02\x02\u0901\u08FF\x03\x02\x02\x02\u0901\u0902\x03\x02" +
		"\x02\x02\u0902\x93\x03\x02\x02\x02\u0903\u0901\x03\x02\x02\x02\u0904\u0905" +
		"\x07\x9F\x02\x02\u0905\u0906\t\x17\x02\x02\u0906\u090D\x05\u0126\x94\x02" +
		"\u0907\u0908\x07\x9F\x02\x02\u0908\u0909\t\x18\x02\x02\u0909\u090D\x05" +
		"\u0126\x94\x02\u090A\u090B\x07\x9F\x02\x02\u090B\u090D\x07q\x02\x02\u090C" +
		"\u0904\x03\x02\x02\x02\u090C\u0907\x03\x02\x02\x02\u090C\u090A\x03\x02" +
		"\x02\x02\u090D\x95\x03\x02\x02\x02\u090E\u090F\x07\x9E\x02\x02\u090F\u0910" +
		"\t\x19\x02\x02\u0910\u092E\x05\u0128\x95\x02\u0911\u0912\x07\x9E\x02\x02" +
		"\u0912\u0913\t\x1A\x02\x02\u0913\u0915\x05\u0128\x95\x02\u0914\u0916\x07" +
		"C\x02\x02\u0915\u0914\x03\x02\x02\x02\u0915\u0916\x03\x02\x02\x02\u0916" +
		"\u0918\x03\x02\x02\x02\u0917\u0919\x07C\x02\x02\u0918\u0917\x03\x02\x02" +
		"\x02\u0918\u0919\x03\x02\x02\x02\u0919\u091B\x03\x02\x02\x02\u091A\u091C" +
		"\x05\xDAn\x02\u091B\u091A\x03\x02\x02\x02\u091B\u091C\x03\x02\x02\x02" +
		"\u091C\u092E\x03\x02\x02\x02\u091D\u091E\x07\x9E\x02\x02\u091E\u091F\t" +
		"\x1A\x02\x02\u091F\u0923\x05\u0128\x95\x02\u0920\u0921\x07\t\x02\x02\u0921" +
		"\u0922\x07C\x02\x02\u0922\u0924\x07\n\x02\x02\u0923\u0920\x03\x02\x02" +
		"\x02\u0923\u0924\x03\x02\x02\x02\u0924\u0926\x03\x02\x02\x02\u0925\u0927" +
		"\x07C\x02\x02\u0926\u0925\x03\x02\x02\x02\u0926\u0927\x03\x02\x02\x02" +
		"\u0927\u0929\x03\x02\x02\x02\u0928\u092A\x05\xDAn\x02\u0929\u0928\x03" +
		"\x02\x02\x02\u0929\u092A\x03\x02\x02\x02\u092A\u092E\x03\x02\x02\x02\u092B" +
		"\u092C\x07\x9E\x02\x02\u092C\u092E\x07\x98\x02\x02\u092D\u090E\x03\x02" +
		"\x02\x02\u092D\u0911\x03\x02\x02\x02\u092D\u091D\x03\x02\x02\x02\u092D" +
		"\u092B\x03\x02\x02\x02\u092E\x97\x03\x02\x02\x02\u092F\u0930\x07\xA0\x02" +
		"\x02\u0930\u0949\x05\u013E\xA0\x02\u0931\u0932\x07\xA0\x02\x02\u0932\u0949" +
		"\x05\xEAv\x02\u0933\u0934\x07\xA0\x02\x02\u0934\u0949\x05\xEEx\x02\u0935" +
		"\u0936\x07\xA0\x02\x02\u0936\u0937\x05\xEAv\x02\u0937\u0938\x05\xECw\x02" +
		"\u0938\u0949\x03\x02\x02\x02\u0939\u093A\x07\xA0\x02\x02\u093A\u093B\x05" +
		"\xEAv\x02\u093B\u093C\x07X\x02\x02\u093C\u093D\x05\xEAv\x02\u093D\u0949" +
		"\x03\x02\x02\x02\u093E\u093F\x07\xA0\x02\x02\u093F\u0940\x05\xEAv\x02" +
		"\u0940\u0942\x07X\x02\x02\u0941\u0943\x07d\x02\x02\u0942\u0941\x03\x02" +
		"\x02\x02\u0942\u0943\x03\x02\x02\x02\u0943\u0944\x03\x02\x02\x02\u0944" +
		"\u0946\x05\u013E\xA0\x02\u0945\u0947\t\b\x02\x02\u0946\u0945\x03\x02\x02" +
		"\x02\u0946\u0947\x03\x02\x02\x02\u0947\u0949\x03\x02\x02\x02\u0948\u092F" +
		"\x03\x02\x02\x02\u0948\u0931\x03\x02\x02\x02\u0948\u0933\x03\x02\x02\x02" +
		"\u0948\u0935\x03\x02\x02\x02\u0948\u0939\x03\x02\x02\x02\u0948\u093E\x03" +
		"\x02\x02\x02\u0949\x99\x03\x02\x02\x02\u094A\u09BE\x05\x86D\x02\u094B" +
		"\u09BE\x07\x9A\x02\x02\u094C\u09BE\x05\x94K\x02\u094D\u09BE\x05\x96L\x02" +
		"\u094E\u09BE\x05\x98M\x02\u094F\u0950\x07\x90\x02\x02\u0950\u0951\x05" +
		"\xE6t\x02\u0951\u0952\x07\x06\x02\x02\u0952\u0961\x05\xE6t\x02\u0953\u0954" +
		"\x07\"\x02\x02\u0954\u095B\x05h5\x02\u0955\u0956\x05\xE0q\x02\u0956\u0957" +
		"\x07\"\x02\x02\u0957\u0958\x05h5\x02\u0958\u095A\x03\x02\x02\x02\u0959" +
		"\u0955\x03\x02\x02\x02\u095A\u095D\x03\x02\x02\x02\u095B\u0959\x03\x02" +
		"\x02\x02\u095B\u095C\x03\x02\x02\x02\u095C\u095F\x03\x02\x02\x02\u095D" +
		"\u095B\x03\x02\x02\x02\u095E\u0960\x05\xE0q\x02\u095F\u095E\x03\x02\x02" +
		"\x02\u095F\u0960\x03\x02\x02\x02\u0960\u0962\x03\x02\x02\x02\u0961\u0953" +
		"\x03\x02\x02\x02\u0961\u0962\x03\x02\x02\x02\u0962\u0963\x03\x02\x02\x02" +
		"\u0963\u0964\x07\x07\x02\x02\u0964\u09BE\x03\x02\x02\x02\u0965\u0966\x07" +
		"o\x02\x02\u0966\u0967\x05\xE6t\x02\u0967\u0968\x07\x06\x02\x02\u0968\u096F" +
		"\x05\xE6t\x02\u0969\u096A\x07\"\x02\x02\u096A\u096B\x05p9\x02\u096B\u096C" +
		"\x05\xE0q\x02\u096C\u096E\x03\x02\x02\x02\u096D\u0969\x03\x02\x02\x02" +
		"\u096E\u0971\x03\x02\x02\x02\u096F\u096D\x03\x02\x02\x02\u096F\u0970\x03" +
		"\x02\x02\x02\u0970\u0972\x03\x02\x02\x02\u0971\u096F\x03\x02\x02\x02\u0972" +
		"\u0973\x07\x07\x02\x02\u0973\u09BE\x03\x02\x02\x02\u0974\u09BE\x05p9\x02" +
		"\u0975\u0976\x07\x95\x02\x02\u0976\u0977\x07\x10\x02\x02\u0977\u09BE\x05" +
		"\x84C\x02\u0978\u0979\t\x1B\x02\x02\u0979\u09BE\x05z>\x02\u097A\u097B" +
		"\t\x1B\x02\x02\u097B\u097C\x07\x10\x02\x02\u097C\u09BE\x05|?\x02\u097D" +
		"\u097E\x07\x95\x02\x02\u097E\u097F\x05\xE6t\x02\u097F\u0980\x07\x06\x02" +
		"\x02\u0980\u098D\x05\xE6t\x02\u0981\u0987\x05\x82B\x02\u0982\u0983\x05" +
		"\xE0q\x02\u0983\u0984\x05\x82B\x02\u0984\u0986\x03\x02\x02\x02\u0985\u0982" +
		"\x03\x02\x02\x02\u0986\u0989\x03\x02\x02\x02\u0987\u0985\x03\x02\x02\x02" +
		"\u0987\u0988\x03\x02\x02\x02\u0988\u098B\x03\x02\x02\x02\u0989\u0987\x03" +
		"\x02\x02\x02\u098A\u098C\x05\xE0q\x02\u098B\u098A\x03\x02\x02\x02\u098B" +
		"\u098C\x03\x02\x02\x02\u098C\u098E\x03\x02\x02\x02\u098D\u0981\x03\x02" +
		"\x02\x02\u098D\u098E\x03\x02\x02\x02\u098E\u098F\x03\x02\x02\x02\u098F" +
		"\u0990\x07\x07\x02\x02\u0990\u09BE\x03\x02\x02\x02\u0991\u0992\x07\x96" +
		"\x02\x02\u0992\u0993\x05\xE6t\x02\u0993\u0994\x07\x06\x02\x02\u0994\u09A1" +
		"\x05\xE6t\x02\u0995\u099B\x05x=\x02\u0996\u0997\x05\xE0q\x02\u0997\u0998" +
		"\x05x=\x02\u0998\u099A\x03\x02\x02\x02\u0999\u0996\x03\x02\x02\x02\u099A" +
		"\u099D\x03\x02\x02\x02\u099B\u0999\x03\x02\x02\x02\u099B\u099C\x03\x02" +
		"\x02\x02\u099C\u099F\x03\x02\x02\x02\u099D\u099B\x03\x02\x02\x02\u099E" +
		"\u09A0\x05\xE0q\x02\u099F\u099E\x03\x02\x02\x02\u099F\u09A0\x03\x02\x02" +
		"\x02\u09A0\u09A2\x03\x02\x02\x02\u09A1\u0995\x03\x02\x02\x02\u09A1\u09A2" +
		"\x03\x02\x02\x02\u09A2\u09A3\x03\x02\x02\x02\u09A3\u09A4\x07\x07\x02\x02" +
		"\u09A4\u09BE\x03\x02\x02\x02\u09A5\u09A6\x07\xA2\x02\x02\u09A6\u09A7\x07" +
		"\x10\x02\x02\u09A7\u09BE\x05\x8CG\x02\u09A8\u09A9\x07\xA2\x02\x02\u09A9" +
		"\u09AA\x05\xE6t\x02\u09AA\u09AB\x07\x06\x02\x02\u09AB\u09B8\x05\xE6t\x02" +
		"\u09AC\u09B2\x05\x8CG\x02\u09AD\u09AE\x05\xE0q\x02\u09AE\u09AF\x05\x8C" +
		"G\x02\u09AF\u09B1\x03\x02\x02\x02\u09B0\u09AD\x03\x02\x02\x02\u09B1\u09B4" +
		"\x03\x02\x02\x02\u09B2\u09B0\x03\x02\x02\x02\u09B2\u09B3\x03\x02\x02\x02" +
		"\u09B3\u09B6\x03\x02\x02\x02\u09B4\u09B2\x03\x02\x02\x02\u09B5\u09B7\x05" +
		"\xE0q\x02\u09B6\u09B5\x03\x02\x02\x02\u09B6\u09B7\x03\x02\x02\x02\u09B7" +
		"\u09B9\x03\x02\x02\x02\u09B8\u09AC\x03\x02\x02\x02\u09B8\u09B9\x03\x02" +
		"\x02\x02\u09B9\u09BA\x03\x02\x02\x02\u09BA\u09BB\x07\x07\x02\x02\u09BB" +
		"\u09BE\x03\x02\x02\x02\u09BC\u09BE\x052\x1A\x02\u09BD\u094A\x03\x02\x02" +
		"\x02\u09BD\u094B\x03\x02\x02\x02\u09BD\u094C\x03\x02\x02\x02\u09BD\u094D" +
		"\x03\x02\x02\x02\u09BD\u094E\x03\x02\x02\x02\u09BD\u094F\x03\x02\x02\x02" +
		"\u09BD\u0965\x03\x02\x02\x02\u09BD\u0974\x03\x02\x02\x02\u09BD\u0975\x03" +
		"\x02\x02\x02\u09BD\u0978\x03\x02\x02\x02\u09BD\u097A\x03\x02\x02\x02\u09BD";
	private static readonly _serializedATNSegment5: string =
		"\u097D\x03\x02\x02\x02\u09BD\u0991\x03\x02\x02\x02\u09BD\u09A5\x03\x02" +
		"\x02\x02\u09BD\u09A8\x03\x02\x02\x02\u09BD\u09BC\x03\x02\x02\x02\u09BE" +
		"\x9B\x03\x02\x02\x02\u09BF\u09D7\x05\x9EP\x02\u09C0\u09C1\x05\u013E\xA0" +
		"\x02\u09C1\u09C2\x05\xE6t\x02\u09C2\u09C3\x07\x06\x02\x02\u09C3\u09D2" +
		"\x05\xE6t\x02\u09C4\u09C5\x07\"\x02\x02\u09C5\u09CC\x05\x9AN\x02\u09C6" +
		"\u09C7\x05\xE0q\x02\u09C7\u09C8\x07\"\x02\x02\u09C8\u09C9\x05\x9AN\x02" +
		"\u09C9\u09CB\x03\x02\x02\x02\u09CA\u09C6\x03\x02\x02\x02\u09CB\u09CE\x03" +
		"\x02\x02\x02\u09CC\u09CA\x03\x02\x02\x02\u09CC\u09CD\x03\x02\x02\x02\u09CD" +
		"\u09D0\x03\x02\x02\x02\u09CE\u09CC\x03\x02\x02\x02\u09CF\u09D1\x05\xE0" +
		"q\x02\u09D0\u09CF\x03\x02\x02\x02\u09D0\u09D1\x03\x02\x02\x02\u09D1\u09D3" +
		"\x03\x02\x02\x02\u09D2\u09C4\x03\x02\x02\x02\u09D2\u09D3\x03\x02\x02\x02" +
		"\u09D3\u09D4\x03\x02\x02\x02\u09D4\u09D5\x07\x07\x02\x02\u09D5\u09D7\x03" +
		"\x02\x02\x02\u09D6\u09BF\x03\x02\x02\x02\u09D6\u09C0\x03\x02\x02\x02\u09D7" +
		"\x9D\x03\x02\x02\x02\u09D8\u09D9\x05\u013E\xA0\x02\u09D9\u09DA\x05\xE6" +
		"t\x02\u09DA\u09DB\x07\"\x02\x02\u09DB\u09DC\x05\x9AN\x02\u09DC\x9F\x03" +
		"\x02\x02\x02\u09DD\u09DE\x07g\x02\x02\u09DE\u09DF\x05\xE6t\x02\u09DF\u09E0" +
		"\x07\x06\x02\x02\u09E0\u09ED\x05\xE6t\x02\u09E1\u09E7\x05\xA2R\x02\u09E2" +
		"\u09E3\x05\xE0q\x02\u09E3\u09E4\x05\xA2R\x02\u09E4\u09E6\x03\x02\x02\x02" +
		"\u09E5\u09E2\x03\x02\x02\x02\u09E6\u09E9\x03\x02\x02\x02\u09E7\u09E5\x03" +
		"\x02\x02\x02\u09E7\u09E8\x03\x02\x02\x02\u09E8\u09EB\x03\x02\x02\x02\u09E9" +
		"\u09E7\x03\x02\x02\x02\u09EA\u09EC\x05\xE0q\x02\u09EB\u09EA\x03\x02\x02" +
		"\x02\u09EB\u09EC\x03\x02\x02\x02\u09EC\u09EE\x03\x02\x02\x02\u09ED\u09E1" +
		"\x03\x02\x02\x02\u09ED\u09EE\x03\x02\x02\x02\u09EE\u09EF\x03\x02\x02\x02" +
		"\u09EF\u09F0\x07\x07\x02\x02\u09F0\xA1\x03\x02\x02\x02\u09F1\u09F2\x05" +
		"\xEAv\x02\u09F2\u09F4\x05\xF2z\x02\u09F3\u09F5\t\x1C\x02\x02\u09F4\u09F3" +
		"\x03\x02\x02\x02\u09F4\u09F5\x03\x02\x02\x02\u09F5\u0A14\x03\x02\x02\x02" +
		"\u09F6\u09F7\x05\xEAv\x02\u09F7\u09F8\x05\xEAv\x02\u09F8\u09FA\x05\xF2" +
		"z\x02\u09F9\u09FB\t\x1D\x02\x02\u09FA\u09F9\x03\x02\x02\x02\u09FA\u09FB" +
		"\x03\x02\x02\x02\u09FB\u0A14\x03\x02\x02\x02\u09FC\u09FD\x05\xEAv\x02" +
		"\u09FD\u09FE\x05\xEAv\x02\u09FE\u09FF\x05\xF2z\x02\u09FF\u0A00\x07\xA6" +
		"\x02\x02\u0A00\u0A01\x05\u0136\x9C\x02\u0A01\u0A14\x03\x02\x02\x02\u0A02" +
		"\u0A03\x05\xEAv\x02\u0A03\u0A04\x05\xEAv\x02\u0A04\u0A06\x05\xEAv\x02" +
		"\u0A05\u0A07\t\x1E\x02\x02\u0A06\u0A05\x03\x02\x02\x02\u0A06\u0A07\x03" +
		"\x02\x02\x02\u0A07\u0A09\x03\x02\x02\x02\u0A08\u0A0A\t\x1F\x02\x02\u0A09" +
		"\u0A08\x03\x02\x02\x02\u0A09\u0A0A\x03\x02\x02\x02\u0A0A\u0A14\x03\x02" +
		"\x02\x02\u0A0B\u0A0C\x05\xEAv\x02\u0A0C\u0A0D\x05\xEAv\x02\u0A0D\u0A0E" +
		"\x05\xEAv\x02\u0A0E\u0A0F\x07\xAC\x02\x02\u0A0F\u0A11\x05\u0136\x9C\x02" +
		"\u0A10\u0A12\t\x1F\x02\x02\u0A11\u0A10\x03\x02\x02\x02\u0A11\u0A12\x03" +
		"\x02\x02\x02\u0A12\u0A14\x03\x02\x02\x02\u0A13\u09F1\x03\x02\x02\x02\u0A13" +
		"\u09F6\x03\x02\x02\x02\u0A13\u09FC\x03\x02\x02\x02\u0A13\u0A02\x03\x02" +
		"\x02\x02\u0A13\u0A0B\x03\x02\x02\x02\u0A14\xA3\x03\x02\x02\x02\u0A15\u0A16" +
		"\x07\xAD\x02\x02\u0A16\u0A17\x05\u0100\x81\x02\u0A17\u0A18\x05\xB2Z\x02" +
		"\u0A18\u0A1E\x03\x02\x02\x02\u0A19\u0A1A\x07\xAD\x02\x02\u0A1A\u0A1B\x05" +
		"<\x1F\x02\u0A1B\u0A1C\x05\xB2Z\x02\u0A1C\u0A1E\x03\x02\x02\x02\u0A1D\u0A15" +
		"\x03\x02\x02\x02\u0A1D\u0A19\x03\x02\x02\x02\u0A1E\xA5\x03\x02\x02\x02" +
		"\u0A1F\u0A20\x05<\x1F\x02\u0A20\u0A21\x07\b\x02\x02\u0A21\u0A22\x05\xA8" +
		"U\x02\u0A22\xA7\x03\x02\x02\x02\u0A23\u0A24\bU\x01\x02\u0A24\u0A25\x07" +
		"\x06\x02\x02\u0A25\u0A2B\x05\xE6t\x02\u0A26\u0A27\x058\x1D\x02\u0A27\u0A28" +
		"\x05\xE4s\x02\u0A28\u0A2A\x03\x02\x02\x02\u0A29\u0A26\x03\x02\x02\x02" +
		"\u0A2A\u0A2D\x03\x02\x02\x02\u0A2B\u0A29\x03\x02\x02\x02\u0A2B\u0A2C\x03" +
		"\x02\x02\x02\u0A2C\u0A2E\x03\x02\x02\x02\u0A2D\u0A2B\x03\x02\x02\x02\u0A2E" +
		"\u0A2F\x07\x07\x02\x02\u0A2F\u0A3D\x03\x02\x02\x02\u0A30\u0A3D\x05<\x1F" +
		"\x02\u0A31\u0A3D\x05.\x18\x02\u0A32\u0A3D\x07>\x02\x02\u0A33\u0A3D\x07" +
		"?\x02\x02\u0A34\u0A35\x07&\x02\x02\u0A35\u0A3D\x05\xA8U\b\u0A36\u0A37" +
		"\x07\t\x02\x02\u0A37\u0A38\x05\xE6t\x02\u0A38\u0A39\x05\xA8U\x02\u0A39" +
		"\u0A3A\x05\xE6t\x02\u0A3A\u0A3B\x07\n\x02\x02\u0A3B\u0A3D\x03\x02\x02" +
		"\x02\u0A3C\u0A23\x03\x02\x02\x02\u0A3C\u0A30\x03\x02\x02\x02\u0A3C\u0A31" +
		"\x03\x02\x02\x02\u0A3C\u0A32\x03\x02\x02\x02\u0A3C\u0A33\x03\x02\x02\x02" +
		"\u0A3C\u0A34\x03\x02\x02\x02\u0A3C\u0A36\x03\x02\x02\x02\u0A3D\u0A58\x03" +
		"\x02\x02\x02\u0A3E\u0A3F\f\x07\x02\x02\u0A3F\u0A40\x05\xE6t\x02\u0A40" +
		"\u0A41\x07\'\x02\x02\u0A41\u0A42\x05\xE6t\x02\u0A42\u0A43\x05\xA8U\b\u0A43" +
		"\u0A57\x03\x02\x02\x02\u0A44\u0A45\f\x06\x02\x02\u0A45\u0A46\x05\xE6t" +
		"\x02\u0A46\u0A47\x07(\x02\x02\u0A47\u0A48\x05\xE6t\x02\u0A48\u0A49\x05" +
		"\xA8U\x07\u0A49\u0A57\x03\x02\x02\x02\u0A4A\u0A4B\f\x05\x02\x02\u0A4B" +
		"\u0A4C\x05\xE6t\x02\u0A4C\u0A4D\x07)\x02\x02\u0A4D\u0A4E\x05\xE6t\x02" +
		"\u0A4E\u0A4F\x05\xA8U\x06\u0A4F\u0A57\x03\x02\x02\x02\u0A50\u0A51\f\x04" +
		"\x02\x02\u0A51\u0A52\x05\xE6t\x02\u0A52\u0A53\x07*\x02\x02\u0A53\u0A54" +
		"\x05\xE6t\x02\u0A54\u0A55\x05\xA8U\x05\u0A55\u0A57\x03\x02\x02\x02\u0A56" +
		"\u0A3E\x03\x02\x02\x02\u0A56\u0A44\x03\x02\x02\x02\u0A56\u0A4A\x03\x02" +
		"\x02\x02\u0A56\u0A50\x03\x02\x02\x02\u0A57\u0A5A\x03\x02\x02\x02\u0A58" +
		"\u0A56\x03\x02\x02\x02\u0A58\u0A59\x03\x02\x02\x02\u0A59\xA9\x03\x02\x02" +
		"\x02\u0A5A\u0A58\x03\x02\x02\x02\u0A5B\u0A5C\x07]\x02\x02\u0A5C\u0A5D" +
		"\x05\xE6t\x02\u0A5D\u0A5E\x05\xA8U\x02\u0A5E\u0A5F\x05\xE6t\x02\u0A5F" +
		"\u0A63\x056\x1C\x02\u0A60\u0A61\x05\xE6t\x02\u0A61\u0A62\x05\xACW\x02" +
		"\u0A62\u0A64\x03\x02\x02\x02\u0A63\u0A60\x03\x02\x02\x02\u0A63\u0A64\x03" +
		"\x02\x02\x02\u0A64\xAB\x03\x02\x02\x02\u0A65\u0A66\x07\xAF\x02\x02\u0A66" +
		"\u0A67\x05\xE6t\x02\u0A67\u0A68\x056\x1C\x02\u0A68\u0A6E\x03\x02\x02\x02" +
		"\u0A69\u0A6A\x07\xAF\x02\x02\u0A6A\u0A6B\x05\xE6t\x02\u0A6B\u0A6C\x05" +
		"\xAAV\x02\u0A6C\u0A6E\x03\x02\x02\x02\u0A6D\u0A65\x03\x02\x02\x02\u0A6D" +
		"\u0A69\x03\x02\x02\x02\u0A6E\xAD\x03\x02\x02\x02\u0A6F\u0A70\x07\xAE\x02" +
		"\x02\u0A70\u0A71\x05\xE6t\x02\u0A71\u0A72\x07\x06\x02\x02\u0A72\u0A78" +
		"\x05\xE6t\x02\u0A73\u0A74\x058\x1D\x02\u0A74\u0A75\x05\xE4s\x02\u0A75" +
		"\u0A77\x03\x02\x02\x02\u0A76\u0A73\x03\x02\x02\x02\u0A77\u0A7A\x03\x02" +
		"\x02\x02\u0A78\u0A76\x03\x02\x02\x02\u0A78\u0A79\x03\x02\x02\x02\u0A79" +
		"\u0A7B\x03\x02\x02\x02\u0A7A\u0A78\x03\x02\x02\x02\u0A7B\u0A7C\x07\x07" +
		"\x02\x02\u0A7C\u0A7D\x05\xE6t\x02\u0A7D\u0A7E\x056\x1C\x02\u0A7E\u0A86" +
		"\x03\x02\x02\x02\u0A7F\u0A80\x07\xAE\x02\x02\u0A80\u0A81\x05\xE6t\x02" +
		"\u0A81\u0A82\x05\xA8U\x02\u0A82\u0A83\x05\xE6t\x02\u0A83\u0A84\x056\x1C" +
		"\x02\u0A84\u0A86\x03\x02\x02\x02\u0A85\u0A6F\x03\x02\x02\x02\u0A85\u0A7F" +
		"\x03\x02\x02\x02\u0A86\xAF\x03\x02\x02\x02\u0A87\u0A88\x07\xB0\x02\x02" +
		"\u0A88\u0A89\x05\xE6t\x02\u0A89\u0A8A\x07\x06\x02\x02\u0A8A\u0A8B\x05" +
		"\xE6t\x02\u0A8B\u0A8C\x05F$\x02\u0A8C\u0A8D\x05\xE6t\x02\u0A8D\u0A8E\x07" +
		"\x07\x02\x02\u0A8E\u0A8F\x05\xE6t\x02\u0A8F\u0A90\x056\x1C\x02\u0A90\xB1" +
		"\x03\x02\x02\x02\u0A91\u0A92\x05\xBA^\x02\u0A92\xB3\x03\x02\x02\x02\u0A93" +
		"\u0A94\x05\xCEh\x02\u0A94\xB5\x03\x02\x02\x02\u0A95\u0AB3\x05\u0126\x94" +
		"\x02\u0A96\u0A97\x05\u0126\x94\x02\u0A97\u0A98\x05\xBE`\x02\u0A98\u0AB3" +
		"\x03\x02\x02\x02\u0A99\u0AA3\x05\u0126\x94\x02\u0A9A\u0A9B\x07\x04\x02" +
		"\x02\u0A9B\u0A9C\x05\xE6t\x02\u0A9C\u0A9D\x07C\x02\x02\u0A9D\u0A9E\x05" +
		"\xE6t\x02\u0A9E\u0A9F\x07\x05\x02\x02\u0A9F\u0AA2\x03\x02\x02\x02\u0AA0" +
		"\u0AA2\x07+\x02\x02\u0AA1\u0A9A\x03\x02\x02\x02\u0AA1\u0AA0\x03\x02\x02" +
		"\x02\u0AA2\u0AA5\x03\x02\x02\x02\u0AA3\u0AA1\x03\x02\x02\x02\u0AA3\u0AA4" +
		"\x03\x02\x02\x02\u0AA4\u0AAC\x03\x02\x02\x02\u0AA5\u0AA3\x03\x02\x02\x02" +
		"\u0AA6\u0AA7\x07\x04\x02\x02\u0AA7\u0AA8\x05\xE6t\x02\u0AA8\u0AA9\x05" +
		"\xBE`\x02\u0AA9\u0AAA\x05\xE6t\x02\u0AAA\u0AAB\x07\x05\x02\x02\u0AAB\u0AAD" +
		"\x03\x02\x02\x02\u0AAC\u0AA6\x03\x02\x02\x02\u0AAC\u0AAD\x03\x02\x02\x02" +
		"\u0AAD\u0AB3\x03\x02\x02\x02\u0AAE\u0AAF\x05\xB8]\x02\u0AAF\u0AB0\x07" +
		"\"\x02\x02\u0AB0\u0AB1\x05\xB8]\x02\u0AB1\u0AB3\x03\x02\x02\x02\u0AB2" +
		"\u0A95\x03\x02\x02\x02\u0AB2\u0A96\x03\x02\x02\x02\u0AB2\u0A99\x03\x02" +
		"\x02\x02\u0AB2\u0AAE\x03\x02\x02\x02\u0AB3\xB7\x03\x02\x02\x02\u0AB4\u0AB5" +
		"\b]\x01\x02\u0AB5\u0AD0\x05\u0126\x94\x02\u0AB6\u0AD0\x05\xBE`\x02\u0AB7" +
		"\u0AB8\x05\u0126\x94\x02\u0AB8\u0AB9\x05\xBE`\x02\u0AB9\u0AD0\x03\x02" +
		"\x02\x02\u0ABA\u0AC4\x05\u0126\x94\x02\u0ABB\u0ABC\x07\x04\x02\x02\u0ABC" +
		"\u0ABD\x05\xE6t\x02\u0ABD\u0ABE\x07C\x02\x02\u0ABE\u0ABF\x05\xE6t\x02" +
		"\u0ABF\u0AC0\x07\x05\x02\x02\u0AC0\u0AC3\x03\x02\x02\x02\u0AC1\u0AC3\x07" +
		"+\x02\x02\u0AC2\u0ABB\x03\x02\x02\x02\u0AC2\u0AC1\x03\x02\x02\x02\u0AC3" +
		"\u0AC6\x03\x02\x02\x02\u0AC4\u0AC2\x03\x02\x02\x02\u0AC4\u0AC5\x03\x02" +
		"\x02\x02\u0AC5\u0ACD\x03\x02\x02\x02\u0AC6\u0AC4\x03\x02\x02\x02\u0AC7" +
		"\u0AC8\x07\x04\x02\x02\u0AC8\u0AC9\x05\xE6t\x02\u0AC9\u0ACA\x05\xBE`\x02" +
		"\u0ACA\u0ACB\x05\xE6t\x02\u0ACB\u0ACC\x07\x05\x02\x02\u0ACC\u0ACE\x03" +
		"\x02\x02\x02\u0ACD\u0AC7\x03\x02\x02\x02\u0ACD\u0ACE\x03\x02\x02\x02\u0ACE" +
		"\u0AD0\x03\x02\x02\x02\u0ACF\u0AB4\x03\x02\x02\x02\u0ACF\u0AB6\x03\x02" +
		"\x02\x02\u0ACF\u0AB7\x03\x02\x02\x02\u0ACF\u0ABA\x03\x02\x02\x02\u0AD0" +
		"\u0AD6\x03\x02\x02\x02\u0AD1\u0AD2\f\x03\x02\x02\u0AD2\u0AD3\x07\"\x02" +
		"\x02\u0AD3\u0AD5\x05\xB8]\x04\u0AD4\u0AD1\x03\x02\x02\x02\u0AD5\u0AD8" +
		"\x03\x02\x02\x02\u0AD6\u0AD4\x03\x02\x02\x02\u0AD6\u0AD7\x03\x02\x02\x02" +
		"\u0AD7\xB9\x03\x02\x02\x02\u0AD8\u0AD6\x03\x02\x02\x02\u0AD9\u0ADA\x07" +
		",\x02\x02\u0ADA\u0ADB\x05\xE6t\x02\u0ADB\u0AE2\x05\xC0a\x02\u0ADC\u0ADD" +
		"\x07$\x02\x02\u0ADD\u0ADE\x05\xE6t\x02\u0ADE\u0ADF\x05\xC0a\x02\u0ADF" +
		"\u0AE1\x03\x02\x02\x02\u0AE0\u0ADC\x03\x02\x02\x02\u0AE1\u0AE4\x03\x02" +
		"\x02\x02\u0AE2\u0AE0\x03\x02\x02\x02\u0AE2\u0AE3\x03\x02\x02\x02\u0AE3" +
		"\u0AE5\x03\x02\x02\x02\u0AE4\u0AE2\x03\x02\x02\x02\u0AE5\u0AE6\x05\xE6" +
		"t\x02\u0AE6\u0AE7\x07\x07\x02\x02\u0AE7\u0B30\x03\x02\x02\x02\u0AE8\u0AE9" +
		"\x07,\x02\x02\u0AE9\u0B30\x07\x07\x02\x02\u0AEA\u0AEB\x07-\x02\x02\u0AEB" +
		"\u0AEC\x05\xE6t\x02\u0AEC\u0AF3\x05\xC4c\x02\u0AED\u0AEE\x07$\x02\x02" +
		"\u0AEE\u0AEF\x05\xE6t\x02\u0AEF\u0AF0\x05\xC4c\x02\u0AF0\u0AF2\x03\x02" +
		"\x02\x02\u0AF1\u0AED\x03\x02\x02\x02\u0AF2\u0AF5\x03\x02\x02\x02\u0AF3" +
		"\u0AF1\x03\x02\x02\x02\u0AF3\u0AF4\x03\x02\x02\x02\u0AF4\u0AF6\x03\x02" +
		"\x02\x02\u0AF5\u0AF3\x03\x02\x02\x02\u0AF6\u0AF7\x05\xE6t\x02\u0AF7\u0AF8" +
		"\x07\x05\x02\x02\u0AF8\u0B30\x03\x02\x02\x02\u0AF9\u0AFA\x07-\x02\x02" +
		"\u0AFA\u0B30\x07\x05\x02\x02\u0AFB\u0AFC\x07.\x02\x02\u0AFC\u0AFD\x05" +
		"\xE6t\x02\u0AFD\u0B04\x078\x02\x02\u0AFE\u0AFF\x07$\x02\x02\u0AFF\u0B00" +
		"\x05\xE6t\x02\u0B00\u0B01\x078\x02\x02\u0B01\u0B03\x03\x02\x02\x02\u0B02" +
		"\u0AFE\x03\x02\x02\x02\u0B03\u0B06\x03\x02\x02\x02\u0B04\u0B02\x03\x02" +
		"\x02\x02\u0B04\u0B05\x03\x02\x02\x02\u0B05\u0B07\x03\x02\x02\x02\u0B06" +
		"\u0B04\x03\x02\x02\x02\u0B07\u0B08\x05\xE6t\x02\u0B08\u0B09\x07\x05\x02" +
		"\x02\u0B09\u0B30\x03\x02\x02\x02\u0B0A\u0B0B\x07/\x02\x02\u0B0B\u0B0C" +
		"\x05\xE6t\x02\u0B0C\u0B13\x07C\x02\x02\u0B0D\u0B0E\x07$\x02\x02\u0B0E" +
		"\u0B0F\x05\xE6t\x02\u0B0F\u0B10\x07C\x02\x02\u0B10\u0B12\x03\x02\x02\x02" +
		"\u0B11\u0B0D\x03\x02\x02\x02\u0B12\u0B15\x03\x02\x02\x02\u0B13\u0B11\x03" +
		"\x02\x02\x02\u0B13\u0B14\x03\x02\x02\x02\u0B14\u0B16\x03\x02\x02\x02\u0B15" +
		"\u0B13\x03\x02\x02\x02\u0B16\u0B17\x05\xE6t\x02\u0B17\u0B18\x07\x05\x02" +
		"\x02\u0B18\u0B30\x03\x02\x02\x02\u0B19\u0B1A\x070\x02\x02\u0B1A\u0B1B" +
		"\x05\xE6t\x02\u0B1B\u0B22\x07:\x02\x02\u0B1C\u0B1D\x07$\x02\x02\u0B1D" +
		"\u0B1E\x05\xE6t\x02\u0B1E\u0B1F\x07:\x02\x02\u0B1F\u0B21\x03\x02\x02\x02" +
		"\u0B20\u0B1C\x03\x02\x02\x02\u0B21\u0B24\x03\x02\x02\x02\u0B22\u0B20\x03" +
		"\x02\x02\x02\u0B22\u0B23\x03\x02\x02\x02\u0B23\u0B25\x03\x02\x02\x02\u0B24" +
		"\u0B22\x03\x02\x02\x02\u0B25\u0B26\x05\xE6t\x02\u0B26\u0B27\x07\x05\x02" +
		"\x02\u0B27\u0B30\x03\x02\x02\x02\u0B28\u0B30\x05\xCCg\x02\u0B29\u0B30" +
		"\x078\x02\x02\u0B2A\u0B30\x079\x02\x02\u0B2B\u0B30\x07:\x02\x02\u0B2C" +
		"\u0B30\x05\xDCo\x02\u0B2D\u0B30\x07;\x02\x02\u0B2E\u0B30\x07<\x02\x02" +
		"\u0B2F\u0AD9\x03\x02\x02\x02\u0B2F\u0AE8\x03\x02\x02\x02\u0B2F\u0AEA\x03" +
		"\x02\x02\x02\u0B2F\u0AF9\x03\x02\x02\x02\u0B2F\u0AFB\x03\x02\x02\x02\u0B2F" +
		"\u0B0A\x03\x02\x02\x02\u0B2F\u0B19\x03\x02\x02\x02\u0B2F\u0B28\x03\x02" +
		"\x02\x02\u0B2F\u0B29\x03\x02\x02\x02\u0B2F\u0B2A\x03\x02\x02\x02\u0B2F" +
		"\u0B2B\x03\x02\x02\x02\u0B2F\u0B2C\x03\x02\x02\x02\u0B2F\u0B2D\x03\x02" +
		"\x02\x02\u0B2F\u0B2E\x03\x02\x02\x02\u0B30\xBB\x03\x02\x02\x02\u0B31\u0B32" +
		"\x05\xC4c\x02\u0B32\xBD\x03\x02\x02\x02\u0B33\u0B34\x07\x06\x02\x02\u0B34" +
		"\u0B35\x05\xE6t\x02\u0B35\u0B3C\x05\xC0a\x02\u0B36\u0B37\x07$\x02\x02" +
		"\u0B37\u0B38\x05\xE6t\x02\u0B38\u0B39\x05\xC0a\x02\u0B39\u0B3B\x03\x02" +
		"\x02\x02\u0B3A\u0B36\x03\x02\x02\x02\u0B3B\u0B3E\x03\x02\x02\x02\u0B3C" +
		"\u0B3A\x03\x02\x02\x02\u0B3C\u0B3D\x03\x02\x02\x02\u0B3D\u0B3F\x03\x02" +
		"\x02\x02\u0B3E\u0B3C\x03\x02\x02\x02\u0B3F\u0B40\x05\xE6t\x02\u0B40\u0B41" +
		"\x07\x07\x02\x02\u0B41\u0B45\x03\x02\x02\x02\u0B42\u0B43\x07\x06\x02\x02" +
		"\u0B43\u0B45\x07\x07\x02\x02\u0B44\u0B33\x03\x02\x02\x02\u0B44\u0B42\x03" +
		"\x02\x02\x02\u0B45\xBF\x03\x02\x02\x02\u0B46\u0B47\x05\u0126\x94\x02\u0B47" +
		"\u0B48\x05\xE6t\x02\u0B48\u0B49\x07!\x02\x02\u0B49\u0B4A\x05\xE6t\x02" +
		"\u0B4A\u0B4B\x05\xC4c\x02\u0B4B\xC1\x03\x02\x02\x02\u0B4C\u0B4D\x07\x04" +
		"\x02\x02\u0B4D\u0B4E\x05\xE6t\x02\u0B4E\u0B55\x05\xC4c\x02\u0B4F\u0B50" +
		"\x07$\x02\x02\u0B50\u0B51\x05\xE6t\x02\u0B51\u0B52\x05\xC4c\x02\u0B52" +
		"\u0B54\x03\x02\x02\x02\u0B53\u0B4F\x03\x02\x02\x02\u0B54\u0B57\x03\x02" +
		"\x02\x02\u0B55\u0B53\x03\x02\x02\x02\u0B55\u0B56\x03\x02\x02\x02\u0B56" +
		"\u0B58\x03\x02\x02\x02\u0B57\u0B55\x03\x02\x02\x02\u0B58\u0B59\x05\xE6" +
		"t\x02\u0B59\u0B5A\x07\x05\x02\x02\u0B5A\u0B5F\x03\x02\x02\x02\u0B5B\u0B5C" +
		"\x07\x04\x02\x02\u0B5C\u0B5F\x07\x05\x02\x02\u0B5D\u0B5F\x07+\x02\x02" +
		"\u0B5E\u0B4C\x03\x02\x02\x02\u0B5E\u0B5B\x03\x02\x02\x02\u0B5E\u0B5D\x03" +
		"\x02\x02\x02\u0B5F\xC3\x03\x02\x02\x02\u0B60\u0B6D\x05\xBE`\x02\u0B61" +
		"\u0B6D\x05\xC2b\x02\u0B62\u0B6D\x05\xC6d\x02\u0B63\u0B6D\x05\xC8e\x02" +
		"\u0B64\u0B6D\x05\xCAf\x02\u0B65\u0B6D\x05\xCCg\x02\u0B66\u0B6D\x078\x02" +
		"\x02\u0B67\u0B6D\x079\x02\x02\u0B68\u0B6D\x07:\x02\x02\u0B69\u0B6D\x05" +
		"\xDCo\x02\u0B6A\u0B6D\x07;\x02\x02\u0B6B\u0B6D\x07<\x02\x02\u0B6C\u0B60" +
		"\x03\x02\x02\x02\u0B6C\u0B61\x03\x02\x02\x02\u0B6C\u0B62\x03\x02\x02\x02" +
		"\u0B6C\u0B63\x03\x02\x02\x02\u0B6C\u0B64\x03\x02\x02\x02\u0B6C\u0B65\x03" +
		"\x02\x02\x02\u0B6C\u0B66\x03\x02\x02\x02\u0B6C\u0B67\x03\x02\x02\x02\u0B6C" +
		"\u0B68\x03\x02\x02\x02\u0B6C\u0B69\x03\x02\x02\x02\u0B6C\u0B6A\x03\x02" +
		"\x02\x02\u0B6C\u0B6B\x03\x02\x02\x02\u0B6D\xC5\x03\x02\x02\x02\u0B6E\u0B6F" +
		"\x071\x02\x02\u0B6F\u0B70\x05\xE6t\x02\u0B70\u0B77\x078\x02\x02\u0B71" +
		"\u0B72\x07$\x02\x02\u0B72\u0B73\x05\xE6t\x02\u0B73\u0B74\x078\x02\x02" +
		"\u0B74\u0B76\x03\x02\x02\x02\u0B75\u0B71\x03\x02\x02\x02\u0B76\u0B79\x03" +
		"\x02\x02\x02\u0B77\u0B75\x03\x02\x02\x02\u0B77\u0B78\x03\x02\x02\x02\u0B78" +
		"\u0B7A\x03\x02\x02\x02\u0B79\u0B77\x03\x02\x02\x02\u0B7A\u0B7B\x05\xE6" +
		"t\x02\u0B7B\u0B7C\x07\x05\x02\x02\u0B7C\xC7\x03\x02\x02\x02\u0B7D\u0B7E" +
		"\x072\x02\x02\u0B7E\u0B7F\x05\xE6t\x02\u0B7F\u0B86\x07C\x02\x02\u0B80" +
		"\u0B81\x07$\x02\x02\u0B81\u0B82\x05\xE6t\x02\u0B82\u0B83\x07C\x02\x02" +
		"\u0B83\u0B85\x03\x02\x02\x02\u0B84\u0B80\x03\x02\x02\x02\u0B85\u0B88\x03" +
		"\x02\x02\x02\u0B86\u0B84\x03\x02\x02\x02\u0B86\u0B87\x03\x02\x02\x02\u0B87" +
		"\u0B89\x03\x02\x02\x02\u0B88\u0B86\x03\x02\x02\x02\u0B89\u0B8A\x05\xE6" +
		"t\x02\u0B8A\u0B8B\x07\x05\x02\x02\u0B8B\xC9\x03\x02\x02\x02\u0B8C\u0B8D" +
		"\x073\x02\x02\u0B8D\u0B8E\x05\xE6t\x02\u0B8E\u0B95\x07:\x02\x02\u0B8F" +
		"\u0B90\x07$\x02\x02\u0B90\u0B91\x05\xE6t\x02\u0B91\u0B92\x07:\x02\x02" +
		"\u0B92\u0B94\x03\x02\x02\x02\u0B93\u0B8F\x03\x02\x02\x02\u0B94\u0B97\x03" +
		"\x02\x02\x02\u0B95\u0B93\x03\x02\x02\x02\u0B95\u0B96\x03\x02\x02\x02\u0B96" +
		"\u0B98\x03\x02\x02\x02\u0B97\u0B95\x03\x02\x02\x02\u0B98\u0B99\x05\xE6" +
		"t\x02\u0B99\u0B9A\x07\x05\x02\x02\u0B9A\xCB\x03\x02\x02\x02\u0B9B\u0B9C" +
		"\t \x02\x02\u0B9C\xCD\x03\x02\x02\x02\u0B9D\u0B9E\x074\x02\x02\u0B9E\u0B9F" +
		"\x05\xE6t\x02\u0B9F\u0BA6\x05\xD4k\x02\u0BA0\u0BA1\x07$\x02\x02\u0BA1" +
		"\u0BA2\x05\xE6t\x02\u0BA2\u0BA3\x05\xD4k\x02\u0BA3\u0BA5\x03\x02\x02\x02" +
		"\u0BA4\u0BA0\x03\x02\x02\x02\u0BA5\u0BA8\x03\x02\x02\x02\u0BA6\u0BA4\x03" +
		"\x02\x02\x02\u0BA6\u0BA7\x03\x02\x02\x02\u0BA7\u0BA9\x03\x02\x02\x02\u0BA8" +
		"\u0BA6\x03\x02\x02\x02\u0BA9\u0BAA\x05\xE6t\x02\u0BAA\u0BAB\x07\x07\x02" +
		"\x02\u0BAB\u0BC5\x03\x02\x02\x02\u0BAC\u0BAD\x074\x02\x02\u0BAD\u0BC5" +
		"\x07\x07\x02\x02\u0BAE\u0BAF\x075\x02\x02\u0BAF\u0BB0\x05\xE6t\x02\u0BB0" +
		"\u0BB7\x05\xD8m\x02\u0BB1\u0BB2\x07$\x02\x02\u0BB2\u0BB3\x05\xE6t\x02" +
		"\u0BB3\u0BB4\x05\xD8m\x02\u0BB4\u0BB6\x03\x02\x02\x02\u0BB5\u0BB1\x03" +
		"\x02\x02\x02\u0BB6\u0BB9\x03\x02\x02\x02\u0BB7\u0BB5\x03\x02\x02\x02\u0BB7" +
		"\u0BB8\x03\x02\x02\x02\u0BB8\u0BBA\x03\x02\x02\x02\u0BB9\u0BB7\x03\x02" +
		"\x02\x02\u0BBA\u0BBB\x05\xE6t\x02\u0BBB\u0BBC\x07\x05\x02\x02\u0BBC\u0BC5" +
		"\x03\x02\x02\x02\u0BBD\u0BBE\x075\x02\x02\u0BBE\u0BC5\x07\x05\x02\x02" +
		"\u0BBF\u0BC5\x07A\x02\x02\u0BC0\u0BC5\x05\xDCo\x02\u0BC1\u0BC5\x07>\x02" +
		"\x02\u0BC2\u0BC5\x07?\x02\x02\u0BC3\u0BC5\x07@\x02\x02\u0BC4\u0B9D\x03" +
		"\x02\x02\x02\u0BC4\u0BAC\x03\x02\x02\x02\u0BC4\u0BAE\x03\x02\x02\x02\u0BC4" +
		"\u0BBD\x03\x02\x02\x02\u0BC4\u0BBF\x03\x02\x02\x02\u0BC4\u0BC0\x03\x02" +
		"\x02\x02\u0BC4\u0BC1\x03\x02\x02\x02\u0BC4\u0BC2\x03\x02\x02\x02\u0BC4" +
		"\u0BC3\x03\x02\x02\x02\u0BC5\xCF\x03\x02\x02\x02\u0BC6\u0BC7\x05\xD8m" +
		"\x02\u0BC7\xD1\x03\x02\x02\x02\u0BC8\u0BC9\x07\x06\x02\x02\u0BC9\u0BCA" +
		"\x05\xE6t\x02\u0BCA\u0BD1\x05\xD4k\x02\u0BCB\u0BCC\x07$\x02\x02\u0BCC" +
		"\u0BCD\x05\xE6t\x02\u0BCD\u0BCE\x05\xD4k\x02\u0BCE\u0BD0\x03\x02\x02\x02" +
		"\u0BCF\u0BCB\x03\x02\x02\x02\u0BD0\u0BD3\x03\x02\x02\x02\u0BD1\u0BCF\x03" +
		"\x02\x02\x02\u0BD1\u0BD2\x03\x02\x02\x02\u0BD2\u0BD4\x03\x02\x02\x02\u0BD3" +
		"\u0BD1\x03\x02\x02\x02\u0BD4\u0BD5\x05\xE6t\x02\u0BD5\u0BD6\x07\x07\x02" +
		"\x02\u0BD6\u0BDA\x03\x02\x02\x02\u0BD7\u0BD8\x07\x06\x02\x02\u0BD8\u0BDA" +
		"\x07\x07\x02\x02\u0BD9\u0BC8\x03\x02\x02\x02\u0BD9\u0BD7\x03\x02\x02\x02" +
		"\u0BDA\xD3\x03\x02\x02\x02\u0BDB\u0BDC\x07A\x02\x02\u0BDC\u0BDD\x05\xE6" +
		"t\x02\u0BDD\u0BDE\x07!\x02\x02\u0BDE\u0BDF\x05\xE6t\x02\u0BDF\u0BE0\x05" +
		"\xD8m\x02\u0BE0\xD5\x03\x02\x02\x02\u0BE1\u0BE2\x07\x04\x02\x02\u0BE2" +
		"\u0BE3\x05\xE6t\x02\u0BE3\u0BEA\x05\xD8m\x02\u0BE4\u0BE5\x07$\x02\x02" +
		"\u0BE5\u0BE6\x05\xE6t\x02\u0BE6\u0BE7\x05\xD8m\x02\u0BE7\u0BE9\x03\x02" +
		"\x02\x02\u0BE8\u0BE4\x03\x02\x02\x02\u0BE9\u0BEC\x03\x02\x02\x02\u0BEA" +
		"\u0BE8\x03\x02\x02\x02\u0BEA\u0BEB\x03\x02\x02\x02\u0BEB\u0BED\x03\x02" +
		"\x02\x02\u0BEC\u0BEA\x03\x02\x02\x02\u0BED\u0BEE\x05\xE6t\x02\u0BEE\u0BEF" +
		"\x07\x05\x02\x02\u0BEF\u0BF4\x03\x02\x02\x02\u0BF0\u0BF1\x07\x04\x02\x02" +
		"\u0BF1\u0BF4\x07\x05\x02\x02\u0BF2\u0BF4\x07+\x02\x02\u0BF3\u0BE1\x03" +
		"\x02\x02\x02\u0BF3\u0BF0\x03\x02\x02\x02\u0BF3\u0BF2\x03\x02\x02\x02\u0BF4" +
		"\xD7\x03\x02\x02\x02\u0BF5\u0BFD\x07A\x02\x02\u0BF6\u0BFD\x05\xDCo\x02" +
		"\u0BF7\u0BFD\x05\xD2j\x02\u0BF8\u0BFD\x05\xD6l\x02\u0BF9\u0BFD\x07>\x02" +
		"\x02\u0BFA\u0BFD\x07?\x02\x02\u0BFB\u0BFD\x07@\x02\x02\u0BFC\u0BF5\x03" +
		"\x02\x02\x02\u0BFC\u0BF6\x03\x02\x02\x02\u0BFC\u0BF7\x03\x02\x02\x02\u0BFC" +
		"\u0BF8\x03\x02\x02\x02\u0BFC\u0BF9\x03\x02\x02\x02\u0BFC\u0BFA\x03\x02" +
		"\x02\x02\u0BFC\u0BFB\x03\x02\x02\x02\u0BFD\xD9\x03\x02\x02\x02\u0BFE\u0BFF" +
		"\t!\x02\x02\u0BFF\xDB\x03\x02\x02\x02\u0C00\u0C01\t\"\x02\x02\u0C01\xDD" +
		"\x03\x02\x02\x02\u0C02\u0C06\t#\x02\x02\u0C03\u0C05\x07F\x02\x02\u0C04" +
		"\u0C03\x03\x02\x02\x02\u0C05\u0C08\x03\x02\x02\x02\u0C06\u0C04\x03\x02" +
		"\x02\x02\u0C06\u0C07\x03\x02\x02\x02\u0C07\xDF\x03\x02\x02\x02\u0C08\u0C06" +
		"\x03\x02\x02\x02\u0C09\u0C0B\t#\x02\x02\u0C0A\u0C09\x03\x02\x02\x02\u0C0B" +
		"\u0C0C\x03\x02\x02\x02\u0C0C\u0C0A\x03\x02\x02\x02\u0C0C\u0C0D\x03\x02" +
		"\x02\x02\u0C0D\xE1\x03\x02\x02\x02\u0C0E\u0C12\t$\x02\x02\u0C0F\u0C11" +
		"\x07F\x02\x02\u0C10\u0C0F\x03\x02\x02\x02\u0C11\u0C14\x03\x02\x02\x02" +
		"\u0C12\u0C10\x03\x02\x02\x02\u0C12\u0C13\x03\x02\x02\x02\u0C13\xE3\x03" +
		"\x02\x02\x02\u0C14\u0C12\x03\x02\x02\x02\u0C15\u0C17\x07$\x02\x02\u0C16" +
		"\u0C15\x03\x02\x02\x02\u0C16\u0C17\x03\x02\x02\x02\u0C17\u0C1B\x03\x02" +
		"\x02\x02\u0C18\u0C1A\x07F\x02\x02\u0C19\u0C18\x03\x02\x02\x02\u0C1A\u0C1D" +
		"\x03\x02\x02\x02\u0C1B\u0C19\x03\x02\x02\x02\u0C1B\u0C1C\x03\x02\x02\x02" +
		"\u0C1C\xE5\x03\x02\x02\x02\u0C1D\u0C1B\x03\x02\x02\x02\u0C1E\u0C20\x07" +
		"F\x02\x02\u0C1F\u0C1E\x03\x02\x02\x02\u0C20\u0C23\x03\x02\x02\x02\u0C21" +
		"\u0C1F\x03\x02\x02\x02\u0C21\u0C22\x03\x02\x02\x02\u0C22\xE7\x03\x02\x02" +
		"\x02\u0C23\u0C21\x03\x02\x02\x02\u0C24\u0C25\t%\x02\x02\u0C25\xE9\x03" +
		"\x02\x02\x02\u0C26\u0C27\x05\xF0y\x02\u0C27\u0C28\x05\xF0y\x02\u0C28\u0C29" +
		"\x05\xF0y\x02\u0C29\xEB\x03\x02\x02\x02\u0C2A\u0C2B\x05\xF0y\x02\u0C2B" +
		"\u0C2C\x05\xF0y\x02\u0C2C\xED\x03\x02\x02\x02\u0C2D\u0C2E\x05\xF0y\x02" +
		"\u0C2E\u0C2F\x05\xF0y\x02\u0C2F\u0C30\x05\xF0y\x02\u0C30\u0C31\x05\xF0" +
		"y\x02\u0C31\u0C32\x05\xF0y\x02\u0C32\xEF\x03\x02\x02\x02\u0C33\u0C36\x07" +
		"\xD7\x02\x02\u0C34\u0C36\x05\xDCo\x02\u0C35\u0C33\x03\x02\x02\x02\u0C35" +
		"\u0C34\x03\x02\x02\x02\u0C36\xF1\x03\x02\x02\x02\u0C37\u0C39\x05\xFC\x7F" +
		"\x02\u0C38\u0C3A\x05\xF4{\x02\u0C39\u0C38\x03\x02\x02\x02\u0C39\u0C3A" +
		"\x03\x02\x02\x02\u0C3A\u0C3C\x03\x02\x02\x02\u0C3B\u0C3D\x05\xB2Z\x02" +
		"\u0C3C\u0C3B\x03\x02\x02\x02\u0C3C\u0C3D\x03\x02\x02\x02\u0C3D\xF3\x03" +
		"\x02\x02\x02\u0C3E\u0C3F\x07\x04\x02\x02\u0C3F\u0C40\x05\xE6t\x02\u0C40" +
		"\u0C44\x05\xF8}\x02\u0C41\u0C42\x05\xE2r\x02\u0C42\u0C43\x05\xF8}\x02" +
		"\u0C43\u0C45\x03\x02\x02\x02\u0C44\u0C41\x03\x02\x02\x02\u0C44\u0C45\x03" +
		"\x02\x02\x02\u0C45\u0C46\x03\x02\x02\x02\u0C46\u0C47\x05\xE6t\x02\u0C47" +
		"\u0C48\x07\x05\x02\x02\u0C48\xF5\x03\x02\x02\x02\u0C49\u0C4D\x05\xDAn" +
		"\x02\u0C4A\u0C4D\x07C\x02\x02\u0C4B\u0C4D\x05\u0128\x95\x02\u0C4C\u0C49" +
		"\x03\x02\x02\x02\u0C4C\u0C4A\x03\x02\x02\x02\u0C4C\u0C4B\x03\x02\x02\x02" +
		"\u0C4D\xF7\x03\x02\x02\x02\u0C4E\u0C4F\x05\u0128\x95\x02\u0C4F\u0C50\x07" +
		"\b\x02\x02\u0C50\u0C51\x05\xF6|\x02\u0C51\xF9\x03\x02\x02\x02\u0C52\u0C53" +
		"\x05\u0128\x95\x02\u0C53\u0C54\x07!\x02\x02\u0C54\u0C55\x05\u012C\x97" +
		"\x02\u0C55\u0C58\x03\x02\x02\x02\u0C56\u0C58\x05\u012C\x97\x02\u0C57\u0C52" +
		"\x03\x02\x02\x02\u0C57\u0C56\x03\x02\x02\x02\u0C58\xFB\x03\x02\x02\x02" +
		"\u0C59\u0C5A\x05\xFA~\x02\u0C5A\xFD\x03\x02\x02\x02\u0C5B\u0C5C\x05\xFA" +
		"~\x02\u0C5C\xFF\x03\x02\x02\x02\u0C5D\u0C5E\x05\xFA~\x02\u0C5E\u0101\x03" +
		"\x02\x02\x02\u0C5F\u0C60\x05\xFA~\x02\u0C60\u0103\x03\x02\x02\x02\u0C61" +
		"\u0C62\x05\xFA~\x02\u0C62\u0105\x03\x02\x02\x02\u0C63\u0C64\x05\xFA~\x02" +
		"\u0C64\u0107\x03\x02\x02\x02\u0C65\u0C66\x05\xFA~\x02\u0C66\u0109\x03" +
		"\x02\x02\x02\u0C67\u0C68\x05\xFA~\x02\u0C68\u010B\x03\x02\x02\x02\u0C69" +
		"\u0C6A\x05\xFA~\x02\u0C6A\u010D\x03\x02\x02\x02\u0C6B\u0C6C\x05\xFA~\x02" +
		"\u0C6C\u010F\x03\x02\x02\x02\u0C6D\u0C6E\x05\xFA~\x02\u0C6E\u0111\x03" +
		"\x02\x02\x02\u0C6F\u0C70\x05\xFA~\x02\u0C70\u0113\x03\x02\x02\x02\u0C71" +
		"\u0C72\x07%\x02\x02\u0C72\u0C73\x05\xFA~\x02\u0C73\u0115\x03\x02\x02\x02" +
		"\u0C74\u0C75\x05\u0114\x8B\x02\u0C75\u0117\x03\x02\x02\x02\u0C76\u0C77" +
		"\x05\u0114\x8B\x02\u0C77\u0119\x03\x02\x02\x02\u0C78\u0C79\x05\u0114\x8B" +
		"\x02\u0C79\u011B\x03\x02\x02\x02\u0C7A\u0C7B\x05\u0114\x8B\x02\u0C7B\u011D" +
		"\x03\x02\x02\x02\u0C7C\u0C7D\x05\u0128\x95\x02\u0C7D\u0C7E\x07!\x02\x02" +
		"\u0C7E\u0C80\x03\x02\x02\x02\u0C7F\u0C7C\x03\x02\x02\x02\u0C7F\u0C80\x03" +
		"\x02\x02\x02\u0C80\u0C81\x03\x02\x02\x02\u0C81\u0C82\x05\u0128\x95\x02" +
		"\u0C82\u011F\x03\x02\x02\x02\u0C83\u0C84\t&\x02\x02\u0C84\u0121\x03\x02" +
		"\x02\x02\u0C85\u0C89\x07";
	private static readonly _serializedATNSegment6: string =
		"\xDE\x02\x02\u0C86\u0C89\x05\xE8u\x02\u0C87\u0C89\x05\u0120\x91\x02\u0C88" +
		"\u0C85\x03\x02\x02\x02\u0C88\u0C86\x03\x02\x02\x02\u0C88\u0C87\x03\x02" +
		"\x02\x02\u0C89\u0123\x03\x02\x02\x02\u0C8A\u0C8B\x05\xFA~\x02\u0C8B\u0125" +
		"\x03\x02\x02\x02\u0C8C\u0C8D\b\x94\x01\x02\u0C8D\u0C90\x05\u0122\x92\x02" +
		"\u0C8E\u0C90\x07\xDF\x02\x02\u0C8F\u0C8C\x03\x02\x02\x02\u0C8F\u0C8E\x03" +
		"\x02\x02\x02\u0C90\u0C99\x03\x02\x02\x02\u0C91\u0C92\f\x03\x02\x02\u0C92" +
		"\u0C95\t\'\x02\x02\u0C93\u0C96\x05\u0122\x92\x02\u0C94\u0C96\x05\xDCo" +
		"\x02\u0C95\u0C93\x03\x02\x02\x02\u0C95\u0C94\x03\x02\x02\x02\u0C96\u0C98" +
		"\x03\x02\x02\x02\u0C97\u0C91\x03\x02\x02\x02\u0C98\u0C9B\x03\x02\x02\x02" +
		"\u0C99\u0C97\x03\x02\x02\x02\u0C99\u0C9A\x03\x02\x02\x02\u0C9A\u0127\x03" +
		"\x02\x02\x02\u0C9B\u0C99\x03\x02\x02\x02\u0C9C\u0C9D\x05\u0126\x94\x02" +
		"\u0C9D\u0129\x03\x02\x02\x02\u0C9E\u0CA1\x05\u0128\x95\x02\u0C9F\u0CA1" +
		"\x05\xDCo\x02\u0CA0\u0C9E\x03\x02\x02\x02\u0CA0\u0C9F\x03\x02\x02\x02" +
		"\u0CA1\u012B\x03\x02\x02\x02\u0CA2\u0CA7\x05\u0128\x95\x02\u0CA3\u0CA4" +
		"\x07\x1D\x02\x02\u0CA4\u0CA6\x05\u012A\x96\x02\u0CA5\u0CA3\x03\x02\x02" +
		"\x02\u0CA6\u0CA9\x03\x02\x02\x02\u0CA7\u0CA5\x03\x02\x02\x02\u0CA7\u0CA8" +
		"\x03\x02\x02\x02\u0CA8\u012D\x03\x02\x02\x02\u0CA9\u0CA7\x03\x02\x02\x02" +
		"\u0CAA\u0CAB\x05\u0126\x94\x02\u0CAB\u0CAC\x07!\x02\x02\u0CAC\u0CAE\x03" +
		"\x02\x02\x02\u0CAD\u0CAA\x03\x02\x02\x02\u0CAD\u0CAE\x03\x02\x02\x02\u0CAE" +
		"\u0CAF\x03\x02\x02\x02\u0CAF\u0CB2\x05\u0126\x94\x02\u0CB0\u0CB1\x07\x04" +
		"\x02\x02\u0CB1\u0CB3\x07\x05\x02\x02\u0CB2\u0CB0\x03\x02\x02\x02\u0CB2" +
		"\u0CB3\x03\x02\x02\x02\u0CB3\u012F\x03\x02\x02\x02\u0CB4\u0CB5\x05\u0128" +
		"\x95\x02\u0CB5\u0131\x03\x02\x02\x02\u0CB6\u0CB9\x05\u0126\x94\x02\u0CB7" +
		"\u0CB9\x07A\x02\x02\u0CB8\u0CB6\x03\x02\x02\x02\u0CB8\u0CB7\x03\x02\x02" +
		"\x02\u0CB9\u0133\x03\x02\x02\x02\u0CBA\u0CBD\x05\u010A\x86\x02\u0CBB\u0CBD" +
		"\x05\u0116\x8C\x02\u0CBC\u0CBA\x03\x02\x02\x02\u0CBC\u0CBB\x03\x02\x02" +
		"\x02\u0CBD\u0CC0\x03\x02\x02\x02\u0CBE\u0CC1\x05\xBC_\x02\u0CBF\u0CC1" +
		"\x05\xB2Z\x02\u0CC0\u0CBE\x03\x02\x02\x02\u0CC0\u0CBF\x03\x02\x02\x02" +
		"\u0CC0\u0CC1\x03\x02\x02\x02\u0CC1\u0135\x03\x02\x02\x02\u0CC2\u0CC5\x05" +
		"\xFC\x7F\x02\u0CC3\u0CC5\x05\u0118\x8D\x02\u0CC4\u0CC2\x03\x02\x02\x02" +
		"\u0CC4\u0CC3\x03\x02\x02\x02\u0CC5\u0CC7\x03\x02\x02\x02\u0CC6\u0CC8\x05" +
		"\xF4{\x02\u0CC7\u0CC6\x03\x02\x02\x02\u0CC7\u0CC8\x03\x02\x02\x02\u0CC8" +
		"\u0CCB\x03\x02\x02\x02\u0CC9\u0CCC\x05\xBC_\x02\u0CCA\u0CCC\x05\xB2Z\x02" +
		"\u0CCB\u0CC9\x03\x02\x02\x02\u0CCB\u0CCA\x03\x02\x02\x02\u0CCB\u0CCC\x03" +
		"\x02\x02\x02\u0CCC\u0137\x03\x02\x02\x02\u0CCD\u0CCE\x07C\x02\x02\u0CCE" +
		"\u0CD0\x07\x12\x02\x02\u0CCF\u0CD1\x07C\x02\x02\u0CD0\u0CCF\x03\x02\x02" +
		"\x02\u0CD0\u0CD1\x03\x02\x02\x02\u0CD1\u0CD6\x03\x02\x02\x02\u0CD2\u0CD3" +
		"\x07\x12\x02\x02\u0CD3\u0CD6\x07C\x02\x02\u0CD4\u0CD6\x07C\x02\x02\u0CD5" +
		"\u0CCD\x03\x02\x02\x02\u0CD5\u0CD2\x03\x02\x02\x02\u0CD5\u0CD4\x03\x02" +
		"\x02\x02\u0CD6\u0139\x03\x02\x02\x02\u0CD7\u0CD8\x05\xDCo\x02\u0CD8\u0CDA" +
		"\x07\x12\x02\x02\u0CD9\u0CDB\x05\xDCo\x02\u0CDA\u0CD9\x03\x02\x02\x02" +
		"\u0CDA\u0CDB\x03\x02\x02\x02\u0CDB\u0CE0\x03\x02\x02\x02\u0CDC\u0CDD\x07" +
		"\x12\x02\x02\u0CDD\u0CE0\x05\xDCo\x02\u0CDE\u0CE0\x05\xDCo\x02\u0CDF\u0CD7" +
		"\x03\x02\x02\x02\u0CDF\u0CDC\x03\x02\x02\x02\u0CDF\u0CDE\x03\x02\x02\x02" +
		"\u0CE0\u013B\x03\x02\x02\x02\u0CE1\u0CE2\x05\xDCo\x02\u0CE2\u0CE4\x07" +
		"\x12\x02\x02\u0CE3\u0CE5\x05\xDCo\x02\u0CE4\u0CE3\x03\x02\x02\x02\u0CE4" +
		"\u0CE5\x03\x02\x02\x02\u0CE5\u0CEA\x03\x02\x02\x02\u0CE6\u0CE7\x07\x12" +
		"\x02\x02\u0CE7\u0CEA\x05\xDCo\x02\u0CE8\u0CEA\x05\xDCo\x02\u0CE9\u0CE1" +
		"\x03\x02\x02\x02\u0CE9\u0CE6\x03\x02\x02\x02\u0CE9\u0CE8\x03\x02\x02\x02" +
		"\u0CEA\u013D\x03\x02\x02\x02\u0CEB\u0CF1\x05\u0140\xA1\x02\u0CEC\u0CED" +
		"\x077\x02\x02\u0CED\u0CF1\x05\u0122\x92\x02\u0CEE\u0CEF\x07%\x02\x02\u0CEF" +
		"\u0CF1\x05\u0122\x92\x02\u0CF0\u0CEB\x03\x02\x02\x02\u0CF0\u0CEC\x03\x02" +
		"\x02\x02\u0CF0\u0CEE\x03\x02\x02\x02\u0CF1\u013F\x03\x02\x02\x02\u0CF2" +
		"\u0CF3\x077\x02\x02\u0CF3\u0CFA\x07\xD6\x02\x02\u0CF4\u0CF5\x07\t\x02" +
		"\x02\u0CF5\u0CF6\x05\xE6t\x02\u0CF6\u0CF7\x05\u0146\xA4\x02\u0CF7\u0CF8" +
		"\x05\xE6t\x02\u0CF8\u0CF9\x07\n\x02\x02\u0CF9\u0CFB\x03\x02\x02\x02\u0CFA" +
		"\u0CF4\x03\x02\x02\x02\u0CFA\u0CFB\x03\x02\x02\x02\u0CFB\u0D0A\x03\x02" +
		"\x02\x02\u0CFC\u0CFD\x07\x04\x02\x02\u0CFD\u0CFE\x05\xE6t\x02\u0CFE\u0D04" +
		"\x05\u0142\xA2\x02\u0CFF\u0D00\x05\xE2r\x02\u0D00\u0D01\x05\u0142\xA2" +
		"\x02\u0D01\u0D03\x03\x02\x02\x02\u0D02\u0CFF\x03\x02\x02\x02\u0D03\u0D06" +
		"\x03\x02\x02\x02\u0D04\u0D02\x03\x02\x02\x02\u0D04\u0D05\x03\x02\x02\x02" +
		"\u0D05\u0D07\x03\x02\x02\x02\u0D06\u0D04\x03\x02\x02\x02\u0D07\u0D08\x05" +
		"\xE6t\x02\u0D08\u0D09\x07\x05\x02\x02\u0D09\u0D0B\x03\x02\x02\x02\u0D0A" +
		"\u0CFC\x03\x02\x02\x02\u0D0A\u0D0B\x03\x02\x02\x02\u0D0B\u0141\x03\x02" +
		"\x02\x02\u0D0C\u0D0D\x07Z\x02\x02\u0D0D\u0D0E\x07\b\x02\x02\u0D0E\u0D8E" +
		"\x05\xEAv\x02\u0D0F\u0D10\x07\xB9\x02\x02\u0D10\u0D11\x07\b\x02\x02\u0D11" +
		"\u0D8E\x05\xEAv\x02\u0D12\u0D13\x07\\\x02\x02\u0D13\u0D14\x07\b\x02\x02" +
		"\u0D14\u0D8E\x05\xECw\x02\u0D15\u0D16\t(\x02\x02\u0D16\u0D17\x07\b\x02" +
		"\x02\u0D17\u0D8E\x05\xDCo\x02\u0D18\u0D19\t)\x02\x02\u0D19\u0D1A\x07\b" +
		"\x02\x02\u0D1A\u0D8E\x05\xDCo\x02\u0D1B\u0D1C\t*\x02\x02\u0D1C\u0D1D\x07" +
		"\b\x02\x02\u0D1D\u0D8E\x05\u013C\x9F\x02\u0D1E\u0D1F\x07\xC2\x02\x02\u0D1F" +
		"\u0D20\x07\b\x02\x02\u0D20\u0D8E\x05\u013A\x9E\x02\u0D21\u0D22\x07\xC3" +
		"\x02\x02\u0D22\u0D25\x07\b\x02\x02\u0D23\u0D26\x05\xBE`\x02\u0D24\u0D26" +
		"\x05\u0148\xA5\x02\u0D25\u0D23\x03\x02\x02\x02\u0D25\u0D24\x03\x02\x02" +
		"\x02\u0D26\u0D8E\x03\x02\x02\x02\u0D27\u0D28\x07\xC4\x02\x02\u0D28\u0D29" +
		"\x07\b\x02\x02\u0D29\u0D2A\x07\x06\x02\x02\u0D2A\u0D2B\x05\xE6t\x02\u0D2B" +
		"\u0D31\x05\u014A\xA6\x02\u0D2C\u0D2D\x05\xE2r\x02\u0D2D\u0D2E\x05\u014A" +
		"\xA6\x02\u0D2E\u0D30\x03\x02\x02\x02\u0D2F\u0D2C\x03\x02\x02\x02\u0D30" +
		"\u0D33\x03\x02\x02\x02\u0D31\u0D2F\x03\x02\x02\x02\u0D31\u0D32\x03\x02" +
		"\x02\x02\u0D32\u0D34\x03\x02\x02\x02\u0D33\u0D31\x03\x02\x02\x02\u0D34" +
		"\u0D35\x05\xE6t\x02\u0D35\u0D36\x07\x07\x02\x02\u0D36\u0D8E\x03\x02\x02" +
		"\x02\u0D37\u0D38\x07\x9F\x02\x02\u0D38\u0D3A\x07\b\x02\x02\u0D39\u0D3B" +
		"\x07&\x02\x02\u0D3A\u0D39\x03\x02\x02\x02\u0D3A\u0D3B\x03\x02\x02\x02" +
		"\u0D3B\u0D3C\x03\x02\x02\x02\u0D3C\u0D8E\x05\u0126\x94\x02\u0D3D\u0D3E" +
		"\x07\xC5\x02\x02\u0D3E\u0D40\x07\b\x02\x02\u0D3F\u0D41\x07&\x02\x02\u0D40" +
		"\u0D3F\x03\x02\x02\x02\u0D40\u0D41\x03\x02\x02\x02\u0D41\u0D42\x03\x02" +
		"\x02\x02\u0D42\u0D8E\x05\u0126\x94\x02\u0D43\u0D44\x07\x88\x02\x02\u0D44" +
		"\u0D46\x07\b\x02\x02\u0D45\u0D47\x07&\x02\x02\u0D46\u0D45\x03\x02\x02" +
		"\x02\u0D46\u0D47\x03\x02\x02\x02\u0D47\u0D48\x03\x02\x02\x02\u0D48\u0D8E" +
		"\x05\u0126\x94\x02\u0D49\u0D4A\x07\xC6\x02\x02\u0D4A\u0D4C\x07\b\x02\x02" +
		"\u0D4B\u0D4D\x07&\x02\x02\u0D4C\u0D4B\x03\x02\x02\x02\u0D4C\u0D4D\x03" +
		"\x02\x02\x02\u0D4D\u0D4E\x03\x02\x02\x02\u0D4E\u0D8E\x05\u0144\xA3\x02" +
		"\u0D4F\u0D50\x07\xC7\x02\x02\u0D50\u0D51\x07\b\x02\x02\u0D51\u0D8E\x05" +
		"\u0138\x9D\x02\u0D52\u0D53\x07f\x02\x02\u0D53\u0D55\x07\b\x02\x02\u0D54" +
		"\u0D56\x07&\x02\x02\u0D55\u0D54\x03\x02\x02\x02\u0D55\u0D56\x03\x02\x02" +
		"\x02\u0D56\u0D57\x03\x02\x02\x02\u0D57\u0D8E\x05\u0108\x85\x02\u0D58\u0D59" +
		"\x07\xC8\x02\x02\u0D59\u0D5B\x07\b\x02\x02\u0D5A\u0D5C\x07&\x02\x02\u0D5B" +
		"\u0D5A\x03\x02\x02\x02\u0D5B\u0D5C\x03\x02\x02\x02\u0D5C\u0D5D\x03\x02" +
		"\x02\x02\u0D5D\u0D8E\t+\x02\x02\u0D5E\u0D5F\t,\x02\x02\u0D5F\u0D60\x07" +
		"\b\x02\x02\u0D60\u0D61\x07\x06\x02\x02\u0D61\u0D62\x05\xE6t\x02\u0D62" +
		"\u0D68\x05\u014E\xA8\x02\u0D63\u0D64\x05\xE2r\x02\u0D64\u0D65\x05\u014E" +
		"\xA8\x02\u0D65\u0D67\x03\x02\x02\x02\u0D66\u0D63\x03\x02\x02\x02\u0D67" +
		"\u0D6A\x03\x02\x02\x02\u0D68\u0D66\x03\x02\x02\x02\u0D68\u0D69\x03\x02" +
		"\x02\x02\u0D69\u0D6B\x03\x02\x02\x02\u0D6A\u0D68\x03\x02\x02\x02\u0D6B" +
		"\u0D6C\x05\xE6t\x02\u0D6C\u0D6D\x07\x07\x02\x02\u0D6D\u0D8E\x03\x02\x02" +
		"\x02\u0D6E\u0D6F\x07\xD0\x02\x02\u0D6F\u0D71\x07\b\x02\x02\u0D70\u0D72" +
		"\x07\x1F\x02\x02\u0D71\u0D70\x03\x02\x02\x02\u0D71\u0D72\x03\x02\x02\x02" +
		"\u0D72\u0D73\x03\x02\x02\x02\u0D73\u0D8E\x07C\x02\x02\u0D74\u0D75\x07" +
		"\xD0\x02\x02\u0D75\u0D76\x07\b\x02\x02\u0D76\u0D8E\x07\x12\x02\x02\u0D77" +
		"\u0D78\x07\xD1\x02\x02\u0D78\u0D79\x07\b\x02\x02\u0D79\u0D8E\t-\x02\x02" +
		"\u0D7A\u0D7C\x07\x1F\x02\x02\u0D7B\u0D7A\x03\x02\x02\x02\u0D7B\u0D7C\x03" +
		"\x02\x02\x02\u0D7C\u0D7D\x03\x02\x02\x02\u0D7D\u0D8E\x07C\x02\x02\u0D7E" +
		"\u0D8E\x05\u0148\xA5\x02\u0D7F\u0D80\x07\x06\x02\x02\u0D80\u0D81\x05\xE6" +
		"t\x02\u0D81\u0D87\x05\u014C\xA7\x02\u0D82\u0D83\x05\xE2r\x02\u0D83\u0D84" +
		"\x05\u014C\xA7\x02\u0D84\u0D86\x03\x02\x02\x02\u0D85\u0D82\x03\x02\x02" +
		"\x02\u0D86\u0D89\x03\x02\x02\x02\u0D87\u0D85\x03\x02\x02\x02\u0D87\u0D88" +
		"\x03\x02\x02\x02\u0D88\u0D8A\x03\x02\x02\x02\u0D89\u0D87\x03\x02\x02\x02" +
		"\u0D8A\u0D8B\x05\xE6t\x02\u0D8B\u0D8C\x07\x07\x02\x02\u0D8C\u0D8E\x03" +
		"\x02\x02\x02\u0D8D\u0D0C\x03\x02\x02\x02\u0D8D\u0D0F\x03\x02\x02\x02\u0D8D" +
		"\u0D12\x03\x02\x02\x02\u0D8D\u0D15\x03\x02\x02\x02\u0D8D\u0D18\x03\x02" +
		"\x02\x02\u0D8D\u0D1B\x03\x02\x02\x02\u0D8D\u0D1E\x03\x02\x02\x02\u0D8D" +
		"\u0D21\x03\x02\x02\x02\u0D8D\u0D27\x03\x02\x02\x02\u0D8D\u0D37\x03\x02" +
		"\x02\x02\u0D8D\u0D3D\x03\x02\x02\x02\u0D8D\u0D43\x03\x02\x02\x02\u0D8D" +
		"\u0D49\x03\x02\x02\x02\u0D8D\u0D4F\x03\x02\x02\x02\u0D8D\u0D52\x03\x02" +
		"\x02\x02\u0D8D\u0D58\x03\x02\x02\x02\u0D8D\u0D5E\x03\x02\x02\x02\u0D8D" +
		"\u0D6E\x03\x02\x02\x02\u0D8D\u0D74\x03\x02\x02\x02\u0D8D\u0D77\x03\x02" +
		"\x02\x02\u0D8D\u0D7B\x03\x02\x02\x02\u0D8D\u0D7E\x03\x02\x02\x02\u0D8D" +
		"\u0D7F\x03\x02\x02\x02\u0D8E\u0143\x03\x02\x02\x02\u0D8F\u0D92\x05\u010C" +
		"\x87\x02\u0D90\u0D92\x05\u011C\x8F\x02\u0D91\u0D8F\x03\x02\x02\x02\u0D91" +
		"\u0D90\x03\x02\x02\x02\u0D92\u0145\x03\x02\x02\x02\u0D93\u0DA0\x05\u0144" +
		"\xA3\x02\u0D94\u0D95\x07&\x02\x02\u0D95\u0D9C\x05\u0144\xA3\x02\u0D96" +
		"\u0D97\x05\xE2r\x02\u0D97\u0D98\x07&\x02\x02\u0D98\u0D99\x05\u0144\xA3" +
		"\x02\u0D99\u0D9B\x03\x02\x02\x02\u0D9A\u0D96\x03\x02\x02\x02\u0D9B\u0D9E" +
		"\x03\x02\x02\x02\u0D9C\u0D9A\x03\x02\x02\x02\u0D9C\u0D9D\x03\x02\x02\x02" +
		"\u0D9D\u0DA0\x03\x02\x02\x02\u0D9E\u0D9C\x03\x02\x02\x02\u0D9F\u0D93\x03" +
		"\x02\x02\x02\u0D9F\u0D94\x03\x02\x02\x02\u0DA0\u0147\x03\x02\x02\x02\u0DA1" +
		"\u0DA2\x07,\x02\x02\u0DA2\u0DA3\x05\xE6t\x02\u0DA3\u0DAA\x05\xC0a\x02" +
		"\u0DA4\u0DA5\x07$\x02\x02\u0DA5\u0DA6\x05\xE6t\x02\u0DA6\u0DA7\x05\xC0" +
		"a\x02\u0DA7\u0DA9\x03\x02\x02\x02\u0DA8\u0DA4\x03\x02\x02\x02\u0DA9\u0DAC" +
		"\x03\x02\x02\x02\u0DAA\u0DA8\x03\x02\x02\x02\u0DAA\u0DAB\x03\x02\x02\x02" +
		"\u0DAB\u0DAD\x03\x02\x02\x02\u0DAC\u0DAA\x03\x02\x02\x02\u0DAD\u0DAE\x05" +
		"\xE6t\x02\u0DAE\u0DAF\x07\x07\x02\x02\u0DAF\u0DB3\x03\x02\x02\x02\u0DB0" +
		"\u0DB1\x07,\x02\x02\u0DB1\u0DB3\x07\x07\x02\x02\u0DB2\u0DA1\x03\x02\x02" +
		"\x02\u0DB2\u0DB0\x03\x02\x02\x02\u0DB3\u0149\x03\x02\x02\x02\u0DB4\u0DB5" +
		"\x05\u0126\x94\x02\u0DB5\u0DB6\x07\b\x02\x02\u0DB6\u0DB7\x05\u0138\x9D" +
		"\x02\u0DB7\u014B\x03\x02\x02\x02\u0DB8\u0DB9\x05\u0126\x94\x02\u0DB9\u0DBA" +
		"\x05:\x1E\x02\u0DBA\u0DBF\x03\x02\x02\x02\u0DBB\u0DBC\x05\u0126\x94\x02" +
		"\u0DBC\u0DBD\x05\u0138\x9D\x02\u0DBD\u0DBF\x03\x02\x02\x02\u0DBE\u0DB8" +
		"\x03\x02\x02\x02\u0DBE\u0DBB\x03\x02\x02\x02\u0DBF\u014D\x03\x02\x02\x02" +
		"\u0DC0\u0DC1\x05\u0112\x8A\x02\u0DC1\u0DC2\x07\b\x02\x02\u0DC2\u0DC3\x05" +
		"\xDAn\x02\u0DC3\u0DD5\x03\x02\x02\x02\u0DC4\u0DC5\x05\u0112\x8A\x02\u0DC5" +
		"\u0DC6\x07\b\x02\x02\u0DC6\u0DC7\x07\x06\x02\x02\u0DC7\u0DC8\x05\xE6t" +
		"\x02\u0DC8\u0DCE\x05\u0150\xA9\x02\u0DC9\u0DCA\x05\xE2r\x02\u0DCA\u0DCB" +
		"\x05\u0150\xA9\x02\u0DCB\u0DCD\x03\x02\x02\x02\u0DCC\u0DC9\x03\x02\x02" +
		"\x02\u0DCD\u0DD0\x03\x02\x02\x02\u0DCE\u0DCC\x03\x02\x02\x02\u0DCE\u0DCF" +
		"\x03\x02\x02\x02\u0DCF\u0DD1\x03\x02\x02\x02\u0DD0\u0DCE\x03\x02\x02\x02" +
		"\u0DD1\u0DD2\x05\xE6t\x02\u0DD2\u0DD3\x07\x07\x02\x02\u0DD3\u0DD5\x03" +
		"\x02\x02\x02\u0DD4\u0DC0\x03\x02\x02\x02\u0DD4\u0DC4\x03\x02\x02\x02\u0DD5" +
		"\u014F\x03\x02\x02\x02\u0DD6\u0DD7\x05\u0128\x95\x02\u0DD7\u0DD8\x07\b" +
		"\x02\x02\u0DD8\u0DD9\x05\xDAn\x02\u0DD9\u0151\x03\x02\x02\x02\u01A9\u0159" +
		"\u015D\u015F\u0163\u0167\u0185\u0191\u0193\u0199\u01A0\u01A4\u01AA\u01B4" +
		"\u01B8\u01BA\u01E6\u01EC\u01F0\u01F7\u01FB\u0201\u020B\u020F\u0211\u021C" +
		"\u0220\u0226\u022F\u0234\u023E\u0242\u0244\u024C\u0252\u025E\u0263\u026D" +
		"\u0271\u0273\u0282\u028A\u0295\u0299\u029B\u02A0\u02AC\u02AF\u02B6\u02C4" +
		"\u02CA\u02D8\u02E1\u02EB\u02F5\u02FA\u0302\u030E\u0312\u0318\u0320\u0327" +
		"\u032C\u0330\u0337\u033C\u0340\u0346\u034A\u0351\u0355\u0357\u0364\u036F" +
		"\u0373\u0375\u0379\u0389\u0392\u0399\u039D\u03A0\u03A4\u03A7\u03AE\u03B1" +
		"\u03B5\u03B9\u03BC\u03BF\u03C5\u03C8\u03D0\u03D3\u03D7\u03DE\u03E1\u03E5" +
		"\u03F1\u03FB\u0405\u040F\u041D\u0421\u0424\u0430\u0437\u045A\u045E\u046A" +
		"\u046E\u0470\u0478\u0480\u0485\u04CF\u04DA\u04EE\u04F0\u04FA\u04FD\u050B" +
		"\u050F\u0511\u0517\u051A\u0521\u052A\u052F\u0535\u0539\u053B\u053F\u054C" +
		"\u0554\u0559\u055F\u0563\u0565\u0569\u0571\u0576\u057C\u0580\u0582\u0586" +
		"\u058F\u0599\u05A0\u05A5\u05AD\u05B2\u05B8\u05BC\u05BE\u05C2\u05C5\u05CA" +
		"\u05CF\u05D4\u05D9\u05DE\u05E3\u05E8\u05ED\u05F1\u05F5\u05F9\u0603\u0612" +
		"\u0616\u0618\u0629\u062D\u062F\u0633\u0646\u064A\u064C\u0650\u065B\u0669" +
		"\u0675\u0679\u067B\u068C\u0690\u0692\u0696\u06AB\u06AF\u06B1\u06B5\u06C4" +
		"\u06C8\u06CA\u06D3\u06D5\u06E1\u06E5\u06E7\u06F6\u06FA\u06FC\u0700\u070C" +
		"\u0710\u0712\u0721\u0725\u0727\u072B\u074A\u074E\u0750\u0754\u0758\u075D" +
		"\u0765\u0768\u0770\u077C\u0782\u0799\u079E\u07A3\u07A9\u07AC\u07B4\u07BC" +
		"\u07C2\u07C6\u07C9\u07CD\u07D0\u07D4\u07D7\u07DB\u07DE\u07E0\u07EC\u07F0" +
		"\u07F2\u0801\u0805\u0807\u080B\u081B\u081F\u0821\u0825\u0829\u082C\u082F" +
		"\u0834\u0837\u0850\u0853\u0855\u085D\u0862\u086F\u0874\u0879\u087F\u0883" +
		"\u0885\u0889\u0893\u089A\u089F\u08A4\u08AA\u08AE\u08B0\u08BB\u08BF\u08C1" +
		"\u08C5\u08D1\u08D5\u08D7\u08E8\u08EC\u08EE\u08F2\u08F5\u0901\u090C\u0915" +
		"\u0918\u091B\u0923\u0926\u0929\u092D\u0942\u0946\u0948\u095B\u095F\u0961" +
		"\u096F\u0987\u098B\u098D\u099B\u099F\u09A1\u09B2\u09B6\u09B8\u09BD\u09CC" +
		"\u09D0\u09D2\u09D6\u09E7\u09EB\u09ED\u09F4\u09FA\u0A06\u0A09\u0A11\u0A13" +
		"\u0A1D\u0A2B\u0A3C\u0A56\u0A58\u0A63\u0A6D\u0A78\u0A85\u0AA1\u0AA3\u0AAC" +
		"\u0AB2\u0AC2\u0AC4\u0ACD\u0ACF\u0AD6\u0AE2\u0AF3\u0B04\u0B13\u0B22\u0B2F" +
		"\u0B3C\u0B44\u0B55\u0B5E\u0B6C\u0B77\u0B86\u0B95\u0BA6\u0BB7\u0BC4\u0BD1" +
		"\u0BD9\u0BEA\u0BF3\u0BFC\u0C06\u0C0C\u0C12\u0C16\u0C1B\u0C21\u0C35\u0C39" +
		"\u0C3C\u0C44\u0C4C\u0C57\u0C7F\u0C88\u0C8F\u0C95\u0C99\u0CA0\u0CA7\u0CAD" +
		"\u0CB2\u0CB8\u0CBC\u0CC0\u0CC4\u0CC7\u0CCB\u0CD0\u0CD5\u0CDA\u0CDF\u0CE4" +
		"\u0CE9\u0CF0\u0CFA\u0D04\u0D0A\u0D25\u0D31\u0D3A\u0D40\u0D46\u0D4C\u0D55" +
		"\u0D5B\u0D68\u0D71\u0D7B\u0D87\u0D8D\u0D91\u0D9C\u0D9F\u0DAA\u0DB2\u0DBE" +
		"\u0DCE\u0DD4";
	public static readonly _serializedATN: string = Utils.join(
		[
			JustMCFParser._serializedATNSegment0,
			JustMCFParser._serializedATNSegment1,
			JustMCFParser._serializedATNSegment2,
			JustMCFParser._serializedATNSegment3,
			JustMCFParser._serializedATNSegment4,
			JustMCFParser._serializedATNSegment5,
			JustMCFParser._serializedATNSegment6,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JustMCFParser.__ATN) {
			JustMCFParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JustMCFParser._serializedATN));
		}

		return JustMCFParser.__ATN;
	}

}

export class McfFileContext extends ParserRuleContext {
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public fileStatementInner(): FileStatementInnerContext[];
	public fileStatementInner(i: number): FileStatementInnerContext;
	public fileStatementInner(i?: number): FileStatementInnerContext | FileStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FileStatementInnerContext);
		} else {
			return this.getRuleContext(i, FileStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_mcfFile; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterMcfFile) {
			listener.enterMcfFile(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitMcfFile) {
			listener.exitMcfFile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitMcfFile) {
			return visitor.visitMcfFile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FileStatementInnerContext extends ParserRuleContext {
	public nameSpaceStatement(): NameSpaceStatementContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceStatementContext);
	}
	public nameSpaceStatementInner(): NameSpaceStatementInnerContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceStatementInnerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_fileStatementInner; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFileStatementInner) {
			listener.enterFileStatementInner(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFileStatementInner) {
			listener.exitFileStatementInner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFileStatementInner) {
			return visitor.visitFileStatementInner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementInnerContext extends ParserRuleContext {
	public noInExecStatement(): NoInExecStatementContext | undefined {
		return this.tryGetRuleContext(0, NoInExecStatementContext);
	}
	public statement(): StatementContext | undefined {
		return this.tryGetRuleContext(0, StatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_statementInner; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterStatementInner) {
			listener.enterStatementInner(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitStatementInner) {
			listener.exitStatementInner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitStatementInner) {
			return visitor.visitStatementInner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public ifStatement(): IfStatementContext | undefined {
		return this.tryGetRuleContext(0, IfStatementContext);
	}
	public forStatement(): ForStatementContext | undefined {
		return this.tryGetRuleContext(0, ForStatementContext);
	}
	public whileStatement(): WhileStatementContext | undefined {
		return this.tryGetRuleContext(0, WhileStatementContext);
	}
	public namespaceSetStatement(): NamespaceSetStatementContext | undefined {
		return this.tryGetRuleContext(0, NamespaceSetStatementContext);
	}
	public funcRunStatement(): FuncRunStatementContext | undefined {
		return this.tryGetRuleContext(0, FuncRunStatementContext);
	}
	public funcImproveRunStatement(): FuncImproveRunStatementContext | undefined {
		return this.tryGetRuleContext(0, FuncImproveRunStatementContext);
	}
	public yieldStatement(): YieldStatementContext | undefined {
		return this.tryGetRuleContext(0, YieldStatementContext);
	}
	public returnStatement(): ReturnStatementContext | undefined {
		return this.tryGetRuleContext(0, ReturnStatementContext);
	}
	public breakStatement(): BreakStatementContext | undefined {
		return this.tryGetRuleContext(0, BreakStatementContext);
	}
	public continueStatement(): ContinueStatementContext | undefined {
		return this.tryGetRuleContext(0, ContinueStatementContext);
	}
	public execStatement(): ExecStatementContext | undefined {
		return this.tryGetRuleContext(0, ExecStatementContext);
	}
	public dataStatement(): DataStatementContext | undefined {
		return this.tryGetRuleContext(0, DataStatementContext);
	}
	public scbPlayerStatement(): ScbPlayerStatementContext | undefined {
		return this.tryGetRuleContext(0, ScbPlayerStatementContext);
	}
	public scbObjectiveStatement(): ScbObjectiveStatementContext | undefined {
		return this.tryGetRuleContext(0, ScbObjectiveStatementContext);
	}
	public titleStatement(): TitleStatementContext | undefined {
		return this.tryGetRuleContext(0, TitleStatementContext);
	}
	public bossbarStatement(): BossbarStatementContext | undefined {
		return this.tryGetRuleContext(0, BossbarStatementContext);
	}
	public displayStatement(): DisplayStatementContext | undefined {
		return this.tryGetRuleContext(0, DisplayStatementContext);
	}
	public lootStatement(): LootStatementContext | undefined {
		return this.tryGetRuleContext(0, LootStatementContext);
	}
	public itemStatement(): ItemStatementContext | undefined {
		return this.tryGetRuleContext(0, ItemStatementContext);
	}
	public attrStatement(): AttrStatementContext | undefined {
		return this.tryGetRuleContext(0, AttrStatementContext);
	}
	public entityStatement(): EntityStatementContext | undefined {
		return this.tryGetRuleContext(0, EntityStatementContext);
	}
	public blockStatement(): BlockStatementContext | undefined {
		return this.tryGetRuleContext(0, BlockStatementContext);
	}
	public dataOperationExpression(): DataOperationExpressionContext | undefined {
		return this.tryGetRuleContext(0, DataOperationExpressionContext);
	}
	public dataAssignExistExpression(): DataAssignExistExpressionContext | undefined {
		return this.tryGetRuleContext(0, DataAssignExistExpressionContext);
	}
	public scbOperationExpression(): ScbOperationExpressionContext | undefined {
		return this.tryGetRuleContext(0, ScbOperationExpressionContext);
	}
	public bossbarOperationExpression(): BossbarOperationExpressionContext | undefined {
		return this.tryGetRuleContext(0, BossbarOperationExpressionContext);
	}
	public entityExpression(): EntityExpressionContext | undefined {
		return this.tryGetRuleContext(0, EntityExpressionContext);
	}
	public leagalCommand(): LeagalCommandContext | undefined {
		return this.tryGetRuleContext(0, LeagalCommandContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_statement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NoInExecStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_noInExecStatement; }
	public copyFrom(ctx: NoInExecStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class NoInExecStatementFuncContext extends NoInExecStatementContext {
	public funcStatement(): FuncStatementContext {
		return this.getRuleContext(0, FuncStatementContext);
	}
	constructor(ctx: NoInExecStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNoInExecStatementFunc) {
			listener.enterNoInExecStatementFunc(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNoInExecStatementFunc) {
			listener.exitNoInExecStatementFunc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNoInExecStatementFunc) {
			return visitor.visitNoInExecStatementFunc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NoInExecStatementRunFuncContext extends NoInExecStatementContext {
	public _left!: Token;
	public funcStatement(): FuncStatementContext {
		return this.getRuleContext(0, FuncStatementContext);
	}
	public RUN(): TerminalNode { return this.getToken(JustMCFParser.RUN, 0); }
	constructor(ctx: NoInExecStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNoInExecStatementRunFunc) {
			listener.enterNoInExecStatementRunFunc(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNoInExecStatementRunFunc) {
			listener.exitNoInExecStatementRunFunc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNoInExecStatementRunFunc) {
			return visitor.visitNoInExecStatementRunFunc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NoInExecStatementFuncImproveContext extends NoInExecStatementContext {
	public funcImproveStatement(): FuncImproveStatementContext {
		return this.getRuleContext(0, FuncImproveStatementContext);
	}
	constructor(ctx: NoInExecStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNoInExecStatementFuncImprove) {
			listener.enterNoInExecStatementFuncImprove(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNoInExecStatementFuncImprove) {
			listener.exitNoInExecStatementFuncImprove(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNoInExecStatementFuncImprove) {
			return visitor.visitNoInExecStatementFuncImprove(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NoInExecStatementInterfaceContext extends NoInExecStatementContext {
	public interfaceStatement(): InterfaceStatementContext {
		return this.getRuleContext(0, InterfaceStatementContext);
	}
	constructor(ctx: NoInExecStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNoInExecStatementInterface) {
			listener.enterNoInExecStatementInterface(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNoInExecStatementInterface) {
			listener.exitNoInExecStatementInterface(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNoInExecStatementInterface) {
			return visitor.visitNoInExecStatementInterface(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NoInExecStatementStoreContext extends NoInExecStatementContext {
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public execStoreChild(): ExecStoreChildContext[];
	public execStoreChild(i: number): ExecStoreChildContext;
	public execStoreChild(i?: number): ExecStoreChildContext | ExecStoreChildContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExecStoreChildContext);
		} else {
			return this.getRuleContext(i, ExecStoreChildContext);
		}
	}
	constructor(ctx: NoInExecStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNoInExecStatementStore) {
			listener.enterNoInExecStatementStore(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNoInExecStatementStore) {
			listener.exitNoInExecStatementStore(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNoInExecStatementStore) {
			return visitor.visitNoInExecStatementStore(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LeagalCommandContext extends ParserRuleContext {
	public LeagalCommand(): TerminalNode { return this.getToken(JustMCFParser.LeagalCommand, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_leagalCommand; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLeagalCommand) {
			listener.enterLeagalCommand(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLeagalCommand) {
			listener.exitLeagalCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLeagalCommand) {
			return visitor.visitLeagalCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceStatementContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public NAMSP(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NAMSP, 0); }
	public NAMESPACE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NAMESPACE, 0); }
	public acceptableName(): AcceptableNameContext | undefined {
		return this.tryGetRuleContext(0, AcceptableNameContext);
	}
	public nameSpaceStatementInner(): NameSpaceStatementInnerContext[];
	public nameSpaceStatementInner(i: number): NameSpaceStatementInnerContext;
	public nameSpaceStatementInner(i?: number): NameSpaceStatementInnerContext | NameSpaceStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameSpaceStatementInnerContext);
		} else {
			return this.getRuleContext(i, NameSpaceStatementInnerContext);
		}
	}
	public nameSpaceSettings(): NameSpaceSettingsContext[];
	public nameSpaceSettings(i: number): NameSpaceSettingsContext;
	public nameSpaceSettings(i?: number): NameSpaceSettingsContext | NameSpaceSettingsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameSpaceSettingsContext);
		} else {
			return this.getRuleContext(i, NameSpaceSettingsContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceStatement) {
			listener.enterNameSpaceStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceStatement) {
			listener.exitNameSpaceStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceStatement) {
			return visitor.visitNameSpaceStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceSettingsContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceSettings; }
	public copyFrom(ctx: NameSpaceSettingsContext): void {
		super.copyFrom(ctx);
	}
}
export class NameSpaceSettingsFuncContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public FUNC(): TerminalNode { return this.getToken(JustMCFParser.FUNC, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsFunc) {
			listener.enterNameSpaceSettingsFunc(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsFunc) {
			listener.exitNameSpaceSettingsFunc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsFunc) {
			return visitor.visitNameSpaceSettingsFunc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsBlockContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public BLOCK(): TerminalNode { return this.getToken(JustMCFParser.BLOCK, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsBlock) {
			listener.enterNameSpaceSettingsBlock(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsBlock) {
			listener.exitNameSpaceSettingsBlock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsBlock) {
			return visitor.visitNameSpaceSettingsBlock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsStorageContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public STORAGE(): TerminalNode { return this.getToken(JustMCFParser.STORAGE, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsStorage) {
			listener.enterNameSpaceSettingsStorage(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsStorage) {
			listener.exitNameSpaceSettingsStorage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsStorage) {
			return visitor.visitNameSpaceSettingsStorage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsBossbarContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public BOSSBAR(): TerminalNode { return this.getToken(JustMCFParser.BOSSBAR, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsBossbar) {
			listener.enterNameSpaceSettingsBossbar(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsBossbar) {
			listener.exitNameSpaceSettingsBossbar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsBossbar) {
			return visitor.visitNameSpaceSettingsBossbar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsBiomeContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public BIOME(): TerminalNode { return this.getToken(JustMCFParser.BIOME, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsBiome) {
			listener.enterNameSpaceSettingsBiome(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsBiome) {
			listener.exitNameSpaceSettingsBiome(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsBiome) {
			return visitor.visitNameSpaceSettingsBiome(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsEntityContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public ENTITY(): TerminalNode { return this.getToken(JustMCFParser.ENTITY, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsEntity) {
			listener.enterNameSpaceSettingsEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsEntity) {
			listener.exitNameSpaceSettingsEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsEntity) {
			return visitor.visitNameSpaceSettingsEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsPredicateContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public PREDICATE(): TerminalNode { return this.getToken(JustMCFParser.PREDICATE, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsPredicate) {
			listener.enterNameSpaceSettingsPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsPredicate) {
			listener.exitNameSpaceSettingsPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsPredicate) {
			return visitor.visitNameSpaceSettingsPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsDimContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public DIM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DIM, 0); }
	public DIMENSION(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DIMENSION, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsDim) {
			listener.enterNameSpaceSettingsDim(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsDim) {
			listener.exitNameSpaceSettingsDim(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsDim) {
			return visitor.visitNameSpaceSettingsDim(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsItemContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public ITEM(): TerminalNode { return this.getToken(JustMCFParser.ITEM, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsItem) {
			listener.enterNameSpaceSettingsItem(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsItem) {
			listener.exitNameSpaceSettingsItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsItem) {
			return visitor.visitNameSpaceSettingsItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsLootContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public LOOT(): TerminalNode { return this.getToken(JustMCFParser.LOOT, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsLoot) {
			listener.enterNameSpaceSettingsLoot(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsLoot) {
			listener.exitNameSpaceSettingsLoot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsLoot) {
			return visitor.visitNameSpaceSettingsLoot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsItemModifierContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public ITEM_MODIFIER(): TerminalNode { return this.getToken(JustMCFParser.ITEM_MODIFIER, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsItemModifier) {
			listener.enterNameSpaceSettingsItemModifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsItemModifier) {
			listener.exitNameSpaceSettingsItemModifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsItemModifier) {
			return visitor.visitNameSpaceSettingsItemModifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsDefaultContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public DEFAULT(): TerminalNode { return this.getToken(JustMCFParser.DEFAULT, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsDefault) {
			listener.enterNameSpaceSettingsDefault(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsDefault) {
			listener.exitNameSpaceSettingsDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsDefault) {
			return visitor.visitNameSpaceSettingsDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsAdvmContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public ADVANCEMENT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ADVANCEMENT, 0); }
	public ADVM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ADVM, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsAdvm) {
			listener.enterNameSpaceSettingsAdvm(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsAdvm) {
			listener.exitNameSpaceSettingsAdvm(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsAdvm) {
			return visitor.visitNameSpaceSettingsAdvm(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class NameSpaceSettingsJustDefaultContext extends NameSpaceSettingsContext {
	public _type!: Token;
	public DEFAULT(): TerminalNode { return this.getToken(JustMCFParser.DEFAULT, 0); }
	constructor(ctx: NameSpaceSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceSettingsJustDefault) {
			listener.enterNameSpaceSettingsJustDefault(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceSettingsJustDefault) {
			listener.exitNameSpaceSettingsJustDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceSettingsJustDefault) {
			return visitor.visitNameSpaceSettingsJustDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceStatementInnerContext extends ParserRuleContext {
	public funcTagStatement(): FuncTagStatementContext | undefined {
		return this.tryGetRuleContext(0, FuncTagStatementContext);
	}
	public funcTagStatementInner(): FuncTagStatementInnerContext | undefined {
		return this.tryGetRuleContext(0, FuncTagStatementInnerContext);
	}
	public interfaceStatement(): InterfaceStatementContext | undefined {
		return this.tryGetRuleContext(0, InterfaceStatementContext);
	}
	public nameSpaceStatement(): NameSpaceStatementContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceStatementInner; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceStatementInner) {
			listener.enterNameSpaceStatementInner(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceStatementInner) {
			listener.exitNameSpaceStatementInner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceStatementInner) {
			return visitor.visitNameSpaceStatementInner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NamespaceSetStatementContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public NAMSP(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NAMSP, 0); }
	public NAMESPACE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NAMESPACE, 0); }
	public acceptableName(): AcceptableNameContext | undefined {
		return this.tryGetRuleContext(0, AcceptableNameContext);
	}
	public statementInner(): StatementInnerContext[];
	public statementInner(i: number): StatementInnerContext;
	public statementInner(i?: number): StatementInnerContext | StatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementInnerContext);
		} else {
			return this.getRuleContext(i, StatementInnerContext);
		}
	}
	public nameSpaceSettings(): NameSpaceSettingsContext[];
	public nameSpaceSettings(i: number): NameSpaceSettingsContext;
	public nameSpaceSettings(i?: number): NameSpaceSettingsContext | NameSpaceSettingsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameSpaceSettingsContext);
		} else {
			return this.getRuleContext(i, NameSpaceSettingsContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_namespaceSetStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNamespaceSetStatement) {
			listener.enterNamespaceSetStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNamespaceSetStatement) {
			listener.exitNamespaceSetStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNamespaceSetStatement) {
			return visitor.visitNamespaceSetStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FuncTagStatementContext extends ParserRuleContext {
	public FUNC(): TerminalNode { return this.getToken(JustMCFParser.FUNC, 0); }
	public tagNameSpaceFunc(): TagNameSpaceFuncContext[];
	public tagNameSpaceFunc(i: number): TagNameSpaceFuncContext;
	public tagNameSpaceFunc(i?: number): TagNameSpaceFuncContext | TagNameSpaceFuncContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TagNameSpaceFuncContext);
		} else {
			return this.getRuleContext(i, TagNameSpaceFuncContext);
		}
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public TAGGED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TAGGED, 0); }
	public funcTagStatementInner(): FuncTagStatementInnerContext[];
	public funcTagStatementInner(i: number): FuncTagStatementInnerContext;
	public funcTagStatementInner(i?: number): FuncTagStatementInnerContext | FuncTagStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FuncTagStatementInnerContext);
		} else {
			return this.getRuleContext(i, FuncTagStatementInnerContext);
		}
	}
	public funcTagSettings(): FuncTagSettingsContext[];
	public funcTagSettings(i: number): FuncTagSettingsContext;
	public funcTagSettings(i?: number): FuncTagSettingsContext | FuncTagSettingsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FuncTagSettingsContext);
		} else {
			return this.getRuleContext(i, FuncTagSettingsContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_funcTagStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncTagStatement) {
			listener.enterFuncTagStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncTagStatement) {
			listener.exitFuncTagStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncTagStatement) {
			return visitor.visitFuncTagStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FuncTagSettingsContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_funcTagSettings; }
	public copyFrom(ctx: FuncTagSettingsContext): void {
		super.copyFrom(ctx);
	}
}
export class FuncTagSettingsReplaceContext extends FuncTagSettingsContext {
	public REPLACE(): TerminalNode { return this.getToken(JustMCFParser.REPLACE, 0); }
	public boolValue(): BoolValueContext {
		return this.getRuleContext(0, BoolValueContext);
	}
	constructor(ctx: FuncTagSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncTagSettingsReplace) {
			listener.enterFuncTagSettingsReplace(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncTagSettingsReplace) {
			listener.exitFuncTagSettingsReplace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncTagSettingsReplace) {
			return visitor.visitFuncTagSettingsReplace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FuncTagSettingsReplacedContext extends FuncTagSettingsContext {
	public REPLACED(): TerminalNode { return this.getToken(JustMCFParser.REPLACED, 0); }
	constructor(ctx: FuncTagSettingsContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncTagSettingsReplaced) {
			listener.enterFuncTagSettingsReplaced(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncTagSettingsReplaced) {
			listener.exitFuncTagSettingsReplaced(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncTagSettingsReplaced) {
			return visitor.visitFuncTagSettingsReplaced(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FuncTagStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_funcTagStatementInner; }
	public copyFrom(ctx: FuncTagStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class FuncTagSIFuncSContext extends FuncTagStatementInnerContext {
	public funcStatement(): FuncStatementContext {
		return this.getRuleContext(0, FuncStatementContext);
	}
	constructor(ctx: FuncTagStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncTagSIFuncS) {
			listener.enterFuncTagSIFuncS(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncTagSIFuncS) {
			listener.exitFuncTagSIFuncS(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncTagSIFuncS) {
			return visitor.visitFuncTagSIFuncS(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FuncTagSIFuncRunSContext extends FuncTagStatementInnerContext {
	public funcRunStatement(): FuncRunStatementContext {
		return this.getRuleContext(0, FuncRunStatementContext);
	}
	constructor(ctx: FuncTagStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncTagSIFuncRunS) {
			listener.enterFuncTagSIFuncRunS(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncTagSIFuncRunS) {
			listener.exitFuncTagSIFuncRunS(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncTagSIFuncRunS) {
			return visitor.visitFuncTagSIFuncRunS(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FuncTagSIFuncImproveSContext extends FuncTagStatementInnerContext {
	public funcImproveStatement(): FuncImproveStatementContext {
		return this.getRuleContext(0, FuncImproveStatementContext);
	}
	constructor(ctx: FuncTagStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncTagSIFuncImproveS) {
			listener.enterFuncTagSIFuncImproveS(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncTagSIFuncImproveS) {
			listener.exitFuncTagSIFuncImproveS(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncTagSIFuncImproveS) {
			return visitor.visitFuncTagSIFuncImproveS(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class FuncTagSIFuncTagSContext extends FuncTagStatementInnerContext {
	public funcTagStatement(): FuncTagStatementContext {
		return this.getRuleContext(0, FuncTagStatementContext);
	}
	constructor(ctx: FuncTagStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncTagSIFuncTagS) {
			listener.enterFuncTagSIFuncTagS(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncTagSIFuncTagS) {
			listener.exitFuncTagSIFuncTagS(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncTagSIFuncTagS) {
			return visitor.visitFuncTagSIFuncTagS(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FuncStatementContext extends ParserRuleContext {
	public FUNC(): TerminalNode { return this.getToken(JustMCFParser.FUNC, 0); }
	public nameSpaceFunc(): NameSpaceFuncContext {
		return this.getRuleContext(0, NameSpaceFuncContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public TAGGED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TAGGED, 0); }
	public tagNameSpaceFunc(): TagNameSpaceFuncContext[];
	public tagNameSpaceFunc(i: number): TagNameSpaceFuncContext;
	public tagNameSpaceFunc(i?: number): TagNameSpaceFuncContext | TagNameSpaceFuncContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TagNameSpaceFuncContext);
		} else {
			return this.getRuleContext(i, TagNameSpaceFuncContext);
		}
	}
	public statementInner(): StatementInnerContext[];
	public statementInner(i: number): StatementInnerContext;
	public statementInner(i?: number): StatementInnerContext | StatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementInnerContext);
		} else {
			return this.getRuleContext(i, StatementInnerContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_funcStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncStatement) {
			listener.enterFuncStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncStatement) {
			listener.exitFuncStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncStatement) {
			return visitor.visitFuncStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FuncImproveStatementContext extends ParserRuleContext {
	public FUNC(): TerminalNode { return this.getToken(JustMCFParser.FUNC, 0); }
	public nameSpaceFunc(): NameSpaceFuncContext {
		return this.getRuleContext(0, NameSpaceFuncContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public funcImproveParam(): FuncImproveParamContext[];
	public funcImproveParam(i: number): FuncImproveParamContext;
	public funcImproveParam(i?: number): FuncImproveParamContext | FuncImproveParamContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FuncImproveParamContext);
		} else {
			return this.getRuleContext(i, FuncImproveParamContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	public typeName(): TypeNameContext | undefined {
		return this.tryGetRuleContext(0, TypeNameContext);
	}
	public statementInner(): StatementInnerContext[];
	public statementInner(i: number): StatementInnerContext;
	public statementInner(i?: number): StatementInnerContext | StatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementInnerContext);
		} else {
			return this.getRuleContext(i, StatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_funcImproveStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncImproveStatement) {
			listener.enterFuncImproveStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncImproveStatement) {
			listener.exitFuncImproveStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncImproveStatement) {
			return visitor.visitFuncImproveStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FuncImproveParamContext extends ParserRuleContext {
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public typeName(): TypeNameContext | undefined {
		return this.tryGetRuleContext(0, TypeNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_funcImproveParam; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncImproveParam) {
			listener.enterFuncImproveParam(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncImproveParam) {
			listener.exitFuncImproveParam(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncImproveParam) {
			return visitor.visitFuncImproveParam(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class YieldStatementContext extends ParserRuleContext {
	public YIELD(): TerminalNode { return this.getToken(JustMCFParser.YIELD, 0); }
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_yieldStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterYieldStatement) {
			listener.enterYieldStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitYieldStatement) {
			listener.exitYieldStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitYieldStatement) {
			return visitor.visitYieldStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReturnStatementContext extends ParserRuleContext {
	public RETURN(): TerminalNode { return this.getToken(JustMCFParser.RETURN, 0); }
	public nameSpaceFunc(): NameSpaceFuncContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceFuncContext);
	}
	public dataIdentifier(): DataIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DataIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_returnStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterReturnStatement) {
			listener.enterReturnStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitReturnStatement) {
			listener.exitReturnStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitReturnStatement) {
			return visitor.visitReturnStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BreakStatementContext extends ParserRuleContext {
	public BREAK(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BREAK, 0); }
	public RETURN(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RETURN, 0); }
	public WHILE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.WHILE, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_breakStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBreakStatement) {
			listener.enterBreakStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBreakStatement) {
			listener.exitBreakStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBreakStatement) {
			return visitor.visitBreakStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ContinueStatementContext extends ParserRuleContext {
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.CONTINUE, 0); }
	public RETURN(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RETURN, 0); }
	public WHILE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.WHILE, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FOR, 0); }
	public nameSpaceFunc(): NameSpaceFuncContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceFuncContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_continueStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterContinueStatement) {
			listener.enterContinueStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitContinueStatement) {
			listener.exitContinueStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitContinueStatement) {
			return visitor.visitContinueStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FuncRunStatementContext extends ParserRuleContext {
	public FUNC(): TerminalNode { return this.getToken(JustMCFParser.FUNC, 0); }
	public nameSpaceFunc(): NameSpaceFuncContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceFuncContext);
	}
	public tagNameSpaceFunc(): TagNameSpaceFuncContext | undefined {
		return this.tryGetRuleContext(0, TagNameSpaceFuncContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_funcRunStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncRunStatement) {
			listener.enterFuncRunStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncRunStatement) {
			listener.exitFuncRunStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncRunStatement) {
			return visitor.visitFuncRunStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FuncImproveRunStatementContext extends ParserRuleContext {
	public funcImproveRunExpression(): FuncImproveRunExpressionContext {
		return this.getRuleContext(0, FuncImproveRunExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_funcImproveRunStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncImproveRunStatement) {
			listener.enterFuncImproveRunStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncImproveRunStatement) {
			listener.exitFuncImproveRunStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncImproveRunStatement) {
			return visitor.visitFuncImproveRunStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FuncImproveRunExpressionContext extends ParserRuleContext {
	public FUNC(): TerminalNode { return this.getToken(JustMCFParser.FUNC, 0); }
	public nameSpaceFunc(): NameSpaceFuncContext {
		return this.getRuleContext(0, NameSpaceFuncContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public funcImproveRunParam(): FuncImproveRunParamContext[];
	public funcImproveRunParam(i: number): FuncImproveRunParamContext;
	public funcImproveRunParam(i?: number): FuncImproveRunParamContext | FuncImproveRunParamContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FuncImproveRunParamContext);
		} else {
			return this.getRuleContext(i, FuncImproveRunParamContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_funcImproveRunExpression; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncImproveRunExpression) {
			listener.enterFuncImproveRunExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncImproveRunExpression) {
			listener.exitFuncImproveRunExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncImproveRunExpression) {
			return visitor.visitFuncImproveRunExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FuncImproveRunParamContext extends ParserRuleContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_funcImproveRunParam; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterFuncImproveRunParam) {
			listener.enterFuncImproveRunParam(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitFuncImproveRunParam) {
			listener.exitFuncImproveRunParam(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitFuncImproveRunParam) {
			return visitor.visitFuncImproveRunParam(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_execStatement; }
	public copyFrom(ctx: ExecStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ExecWithRunOrChildContext extends ExecStatementContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public execRunChild(): ExecRunChildContext | undefined {
		return this.tryGetRuleContext(0, ExecRunChildContext);
	}
	public execStoreChild(): ExecStoreChildContext[];
	public execStoreChild(i: number): ExecStoreChildContext;
	public execStoreChild(i?: number): ExecStoreChildContext | ExecStoreChildContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExecStoreChildContext);
		} else {
			return this.getRuleContext(i, ExecStoreChildContext);
		}
	}
	public EXEC(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.EXEC, 0); }
	public execChild(): ExecChildContext[];
	public execChild(i: number): ExecChildContext;
	public execChild(i?: number): ExecChildContext | ExecChildContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExecChildContext);
		} else {
			return this.getRuleContext(i, ExecChildContext);
		}
	}
	public pn_(): Pn_Context[];
	public pn_(i: number): Pn_Context;
	public pn_(i?: number): Pn_Context | Pn_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Pn_Context);
		} else {
			return this.getRuleContext(i, Pn_Context);
		}
	}
	constructor(ctx: ExecStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecWithRunOrChild) {
			listener.enterExecWithRunOrChild(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecWithRunOrChild) {
			listener.exitExecWithRunOrChild(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecWithRunOrChild) {
			return visitor.visitExecWithRunOrChild(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecWithoutRunOrChildContext extends ExecStatementContext {
	public EXEC(): TerminalNode { return this.getToken(JustMCFParser.EXEC, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public execChild(): ExecChildContext[];
	public execChild(i: number): ExecChildContext;
	public execChild(i?: number): ExecChildContext | ExecChildContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExecChildContext);
		} else {
			return this.getRuleContext(i, ExecChildContext);
		}
	}
	public pn_(): Pn_Context[];
	public pn_(i: number): Pn_Context;
	public pn_(i?: number): Pn_Context | Pn_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Pn_Context);
		} else {
			return this.getRuleContext(i, Pn_Context);
		}
	}
	constructor(ctx: ExecStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecWithoutRunOrChild) {
			listener.enterExecWithoutRunOrChild(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecWithoutRunOrChild) {
			listener.exitExecWithoutRunOrChild(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecWithoutRunOrChild) {
			return visitor.visitExecWithoutRunOrChild(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecStoreChildContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_execStoreChild; }
	public copyFrom(ctx: ExecStoreChildContext): void {
		super.copyFrom(ctx);
	}
}
export class ExecStoreResultScoreContext extends ExecStoreChildContext {
	public scbIdentifier(): ScbIdentifierContext {
		return this.getRuleContext(0, ScbIdentifierContext);
	}
	public STORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STORE, 0); }
	public RESULT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RESULT, 0); }
	constructor(ctx: ExecStoreChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecStoreResultScore) {
			listener.enterExecStoreResultScore(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecStoreResultScore) {
			listener.exitExecStoreResultScore(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecStoreResultScore) {
			return visitor.visitExecStoreResultScore(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecStoreSuccessScoreContext extends ExecStoreChildContext {
	public scbIdentifier(): ScbIdentifierContext {
		return this.getRuleContext(0, ScbIdentifierContext);
	}
	public STORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STORE, 0); }
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SUCCESS, 0); }
	constructor(ctx: ExecStoreChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecStoreSuccessScore) {
			listener.enterExecStoreSuccessScore(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecStoreSuccessScore) {
			listener.exitExecStoreSuccessScore(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecStoreSuccessScore) {
			return visitor.visitExecStoreSuccessScore(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecStoreResultDataContext extends ExecStoreChildContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public STORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STORE, 0); }
	public numberType(): NumberTypeContext | undefined {
		return this.tryGetRuleContext(0, NumberTypeContext);
	}
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	public RESULT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RESULT, 0); }
	constructor(ctx: ExecStoreChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecStoreResultData) {
			listener.enterExecStoreResultData(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecStoreResultData) {
			listener.exitExecStoreResultData(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecStoreResultData) {
			return visitor.visitExecStoreResultData(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecStoreSuccessDataContext extends ExecStoreChildContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public numberType(): NumberTypeContext | undefined {
		return this.tryGetRuleContext(0, NumberTypeContext);
	}
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	public STORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STORE, 0); }
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SUCCESS, 0); }
	constructor(ctx: ExecStoreChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecStoreSuccessData) {
			listener.enterExecStoreSuccessData(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecStoreSuccessData) {
			listener.exitExecStoreSuccessData(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecStoreSuccessData) {
			return visitor.visitExecStoreSuccessData(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecStoreResultBossbarContext extends ExecStoreChildContext {
	public _value!: Token;
	public bossbarIdentifier(): BossbarIdentifierContext {
		return this.getRuleContext(0, BossbarIdentifierContext);
	}
	public STORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STORE, 0); }
	public RESULT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RESULT, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.VALUE, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MAX, 0); }
	constructor(ctx: ExecStoreChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecStoreResultBossbar) {
			listener.enterExecStoreResultBossbar(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecStoreResultBossbar) {
			listener.exitExecStoreResultBossbar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecStoreResultBossbar) {
			return visitor.visitExecStoreResultBossbar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecStoreSuccessBossbarContext extends ExecStoreChildContext {
	public _value!: Token;
	public bossbarIdentifier(): BossbarIdentifierContext {
		return this.getRuleContext(0, BossbarIdentifierContext);
	}
	public STORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STORE, 0); }
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SUCCESS, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.VALUE, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MAX, 0); }
	constructor(ctx: ExecStoreChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecStoreSuccessBossbar) {
			listener.enterExecStoreSuccessBossbar(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecStoreSuccessBossbar) {
			listener.exitExecStoreSuccessBossbar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecStoreSuccessBossbar) {
			return visitor.visitExecStoreSuccessBossbar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecRunChildContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_execRunChild; }
	public copyFrom(ctx: ExecRunChildContext): void {
		super.copyFrom(ctx);
	}
}
export class ExecDirectRunContext extends ExecRunChildContext {
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public statement(): StatementContext {
		return this.getRuleContext(0, StatementContext);
	}
	public RUN(): TerminalNode { return this.getToken(JustMCFParser.RUN, 0); }
	constructor(ctx: ExecRunChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecDirectRun) {
			listener.enterExecDirectRun(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecDirectRun) {
			listener.exitExecDirectRun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecDirectRun) {
			return visitor.visitExecDirectRun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecNamedRunContext extends ExecRunChildContext {
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public funcStatement(): FuncStatementContext {
		return this.getRuleContext(0, FuncStatementContext);
	}
	public RUN(): TerminalNode { return this.getToken(JustMCFParser.RUN, 0); }
	constructor(ctx: ExecRunChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecNamedRun) {
			listener.enterExecNamedRun(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecNamedRun) {
			listener.exitExecNamedRun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecNamedRun) {
			return visitor.visitExecNamedRun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecAnonymousRunContext extends ExecRunChildContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public RUN(): TerminalNode { return this.getToken(JustMCFParser.RUN, 0); }
	public FUNC(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FUNC, 0); }
	public statementInner(): StatementInnerContext[];
	public statementInner(i: number): StatementInnerContext;
	public statementInner(i?: number): StatementInnerContext | StatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementInnerContext);
		} else {
			return this.getRuleContext(i, StatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: ExecRunChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecAnonymousRun) {
			listener.enterExecAnonymousRun(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecAnonymousRun) {
			listener.exitExecAnonymousRun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecAnonymousRun) {
			return visitor.visitExecAnonymousRun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecChildContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_execChild; }
	public copyFrom(ctx: ExecChildContext): void {
		super.copyFrom(ctx);
	}
}
export class ExecAlignContext extends ExecChildContext {
	public ALIGN(): TerminalNode { return this.getToken(JustMCFParser.ALIGN, 0); }
	public AcceptableName(): TerminalNode { return this.getToken(JustMCFParser.AcceptableName, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecAlign) {
			listener.enterExecAlign(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecAlign) {
			listener.exitExecAlign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecAlign) {
			return visitor.visitExecAlign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecAnchoredContext extends ExecChildContext {
	public _anchor!: Token;
	public ANCHORED(): TerminalNode { return this.getToken(JustMCFParser.ANCHORED, 0); }
	public EYES(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.EYES, 0); }
	public FEET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FEET, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecAnchored) {
			listener.enterExecAnchored(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecAnchored) {
			listener.exitExecAnchored(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecAnchored) {
			return visitor.visitExecAnchored(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecInContext extends ExecChildContext {
	public IN(): TerminalNode { return this.getToken(JustMCFParser.IN, 0); }
	public nameSpaceDim(): NameSpaceDimContext {
		return this.getRuleContext(0, NameSpaceDimContext);
	}
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecIn) {
			listener.enterExecIn(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecIn) {
			listener.exitExecIn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecIn) {
			return visitor.visitExecIn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecAsContext extends ExecChildContext {
	public AS(): TerminalNode { return this.getToken(JustMCFParser.AS, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecAs) {
			listener.enterExecAs(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecAs) {
			listener.exitExecAs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecAs) {
			return visitor.visitExecAs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecAtContext extends ExecChildContext {
	public AT(): TerminalNode { return this.getToken(JustMCFParser.AT, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecAt) {
			listener.enterExecAt(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecAt) {
			listener.exitExecAt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecAt) {
			return visitor.visitExecAt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecFacingPosContext extends ExecChildContext {
	public FACING(): TerminalNode { return this.getToken(JustMCFParser.FACING, 0); }
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecFacingPos) {
			listener.enterExecFacingPos(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecFacingPos) {
			listener.exitExecFacingPos(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecFacingPos) {
			return visitor.visitExecFacingPos(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecFacingEntityContext extends ExecChildContext {
	public _anchor!: Token;
	public FACING(): TerminalNode { return this.getToken(JustMCFParser.FACING, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public EYES(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.EYES, 0); }
	public FEET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FEET, 0); }
	public ENTITY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ENTITY, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecFacingEntity) {
			listener.enterExecFacingEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecFacingEntity) {
			listener.exitExecFacingEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecFacingEntity) {
			return visitor.visitExecFacingEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecPositionedPosContext extends ExecChildContext {
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public POSITIONED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.POSITIONED, 0); }
	public POS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.POS, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecPositionedPos) {
			listener.enterExecPositionedPos(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecPositionedPos) {
			listener.exitExecPositionedPos(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecPositionedPos) {
			return visitor.visitExecPositionedPos(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecPostionedAsContext extends ExecChildContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public POSITIONED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.POSITIONED, 0); }
	public POS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.POS, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.AS, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecPostionedAs) {
			listener.enterExecPostionedAs(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecPostionedAs) {
			listener.exitExecPostionedAs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecPostionedAs) {
			return visitor.visitExecPostionedAs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecRotatedPosContext extends ExecChildContext {
	public pos2Identifier(): Pos2IdentifierContext {
		return this.getRuleContext(0, Pos2IdentifierContext);
	}
	public ROTATED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ROTATED, 0); }
	public ROT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ROT, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecRotatedPos) {
			listener.enterExecRotatedPos(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecRotatedPos) {
			listener.exitExecRotatedPos(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecRotatedPos) {
			return visitor.visitExecRotatedPos(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecRotatedAsContext extends ExecChildContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public ROTATED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ROTATED, 0); }
	public ROT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ROT, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.AS, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecRotatedAs) {
			listener.enterExecRotatedAs(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecRotatedAs) {
			listener.exitExecRotatedAs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecRotatedAs) {
			return visitor.visitExecRotatedAs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecIfEntityContext extends ExecChildContext {
	public _cond!: Token;
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public ENTITY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ENTITY, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.IF, 0); }
	public UNLESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.UNLESS, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecIfEntity) {
			listener.enterExecIfEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecIfEntity) {
			listener.exitExecIfEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecIfEntity) {
			return visitor.visitExecIfEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecIfScoreContext extends ExecChildContext {
	public _cond!: Token;
	public scbCoreIdentifier(): ScbCoreIdentifierContext[];
	public scbCoreIdentifier(i: number): ScbCoreIdentifierContext;
	public scbCoreIdentifier(i?: number): ScbCoreIdentifierContext | ScbCoreIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbCoreIdentifierContext);
		} else {
			return this.getRuleContext(i, ScbCoreIdentifierContext);
		}
	}
	public CompareOperation(): TerminalNode { return this.getToken(JustMCFParser.CompareOperation, 0); }
	public SCORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SCORE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.IF, 0); }
	public UNLESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.UNLESS, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecIfScore) {
			listener.enterExecIfScore(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecIfScore) {
			listener.exitExecIfScore(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecIfScore) {
			return visitor.visitExecIfScore(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecIfScoreMatchesContext extends ExecChildContext {
	public _cond!: Token;
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public scbCompareNumber(): ScbCompareNumberContext | undefined {
		return this.tryGetRuleContext(0, ScbCompareNumberContext);
	}
	public SCORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SCORE, 0); }
	public intRange(): IntRangeContext | undefined {
		return this.tryGetRuleContext(0, IntRangeContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.IF, 0); }
	public UNLESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.UNLESS, 0); }
	public MATCHES(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MATCHES, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecIfScoreMatches) {
			listener.enterExecIfScoreMatches(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecIfScoreMatches) {
			listener.exitExecIfScoreMatches(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecIfScoreMatches) {
			return visitor.visitExecIfScoreMatches(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecIfBlockContext extends ExecChildContext {
	public _cond!: Token;
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public blockIdentifier(): BlockIdentifierContext {
		return this.getRuleContext(0, BlockIdentifierContext);
	}
	public BLOCK(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BLOCK, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.IF, 0); }
	public UNLESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.UNLESS, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecIfBlock) {
			listener.enterExecIfBlock(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecIfBlock) {
			listener.exitExecIfBlock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecIfBlock) {
			return visitor.visitExecIfBlock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecIfBlocksContext extends ExecChildContext {
	public _cond!: Token;
	public _scan_mode!: Token;
	public pos3Identifier(): Pos3IdentifierContext[];
	public pos3Identifier(i: number): Pos3IdentifierContext;
	public pos3Identifier(i?: number): Pos3IdentifierContext | Pos3IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Pos3IdentifierContext);
		} else {
			return this.getRuleContext(i, Pos3IdentifierContext);
		}
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ALL, 0); }
	public MASKED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MASKED, 0); }
	public BLOCKS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BLOCKS, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.IF, 0); }
	public UNLESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.UNLESS, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecIfBlocks) {
			listener.enterExecIfBlocks(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecIfBlocks) {
			listener.exitExecIfBlocks(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecIfBlocks) {
			return visitor.visitExecIfBlocks(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecIfDataContext extends ExecChildContext {
	public _cond!: Token;
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public DATA(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DATA, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.IF, 0); }
	public UNLESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.UNLESS, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecIfData) {
			listener.enterExecIfData(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecIfData) {
			listener.exitExecIfData(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecIfData) {
			return visitor.visitExecIfData(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecIfBiomeContext extends ExecChildContext {
	public _cond!: Token;
	public BIOME(): TerminalNode { return this.getToken(JustMCFParser.BIOME, 0); }
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public nameSpaceBiome(): NameSpaceBiomeContext {
		return this.getRuleContext(0, NameSpaceBiomeContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.IF, 0); }
	public UNLESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.UNLESS, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecIfBiome) {
			listener.enterExecIfBiome(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecIfBiome) {
			listener.exitExecIfBiome(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecIfBiome) {
			return visitor.visitExecIfBiome(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecPredicateContext extends ExecChildContext {
	public _cond!: Token;
	public nameSpacePredicate(): NameSpacePredicateContext {
		return this.getRuleContext(0, NameSpacePredicateContext);
	}
	public PREDICATE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PREDICATE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.IF, 0); }
	public UNLESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.UNLESS, 0); }
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecPredicate) {
			listener.enterExecPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecPredicate) {
			listener.exitExecPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecPredicate) {
			return visitor.visitExecPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExecStoreContext extends ExecChildContext {
	public execStoreChild(): ExecStoreChildContext {
		return this.getRuleContext(0, ExecStoreChildContext);
	}
	constructor(ctx: ExecChildContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExecStore) {
			listener.enterExecStore(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExecStore) {
			listener.exitExecStore(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExecStore) {
			return visitor.visitExecStore(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScbCompareNumberContext extends ParserRuleContext {
	public CompareOperation(): TerminalNode { return this.getToken(JustMCFParser.CompareOperation, 0); }
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_scbCompareNumber; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbCompareNumber) {
			listener.enterScbCompareNumber(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbCompareNumber) {
			listener.exitScbCompareNumber(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbCompareNumber) {
			return visitor.visitScbCompareNumber(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataIdentifierContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_dataIdentifier; }
	public copyFrom(ctx: DataIdentifierContext): void {
		super.copyFrom(ctx);
	}
}
export class DataStorageLocalContext extends DataIdentifierContext {
	public LOCAL(): TerminalNode { return this.getToken(JustMCFParser.LOCAL, 0); }
	public nbtPath(): NbtPathContext {
		return this.getRuleContext(0, NbtPathContext);
	}
	constructor(ctx: DataIdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataStorageLocal) {
			listener.enterDataStorageLocal(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataStorageLocal) {
			listener.exitDataStorageLocal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataStorageLocal) {
			return visitor.visitDataStorageLocal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataStorageContext extends DataIdentifierContext {
	public dataStorageIdentifier(): DataStorageIdentifierContext {
		return this.getRuleContext(0, DataStorageIdentifierContext);
	}
	constructor(ctx: DataIdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataStorage) {
			listener.enterDataStorage(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataStorage) {
			listener.exitDataStorage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataStorage) {
			return visitor.visitDataStorage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataStorageWithEnvContext extends DataIdentifierContext {
	public nbtPathWithoutCompound(): NbtPathWithoutCompoundContext {
		return this.getRuleContext(0, NbtPathWithoutCompoundContext);
	}
	constructor(ctx: DataIdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataStorageWithEnv) {
			listener.enterDataStorageWithEnv(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataStorageWithEnv) {
			listener.exitDataStorageWithEnv(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataStorageWithEnv) {
			return visitor.visitDataStorageWithEnv(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataEntityContext extends DataIdentifierContext {
	public dataEntityIdentifier(): DataEntityIdentifierContext {
		return this.getRuleContext(0, DataEntityIdentifierContext);
	}
	constructor(ctx: DataIdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataEntity) {
			listener.enterDataEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataEntity) {
			listener.exitDataEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataEntity) {
			return visitor.visitDataEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataBlockContext extends DataIdentifierContext {
	public dataBlockIdentifier(): DataBlockIdentifierContext {
		return this.getRuleContext(0, DataBlockIdentifierContext);
	}
	constructor(ctx: DataIdentifierContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataBlock) {
			listener.enterDataBlock(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataBlock) {
			listener.exitDataBlock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataBlock) {
			return visitor.visitDataBlock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataStorageIdentifierContext extends ParserRuleContext {
	public nameSpaceStorage(): NameSpaceStorageContext {
		return this.getRuleContext(0, NameSpaceStorageContext);
	}
	public nbtPath(): NbtPathContext {
		return this.getRuleContext(0, NbtPathContext);
	}
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STORAGE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_dataStorageIdentifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataStorageIdentifier) {
			listener.enterDataStorageIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataStorageIdentifier) {
			listener.exitDataStorageIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataStorageIdentifier) {
			return visitor.visitDataStorageIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataEntityIdentifierContext extends ParserRuleContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public nbtPath(): NbtPathContext {
		return this.getRuleContext(0, NbtPathContext);
	}
	public ENTITY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ENTITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_dataEntityIdentifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataEntityIdentifier) {
			listener.enterDataEntityIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataEntityIdentifier) {
			listener.exitDataEntityIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataEntityIdentifier) {
			return visitor.visitDataEntityIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataBlockIdentifierContext extends ParserRuleContext {
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public nbtPath(): NbtPathContext {
		return this.getRuleContext(0, NbtPathContext);
	}
	public BLOCK(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BLOCK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_dataBlockIdentifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataBlockIdentifier) {
			listener.enterDataBlockIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataBlockIdentifier) {
			listener.exitDataBlockIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataBlockIdentifier) {
			return visitor.visitDataBlockIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataMergeExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_dataMergeExpression; }
	public copyFrom(ctx: DataMergeExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class DataMergeStorageContext extends DataMergeExpressionContext {
	public nameSpaceStorage(): NameSpaceStorageContext {
		return this.getRuleContext(0, NameSpaceStorageContext);
	}
	public nbt(): NbtContext {
		return this.getRuleContext(0, NbtContext);
	}
	constructor(ctx: DataMergeExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataMergeStorage) {
			listener.enterDataMergeStorage(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataMergeStorage) {
			listener.exitDataMergeStorage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataMergeStorage) {
			return visitor.visitDataMergeStorage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataMergeEntityContext extends DataMergeExpressionContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public nbt(): NbtContext {
		return this.getRuleContext(0, NbtContext);
	}
	constructor(ctx: DataMergeExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataMergeEntity) {
			listener.enterDataMergeEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataMergeEntity) {
			listener.exitDataMergeEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataMergeEntity) {
			return visitor.visitDataMergeEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataMergeBlockContext extends DataMergeExpressionContext {
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public nbt(): NbtContext {
		return this.getRuleContext(0, NbtContext);
	}
	constructor(ctx: DataMergeExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataMergeBlock) {
			listener.enterDataMergeBlock(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataMergeBlock) {
			listener.exitDataMergeBlock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataMergeBlock) {
			return visitor.visitDataMergeBlock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataOperationExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_dataOperationExpression; }
	public copyFrom(ctx: DataOperationExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class DataGetContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataGet) {
			listener.enterDataGet(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataGet) {
			listener.exitDataGet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataGet) {
			return visitor.visitDataGet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataMergeContext extends DataOperationExpressionContext {
	public dataMergeExpression(): DataMergeExpressionContext {
		return this.getRuleContext(0, DataMergeExpressionContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataMerge) {
			listener.enterDataMerge(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataMerge) {
			listener.exitDataMerge(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataMerge) {
			return visitor.visitDataMerge(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataModifyMergeValueContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public nbt(): NbtContext {
		return this.getRuleContext(0, NbtContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataModifyMergeValue) {
			listener.enterDataModifyMergeValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataModifyMergeValue) {
			listener.exitDataModifyMergeValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataModifyMergeValue) {
			return visitor.visitDataModifyMergeValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataModifyMergeFromContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public dataRightValue(): DataRightValueContext {
		return this.getRuleContext(0, DataRightValueContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataModifyMergeFrom) {
			listener.enterDataModifyMergeFrom(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataModifyMergeFrom) {
			listener.exitDataModifyMergeFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataModifyMergeFrom) {
			return visitor.visitDataModifyMergeFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataModifySetValueContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public nbt(): NbtContext {
		return this.getRuleContext(0, NbtContext);
	}
	public typeName(): TypeNameContext | undefined {
		return this.tryGetRuleContext(0, TypeNameContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataModifySetValue) {
			listener.enterDataModifySetValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataModifySetValue) {
			listener.exitDataModifySetValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataModifySetValue) {
			return visitor.visitDataModifySetValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataModifySetFromContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public dataRightValue(): DataRightValueContext {
		return this.getRuleContext(0, DataRightValueContext);
	}
	public typeName(): TypeNameContext | undefined {
		return this.tryGetRuleContext(0, TypeNameContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataModifySetFrom) {
			listener.enterDataModifySetFrom(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataModifySetFrom) {
			listener.exitDataModifySetFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataModifySetFrom) {
			return visitor.visitDataModifySetFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataModifyAppendValueContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public nbt(): NbtContext {
		return this.getRuleContext(0, NbtContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataModifyAppendValue) {
			listener.enterDataModifyAppendValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataModifyAppendValue) {
			listener.exitDataModifyAppendValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataModifyAppendValue) {
			return visitor.visitDataModifyAppendValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataModifyAppendFromContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public dataRightValue(): DataRightValueContext {
		return this.getRuleContext(0, DataRightValueContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataModifyAppendFrom) {
			listener.enterDataModifyAppendFrom(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataModifyAppendFrom) {
			listener.exitDataModifyAppendFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataModifyAppendFrom) {
			return visitor.visitDataModifyAppendFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataModifyPrependValueContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public nbt(): NbtContext {
		return this.getRuleContext(0, NbtContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataModifyPrependValue) {
			listener.enterDataModifyPrependValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataModifyPrependValue) {
			listener.exitDataModifyPrependValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataModifyPrependValue) {
			return visitor.visitDataModifyPrependValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataModifyPrependFromContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public dataRightValue(): DataRightValueContext {
		return this.getRuleContext(0, DataRightValueContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataModifyPrependFrom) {
			listener.enterDataModifyPrependFrom(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataModifyPrependFrom) {
			listener.exitDataModifyPrependFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataModifyPrependFrom) {
			return visitor.visitDataModifyPrependFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataModifyInsertValueContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	public nbt(): NbtContext {
		return this.getRuleContext(0, NbtContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataModifyInsertValue) {
			listener.enterDataModifyInsertValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataModifyInsertValue) {
			listener.exitDataModifyInsertValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataModifyInsertValue) {
			return visitor.visitDataModifyInsertValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataModifyInsertFromContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	public dataRightValue(): DataRightValueContext {
		return this.getRuleContext(0, DataRightValueContext);
	}
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataModifyInsertFrom) {
			listener.enterDataModifyInsertFrom(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataModifyInsertFrom) {
			listener.exitDataModifyInsertFrom(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataModifyInsertFrom) {
			return visitor.visitDataModifyInsertFrom(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataRemoveContext extends DataOperationExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public REMOVE(): TerminalNode { return this.getToken(JustMCFParser.REMOVE, 0); }
	constructor(ctx: DataOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataRemove) {
			listener.enterDataRemove(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataRemove) {
			listener.exitDataRemove(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataRemove) {
			return visitor.visitDataRemove(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataRightValueContext extends ParserRuleContext {
	public dataIdentifier(): DataIdentifierContext | undefined {
		return this.tryGetRuleContext(0, DataIdentifierContext);
	}
	public funcImproveRunExpression(): FuncImproveRunExpressionContext | undefined {
		return this.tryGetRuleContext(0, FuncImproveRunExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_dataRightValue; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataRightValue) {
			listener.enterDataRightValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataRightValue) {
			listener.exitDataRightValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataRightValue) {
			return visitor.visitDataRightValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_dataStatement; }
	public copyFrom(ctx: DataStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class DataSCompoundContext extends DataStatementContext {
	public DATA(): TerminalNode { return this.getToken(JustMCFParser.DATA, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public dataOperationExpression(): DataOperationExpressionContext[];
	public dataOperationExpression(i: number): DataOperationExpressionContext;
	public dataOperationExpression(i?: number): DataOperationExpressionContext | DataOperationExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataOperationExpressionContext);
		} else {
			return this.getRuleContext(i, DataOperationExpressionContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: DataStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataSCompound) {
			listener.enterDataSCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataSCompound) {
			listener.exitDataSCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataSCompound) {
			return visitor.visitDataSCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DataSIdentifierCompoundContext extends DataStatementContext {
	public DATA(): TerminalNode { return this.getToken(JustMCFParser.DATA, 0); }
	public nameSpaceStorage(): NameSpaceStorageContext {
		return this.getRuleContext(0, NameSpaceStorageContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public nbtPath(): NbtPathContext | undefined {
		return this.tryGetRuleContext(0, NbtPathContext);
	}
	public dataOperationExpression(): DataOperationExpressionContext[];
	public dataOperationExpression(i: number): DataOperationExpressionContext;
	public dataOperationExpression(i?: number): DataOperationExpressionContext | DataOperationExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DataOperationExpressionContext);
		} else {
			return this.getRuleContext(i, DataOperationExpressionContext);
		}
	}
	constructor(ctx: DataStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataSIdentifierCompound) {
			listener.enterDataSIdentifierCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataSIdentifierCompound) {
			listener.exitDataSIdentifierCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataSIdentifierCompound) {
			return visitor.visitDataSIdentifierCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScbOperationExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_scbOperationExpression; }
	public copyFrom(ctx: ScbOperationExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class ScbGetContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbGet) {
			listener.enterScbGet(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbGet) {
			listener.exitScbGet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbGet) {
			return visitor.visitScbGet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbAddContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbAdd) {
			listener.enterScbAdd(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbAdd) {
			listener.exitScbAdd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbAdd) {
			return visitor.visitScbAdd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbRemoveContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbRemove) {
			listener.enterScbRemove(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbRemove) {
			listener.exitScbRemove(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbRemove) {
			return visitor.visitScbRemove(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbSetContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbSet) {
			listener.enterScbSet(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbSet) {
			listener.exitScbSet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbSet) {
			return visitor.visitScbSet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptMulAssignNumberContext extends ScbOperationExpressionContext {
	public _op!: Token;
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptMulAssignNumber) {
			listener.enterScbOptMulAssignNumber(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptMulAssignNumber) {
			listener.exitScbOptMulAssignNumber(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptMulAssignNumber) {
			return visitor.visitScbOptMulAssignNumber(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptDivAssignNumberContext extends ScbOperationExpressionContext {
	public _op!: Token;
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptDivAssignNumber) {
			listener.enterScbOptDivAssignNumber(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptDivAssignNumber) {
			listener.exitScbOptDivAssignNumber(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptDivAssignNumber) {
			return visitor.visitScbOptDivAssignNumber(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptModAssignNumberContext extends ScbOperationExpressionContext {
	public _op!: Token;
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptModAssignNumber) {
			listener.enterScbOptModAssignNumber(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptModAssignNumber) {
			listener.exitScbOptModAssignNumber(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptModAssignNumber) {
			return visitor.visitScbOptModAssignNumber(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptAddAssignContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext[];
	public scbCoreIdentifier(i: number): ScbCoreIdentifierContext;
	public scbCoreIdentifier(i?: number): ScbCoreIdentifierContext | ScbCoreIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbCoreIdentifierContext);
		} else {
			return this.getRuleContext(i, ScbCoreIdentifierContext);
		}
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptAddAssign) {
			listener.enterScbOptAddAssign(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptAddAssign) {
			listener.exitScbOptAddAssign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptAddAssign) {
			return visitor.visitScbOptAddAssign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptSubAssignContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext[];
	public scbCoreIdentifier(i: number): ScbCoreIdentifierContext;
	public scbCoreIdentifier(i?: number): ScbCoreIdentifierContext | ScbCoreIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbCoreIdentifierContext);
		} else {
			return this.getRuleContext(i, ScbCoreIdentifierContext);
		}
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptSubAssign) {
			listener.enterScbOptSubAssign(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptSubAssign) {
			listener.exitScbOptSubAssign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptSubAssign) {
			return visitor.visitScbOptSubAssign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptMulAssignContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext[];
	public scbCoreIdentifier(i: number): ScbCoreIdentifierContext;
	public scbCoreIdentifier(i?: number): ScbCoreIdentifierContext | ScbCoreIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbCoreIdentifierContext);
		} else {
			return this.getRuleContext(i, ScbCoreIdentifierContext);
		}
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptMulAssign) {
			listener.enterScbOptMulAssign(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptMulAssign) {
			listener.exitScbOptMulAssign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptMulAssign) {
			return visitor.visitScbOptMulAssign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptDivAssignContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext[];
	public scbCoreIdentifier(i: number): ScbCoreIdentifierContext;
	public scbCoreIdentifier(i?: number): ScbCoreIdentifierContext | ScbCoreIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbCoreIdentifierContext);
		} else {
			return this.getRuleContext(i, ScbCoreIdentifierContext);
		}
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptDivAssign) {
			listener.enterScbOptDivAssign(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptDivAssign) {
			listener.exitScbOptDivAssign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptDivAssign) {
			return visitor.visitScbOptDivAssign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptModAssignContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext[];
	public scbCoreIdentifier(i: number): ScbCoreIdentifierContext;
	public scbCoreIdentifier(i?: number): ScbCoreIdentifierContext | ScbCoreIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbCoreIdentifierContext);
		} else {
			return this.getRuleContext(i, ScbCoreIdentifierContext);
		}
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptModAssign) {
			listener.enterScbOptModAssign(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptModAssign) {
			listener.exitScbOptModAssign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptModAssign) {
			return visitor.visitScbOptModAssign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptExcFuncContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext[];
	public scbCoreIdentifier(i: number): ScbCoreIdentifierContext;
	public scbCoreIdentifier(i?: number): ScbCoreIdentifierContext | ScbCoreIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbCoreIdentifierContext);
		} else {
			return this.getRuleContext(i, ScbCoreIdentifierContext);
		}
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptExcFunc) {
			listener.enterScbOptExcFunc(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptExcFunc) {
			listener.exitScbOptExcFunc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptExcFunc) {
			return visitor.visitScbOptExcFunc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptMinFuncContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext[];
	public scbCoreIdentifier(i: number): ScbCoreIdentifierContext;
	public scbCoreIdentifier(i?: number): ScbCoreIdentifierContext | ScbCoreIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbCoreIdentifierContext);
		} else {
			return this.getRuleContext(i, ScbCoreIdentifierContext);
		}
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptMinFunc) {
			listener.enterScbOptMinFunc(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptMinFunc) {
			listener.exitScbOptMinFunc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptMinFunc) {
			return visitor.visitScbOptMinFunc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptMaxFuncContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext[];
	public scbCoreIdentifier(i: number): ScbCoreIdentifierContext;
	public scbCoreIdentifier(i?: number): ScbCoreIdentifierContext | ScbCoreIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbCoreIdentifierContext);
		} else {
			return this.getRuleContext(i, ScbCoreIdentifierContext);
		}
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptMaxFunc) {
			listener.enterScbOptMaxFunc(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptMaxFunc) {
			listener.exitScbOptMaxFunc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptMaxFunc) {
			return visitor.visitScbOptMaxFunc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptAssignContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext[];
	public scbCoreIdentifier(i: number): ScbCoreIdentifierContext;
	public scbCoreIdentifier(i?: number): ScbCoreIdentifierContext | ScbCoreIdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbCoreIdentifierContext);
		} else {
			return this.getRuleContext(i, ScbCoreIdentifierContext);
		}
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptAssign) {
			listener.enterScbOptAssign(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptAssign) {
			listener.exitScbOptAssign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptAssign) {
			return visitor.visitScbOptAssign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbResetContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public RESET(): TerminalNode { return this.getToken(JustMCFParser.RESET, 0); }
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbReset) {
			listener.enterScbReset(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbReset) {
			listener.exitScbReset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbReset) {
			return visitor.visitScbReset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbEnableContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public ENABLE(): TerminalNode { return this.getToken(JustMCFParser.ENABLE, 0); }
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbEnable) {
			listener.enterScbEnable(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbEnable) {
			listener.exitScbEnable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbEnable) {
			return visitor.visitScbEnable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptExpressionContext extends ScbOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public scbSingleOperationExpression(): ScbSingleOperationExpressionContext {
		return this.getRuleContext(0, ScbSingleOperationExpressionContext);
	}
	constructor(ctx: ScbOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptExpression) {
			listener.enterScbOptExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptExpression) {
			listener.exitScbOptExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptExpression) {
			return visitor.visitScbOptExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScbSingleOperationExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_scbSingleOperationExpression; }
	public copyFrom(ctx: ScbSingleOperationExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class ScbFuncExpressionContext extends ScbSingleOperationExpressionContext {
	public _op!: Token;
	public scbSingleOperationExpression(): ScbSingleOperationExpressionContext[];
	public scbSingleOperationExpression(i: number): ScbSingleOperationExpressionContext;
	public scbSingleOperationExpression(i?: number): ScbSingleOperationExpressionContext | ScbSingleOperationExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbSingleOperationExpressionContext);
		} else {
			return this.getRuleContext(i, ScbSingleOperationExpressionContext);
		}
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	constructor(ctx: ScbSingleOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbFuncExpression) {
			listener.enterScbFuncExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbFuncExpression) {
			listener.exitScbFuncExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbFuncExpression) {
			return visitor.visitScbFuncExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptMulDivModExpressionContext extends ScbSingleOperationExpressionContext {
	public _op!: Token;
	public scbSingleOperationExpression(): ScbSingleOperationExpressionContext[];
	public scbSingleOperationExpression(i: number): ScbSingleOperationExpressionContext;
	public scbSingleOperationExpression(i?: number): ScbSingleOperationExpressionContext | ScbSingleOperationExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbSingleOperationExpressionContext);
		} else {
			return this.getRuleContext(i, ScbSingleOperationExpressionContext);
		}
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	constructor(ctx: ScbSingleOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptMulDivModExpression) {
			listener.enterScbOptMulDivModExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptMulDivModExpression) {
			listener.exitScbOptMulDivModExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptMulDivModExpression) {
			return visitor.visitScbOptMulDivModExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbOptAddSubExpressionContext extends ScbSingleOperationExpressionContext {
	public _op!: Token;
	public scbSingleOperationExpression(): ScbSingleOperationExpressionContext[];
	public scbSingleOperationExpression(i: number): ScbSingleOperationExpressionContext;
	public scbSingleOperationExpression(i?: number): ScbSingleOperationExpressionContext | ScbSingleOperationExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbSingleOperationExpressionContext);
		} else {
			return this.getRuleContext(i, ScbSingleOperationExpressionContext);
		}
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	constructor(ctx: ScbSingleOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbOptAddSubExpression) {
			listener.enterScbOptAddSubExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbOptAddSubExpression) {
			listener.exitScbOptAddSubExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbOptAddSubExpression) {
			return visitor.visitScbOptAddSubExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbTempNumberExpressionContext extends ScbSingleOperationExpressionContext {
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: ScbSingleOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbTempNumberExpression) {
			listener.enterScbTempNumberExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbTempNumberExpression) {
			listener.exitScbTempNumberExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbTempNumberExpression) {
			return visitor.visitScbTempNumberExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbIdExpressionContext extends ScbSingleOperationExpressionContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	constructor(ctx: ScbSingleOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbIdExpression) {
			listener.enterScbIdExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbIdExpression) {
			listener.exitScbIdExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbIdExpression) {
			return visitor.visitScbIdExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbParenExpressionContext extends ScbSingleOperationExpressionContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public scbSingleOperationExpression(): ScbSingleOperationExpressionContext {
		return this.getRuleContext(0, ScbSingleOperationExpressionContext);
	}
	constructor(ctx: ScbSingleOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbParenExpression) {
			listener.enterScbParenExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbParenExpression) {
			listener.exitScbParenExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbParenExpression) {
			return visitor.visitScbParenExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScbCoreIdentifierContext extends ParserRuleContext {
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_scbCoreIdentifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbCoreIdentifier) {
			listener.enterScbCoreIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbCoreIdentifier) {
			listener.exitScbCoreIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbCoreIdentifier) {
			return visitor.visitScbCoreIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScbIdentifierContext extends ParserRuleContext {
	public scbCoreIdentifier(): ScbCoreIdentifierContext {
		return this.getRuleContext(0, ScbCoreIdentifierContext);
	}
	public SCORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SCORE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_scbIdentifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbIdentifier) {
			listener.enterScbIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbIdentifier) {
			listener.exitScbIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbIdentifier) {
			return visitor.visitScbIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScbPlayerStatementContext extends ParserRuleContext {
	public SCB(): TerminalNode { return this.getToken(JustMCFParser.SCB, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public scbPlayerStatementInner(): ScbPlayerStatementInnerContext[];
	public scbPlayerStatementInner(i: number): ScbPlayerStatementInnerContext;
	public scbPlayerStatementInner(i?: number): ScbPlayerStatementInnerContext | ScbPlayerStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbPlayerStatementInnerContext);
		} else {
			return this.getRuleContext(i, ScbPlayerStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_scbPlayerStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbPlayerStatement) {
			listener.enterScbPlayerStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbPlayerStatement) {
			listener.exitScbPlayerStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbPlayerStatement) {
			return visitor.visitScbPlayerStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScbPlayerStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_scbPlayerStatementInner; }
	public copyFrom(ctx: ScbPlayerStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class ScbPlayerSIScbOperationExpressionContext extends ScbPlayerStatementInnerContext {
	public scbOperationExpression(): ScbOperationExpressionContext {
		return this.getRuleContext(0, ScbOperationExpressionContext);
	}
	constructor(ctx: ScbPlayerStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbPlayerSIScbOperationExpression) {
			listener.enterScbPlayerSIScbOperationExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbPlayerSIScbOperationExpression) {
			listener.exitScbPlayerSIScbOperationExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbPlayerSIScbOperationExpression) {
			return visitor.visitScbPlayerSIScbOperationExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbPlayerSIScbListContext extends ScbPlayerStatementInnerContext {
	public LIST(): TerminalNode { return this.getToken(JustMCFParser.LIST, 0); }
	public selector(): SelectorContext | undefined {
		return this.tryGetRuleContext(0, SelectorContext);
	}
	constructor(ctx: ScbPlayerStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbPlayerSIScbList) {
			listener.enterScbPlayerSIScbList(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbPlayerSIScbList) {
			listener.exitScbPlayerSIScbList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbPlayerSIScbList) {
			return visitor.visitScbPlayerSIScbList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScbObjectiveStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_scbObjectiveStatement; }
	public copyFrom(ctx: ScbObjectiveStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ScbObjSDeclareWithNameContext extends ScbObjectiveStatementContext {
	public _display!: JsonContext;
	public SCB(): TerminalNode { return this.getToken(JustMCFParser.SCB, 0); }
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public json(): JsonContext {
		return this.getRuleContext(0, JsonContext);
	}
	public criterion(): CriterionContext | undefined {
		return this.tryGetRuleContext(0, CriterionContext);
	}
	public scbStatementInner(): ScbStatementInnerContext[];
	public scbStatementInner(i: number): ScbStatementInnerContext;
	public scbStatementInner(i?: number): ScbStatementInnerContext | ScbStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbStatementInnerContext);
		} else {
			return this.getRuleContext(i, ScbStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: ScbObjectiveStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbObjSDeclareWithName) {
			listener.enterScbObjSDeclareWithName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbObjSDeclareWithName) {
			listener.exitScbObjSDeclareWithName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbObjSDeclareWithName) {
			return visitor.visitScbObjSDeclareWithName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbObjSDeclareSingleContext extends ScbObjectiveStatementContext {
	public SCB(): TerminalNode { return this.getToken(JustMCFParser.SCB, 0); }
	public criterion(): CriterionContext {
		return this.getRuleContext(0, CriterionContext);
	}
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	constructor(ctx: ScbObjectiveStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbObjSDeclareSingle) {
			listener.enterScbObjSDeclareSingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbObjSDeclareSingle) {
			listener.exitScbObjSDeclareSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbObjSDeclareSingle) {
			return visitor.visitScbObjSDeclareSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbObjSDeclareDefaultContext extends ScbObjectiveStatementContext {
	public SCB(): TerminalNode { return this.getToken(JustMCFParser.SCB, 0); }
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	public DEFAULT(): TerminalNode { return this.getToken(JustMCFParser.DEFAULT, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public criterion(): CriterionContext | undefined {
		return this.tryGetRuleContext(0, CriterionContext);
	}
	public scbStatementInner(): ScbStatementInnerContext[];
	public scbStatementInner(i: number): ScbStatementInnerContext;
	public scbStatementInner(i?: number): ScbStatementInnerContext | ScbStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbStatementInnerContext);
		} else {
			return this.getRuleContext(i, ScbStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: ScbObjectiveStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbObjSDeclareDefault) {
			listener.enterScbObjSDeclareDefault(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbObjSDeclareDefault) {
			listener.exitScbObjSDeclareDefault(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbObjSDeclareDefault) {
			return visitor.visitScbObjSDeclareDefault(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbObjSOperationContext extends ScbObjectiveStatementContext {
	public SCB(): TerminalNode { return this.getToken(JustMCFParser.SCB, 0); }
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public scbStatementInner(): ScbStatementInnerContext[];
	public scbStatementInner(i: number): ScbStatementInnerContext;
	public scbStatementInner(i?: number): ScbStatementInnerContext | ScbStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ScbStatementInnerContext);
		} else {
			return this.getRuleContext(i, ScbStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: ScbObjectiveStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbObjSOperation) {
			listener.enterScbObjSOperation(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbObjSOperation) {
			listener.exitScbObjSOperation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbObjSOperation) {
			return visitor.visitScbObjSOperation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ScbStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_scbStatementInner; }
	public copyFrom(ctx: ScbStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class ScbSIRemoveContext extends ScbStatementInnerContext {
	public REMOVE(): TerminalNode { return this.getToken(JustMCFParser.REMOVE, 0); }
	constructor(ctx: ScbStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbSIRemove) {
			listener.enterScbSIRemove(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbSIRemove) {
			listener.exitScbSIRemove(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbSIRemove) {
			return visitor.visitScbSIRemove(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbSIDisplaynameContext extends ScbStatementInnerContext {
	public DISPLAYNAME(): TerminalNode { return this.getToken(JustMCFParser.DISPLAYNAME, 0); }
	public json(): JsonContext {
		return this.getRuleContext(0, JsonContext);
	}
	constructor(ctx: ScbStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbSIDisplayname) {
			listener.enterScbSIDisplayname(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbSIDisplayname) {
			listener.exitScbSIDisplayname(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbSIDisplayname) {
			return visitor.visitScbSIDisplayname(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbSIRendertypeContext extends ScbStatementInnerContext {
	public _type!: Token;
	public RENDERTYPE(): TerminalNode { return this.getToken(JustMCFParser.RENDERTYPE, 0); }
	public HEARTS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.HEARTS, 0); }
	public INTEGER(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.INTEGER, 0); }
	constructor(ctx: ScbStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbSIRendertype) {
			listener.enterScbSIRendertype(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbSIRendertype) {
			listener.exitScbSIRendertype(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbSIRendertype) {
			return visitor.visitScbSIRendertype(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ScbSIDisplayContext extends ScbStatementInnerContext {
	public DISPLAY(): TerminalNode { return this.getToken(JustMCFParser.DISPLAY, 0); }
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	constructor(ctx: ScbStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterScbSIDisplay) {
			listener.enterScbSIDisplay(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitScbSIDisplay) {
			listener.exitScbSIDisplay(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitScbSIDisplay) {
			return visitor.visitScbSIDisplay(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BossbarStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_bossbarStatement; }
	public copyFrom(ctx: BossbarStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class BossbarSDeclareContext extends BossbarStatementContext {
	public BOSSBAR(): TerminalNode { return this.getToken(JustMCFParser.BOSSBAR, 0); }
	public nameSpaceBossbar(): NameSpaceBossbarContext {
		return this.getRuleContext(0, NameSpaceBossbarContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public json(): JsonContext {
		return this.getRuleContext(0, JsonContext);
	}
	public bossbarStatementInner(): BossbarStatementInnerContext[];
	public bossbarStatementInner(i: number): BossbarStatementInnerContext;
	public bossbarStatementInner(i?: number): BossbarStatementInnerContext | BossbarStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BossbarStatementInnerContext);
		} else {
			return this.getRuleContext(i, BossbarStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: BossbarStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSDeclare) {
			listener.enterBossbarSDeclare(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSDeclare) {
			listener.exitBossbarSDeclare(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSDeclare) {
			return visitor.visitBossbarSDeclare(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarSOperationContext extends BossbarStatementContext {
	public BOSSBAR(): TerminalNode { return this.getToken(JustMCFParser.BOSSBAR, 0); }
	public nameSpaceBossbar(): NameSpaceBossbarContext {
		return this.getRuleContext(0, NameSpaceBossbarContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public bossbarStatementInner(): BossbarStatementInnerContext[];
	public bossbarStatementInner(i: number): BossbarStatementInnerContext;
	public bossbarStatementInner(i?: number): BossbarStatementInnerContext | BossbarStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BossbarStatementInnerContext);
		} else {
			return this.getRuleContext(i, BossbarStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: BossbarStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSOperation) {
			listener.enterBossbarSOperation(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSOperation) {
			listener.exitBossbarSOperation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSOperation) {
			return visitor.visitBossbarSOperation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BossbarStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_bossbarStatementInner; }
	public copyFrom(ctx: BossbarStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class BossbarSIGetContext extends BossbarStatementInnerContext {
	public _type!: Token;
	public MAX(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MAX, 0); }
	public PLAYER(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PLAYER, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.VALUE, 0); }
	public VISIBLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.VISIBLE, 0); }
	public GET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.GET, 0); }
	constructor(ctx: BossbarStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSIGet) {
			listener.enterBossbarSIGet(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSIGet) {
			listener.exitBossbarSIGet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSIGet) {
			return visitor.visitBossbarSIGet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarSIRemoveContext extends BossbarStatementInnerContext {
	public REMOVE(): TerminalNode { return this.getToken(JustMCFParser.REMOVE, 0); }
	constructor(ctx: BossbarStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSIRemove) {
			listener.enterBossbarSIRemove(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSIRemove) {
			listener.exitBossbarSIRemove(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSIRemove) {
			return visitor.visitBossbarSIRemove(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarSISetColorContext extends BossbarStatementInnerContext {
	public _color!: Token;
	public COLOR(): TerminalNode { return this.getToken(JustMCFParser.COLOR, 0); }
	public BLUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BLUE, 0); }
	public GREEN(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.GREEN, 0); }
	public PINK(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PINK, 0); }
	public PURPLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PURPLE, 0); }
	public RED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RED, 0); }
	public WHITE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.WHITE, 0); }
	public YELLOW(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.YELLOW, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SET, 0); }
	constructor(ctx: BossbarStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSISetColor) {
			listener.enterBossbarSISetColor(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSISetColor) {
			listener.exitBossbarSISetColor(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSISetColor) {
			return visitor.visitBossbarSISetColor(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarSISetMaxContext extends BossbarStatementInnerContext {
	public MAX(): TerminalNode { return this.getToken(JustMCFParser.MAX, 0); }
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SET, 0); }
	constructor(ctx: BossbarStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSISetMax) {
			listener.enterBossbarSISetMax(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSISetMax) {
			listener.exitBossbarSISetMax(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSISetMax) {
			return visitor.visitBossbarSISetMax(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarSISetNameContext extends BossbarStatementInnerContext {
	public NAME(): TerminalNode { return this.getToken(JustMCFParser.NAME, 0); }
	public json(): JsonContext {
		return this.getRuleContext(0, JsonContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SET, 0); }
	constructor(ctx: BossbarStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSISetName) {
			listener.enterBossbarSISetName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSISetName) {
			listener.exitBossbarSISetName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSISetName) {
			return visitor.visitBossbarSISetName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarSISetPlayerContext extends BossbarStatementInnerContext {
	public PLAYERS(): TerminalNode { return this.getToken(JustMCFParser.PLAYERS, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SET, 0); }
	constructor(ctx: BossbarStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSISetPlayer) {
			listener.enterBossbarSISetPlayer(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSISetPlayer) {
			listener.exitBossbarSISetPlayer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSISetPlayer) {
			return visitor.visitBossbarSISetPlayer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarSISetPlayerNullContext extends BossbarStatementInnerContext {
	public PLAYERS(): TerminalNode { return this.getToken(JustMCFParser.PLAYERS, 0); }
	public DEFAULT(): TerminalNode { return this.getToken(JustMCFParser.DEFAULT, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SET, 0); }
	constructor(ctx: BossbarStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSISetPlayerNull) {
			listener.enterBossbarSISetPlayerNull(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSISetPlayerNull) {
			listener.exitBossbarSISetPlayerNull(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSISetPlayerNull) {
			return visitor.visitBossbarSISetPlayerNull(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarSISetStyleContext extends BossbarStatementInnerContext {
	public _style!: Token;
	public STYLE(): TerminalNode { return this.getToken(JustMCFParser.STYLE, 0); }
	public NOTCHED_6(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NOTCHED_6, 0); }
	public NOTCHED_10(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NOTCHED_10, 0); }
	public NOTCHED_12(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NOTCHED_12, 0); }
	public NOTCHED_20(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NOTCHED_20, 0); }
	public PROGRESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PROGRESS, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SET, 0); }
	constructor(ctx: BossbarStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSISetStyle) {
			listener.enterBossbarSISetStyle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSISetStyle) {
			listener.exitBossbarSISetStyle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSISetStyle) {
			return visitor.visitBossbarSISetStyle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarSISetValueContext extends BossbarStatementInnerContext {
	public VALUE(): TerminalNode { return this.getToken(JustMCFParser.VALUE, 0); }
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SET, 0); }
	constructor(ctx: BossbarStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSISetValue) {
			listener.enterBossbarSISetValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSISetValue) {
			listener.exitBossbarSISetValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSISetValue) {
			return visitor.visitBossbarSISetValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarSISetVisibleContext extends BossbarStatementInnerContext {
	public VISIBLE(): TerminalNode { return this.getToken(JustMCFParser.VISIBLE, 0); }
	public boolValue(): BoolValueContext {
		return this.getRuleContext(0, BoolValueContext);
	}
	public SET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SET, 0); }
	constructor(ctx: BossbarStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarSISetVisible) {
			listener.enterBossbarSISetVisible(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarSISetVisible) {
			listener.exitBossbarSISetVisible(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarSISetVisible) {
			return visitor.visitBossbarSISetVisible(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BossbarOperationExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_bossbarOperationExpression; }
	public copyFrom(ctx: BossbarOperationExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class BossbarOpExprGetContext extends BossbarOperationExpressionContext {
	public _type!: Token;
	public bossbarIdentifier(): BossbarIdentifierContext {
		return this.getRuleContext(0, BossbarIdentifierContext);
	}
	public MAX(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MAX, 0); }
	public PLAYER(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PLAYER, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.VALUE, 0); }
	public VISIBLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.VISIBLE, 0); }
	constructor(ctx: BossbarOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarOpExprGet) {
			listener.enterBossbarOpExprGet(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarOpExprGet) {
			listener.exitBossbarOpExprGet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarOpExprGet) {
			return visitor.visitBossbarOpExprGet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarOpExprAssignValueContext extends BossbarOperationExpressionContext {
	public bossbarIdentifier(): BossbarIdentifierContext {
		return this.getRuleContext(0, BossbarIdentifierContext);
	}
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.VALUE, 0); }
	constructor(ctx: BossbarOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarOpExprAssignValue) {
			listener.enterBossbarOpExprAssignValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarOpExprAssignValue) {
			listener.exitBossbarOpExprAssignValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarOpExprAssignValue) {
			return visitor.visitBossbarOpExprAssignValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BossbarOpExprAssignMaxContext extends BossbarOperationExpressionContext {
	public bossbarIdentifier(): BossbarIdentifierContext {
		return this.getRuleContext(0, BossbarIdentifierContext);
	}
	public MAX(): TerminalNode { return this.getToken(JustMCFParser.MAX, 0); }
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: BossbarOperationExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarOpExprAssignMax) {
			listener.enterBossbarOpExprAssignMax(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarOpExprAssignMax) {
			listener.exitBossbarOpExprAssignMax(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarOpExprAssignMax) {
			return visitor.visitBossbarOpExprAssignMax(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BossbarIdentifierContext extends ParserRuleContext {
	public BOSSBAR(): TerminalNode { return this.getToken(JustMCFParser.BOSSBAR, 0); }
	public nameSpaceBossbar(): NameSpaceBossbarContext {
		return this.getRuleContext(0, NameSpaceBossbarContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_bossbarIdentifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBossbarIdentifier) {
			listener.enterBossbarIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBossbarIdentifier) {
			listener.exitBossbarIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBossbarIdentifier) {
			return visitor.visitBossbarIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TitleStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_titleStatement; }
	public copyFrom(ctx: TitleStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class TitleSCompoundContext extends TitleStatementContext {
	public TITLE(): TerminalNode { return this.getToken(JustMCFParser.TITLE, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public titleStatementInner(): TitleStatementInnerContext[];
	public titleStatementInner(i: number): TitleStatementInnerContext;
	public titleStatementInner(i?: number): TitleStatementInnerContext | TitleStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TitleStatementInnerContext);
		} else {
			return this.getRuleContext(i, TitleStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: TitleStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleSCompound) {
			listener.enterTitleSCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleSCompound) {
			listener.exitTitleSCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleSCompound) {
			return visitor.visitTitleSCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TitleSSelectorCompoundContext extends TitleStatementContext {
	public TITLE(): TerminalNode { return this.getToken(JustMCFParser.TITLE, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public titleSelectorStatementInner(): TitleSelectorStatementInnerContext[];
	public titleSelectorStatementInner(i: number): TitleSelectorStatementInnerContext;
	public titleSelectorStatementInner(i?: number): TitleSelectorStatementInnerContext | TitleSelectorStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TitleSelectorStatementInnerContext);
		} else {
			return this.getRuleContext(i, TitleSelectorStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: TitleStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleSSelectorCompound) {
			listener.enterTitleSSelectorCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleSSelectorCompound) {
			listener.exitTitleSSelectorCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleSSelectorCompound) {
			return visitor.visitTitleSSelectorCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TitleStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_titleStatementInner; }
	public copyFrom(ctx: TitleStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class TitleSISelectorSingleContext extends TitleStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public titleSelectorStatementInner(): TitleSelectorStatementInnerContext {
		return this.getRuleContext(0, TitleSelectorStatementInnerContext);
	}
	constructor(ctx: TitleStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleSISelectorSingle) {
			listener.enterTitleSISelectorSingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleSISelectorSingle) {
			listener.exitTitleSISelectorSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleSISelectorSingle) {
			return visitor.visitTitleSISelectorSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TitleSISelectorCompoundContext extends TitleStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public titleSelectorStatementInner(): TitleSelectorStatementInnerContext[];
	public titleSelectorStatementInner(i: number): TitleSelectorStatementInnerContext;
	public titleSelectorStatementInner(i?: number): TitleSelectorStatementInnerContext | TitleSelectorStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TitleSelectorStatementInnerContext);
		} else {
			return this.getRuleContext(i, TitleSelectorStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: TitleStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleSISelectorCompound) {
			listener.enterTitleSISelectorCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleSISelectorCompound) {
			listener.exitTitleSISelectorCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleSISelectorCompound) {
			return visitor.visitTitleSISelectorCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TitleSelectorStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_titleSelectorStatementInner; }
	public copyFrom(ctx: TitleSelectorStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class TitleSSIJsonContext extends TitleSelectorStatementInnerContext {
	public _pos!: Token;
	public json(): JsonContext {
		return this.getRuleContext(0, JsonContext);
	}
	public TITLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TITLE, 0); }
	public SUBTITLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SUBTITLE, 0); }
	public ACTIONBAR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ACTIONBAR, 0); }
	constructor(ctx: TitleSelectorStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleSSIJson) {
			listener.enterTitleSSIJson(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleSSIJson) {
			listener.exitTitleSSIJson(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleSSIJson) {
			return visitor.visitTitleSSIJson(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TitleSSIClearContext extends TitleSelectorStatementInnerContext {
	public CLEAR(): TerminalNode { return this.getToken(JustMCFParser.CLEAR, 0); }
	constructor(ctx: TitleSelectorStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleSSIClear) {
			listener.enterTitleSSIClear(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleSSIClear) {
			listener.exitTitleSSIClear(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleSSIClear) {
			return visitor.visitTitleSSIClear(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TitleSSIResetContext extends TitleSelectorStatementInnerContext {
	public RESET(): TerminalNode { return this.getToken(JustMCFParser.RESET, 0); }
	constructor(ctx: TitleSelectorStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleSSIReset) {
			listener.enterTitleSSIReset(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleSSIReset) {
			listener.exitTitleSSIReset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleSSIReset) {
			return visitor.visitTitleSSIReset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TitleSSITimesContext extends TitleSelectorStatementInnerContext {
	public TIMES(): TerminalNode { return this.getToken(JustMCFParser.TIMES, 0); }
	public number(): NumberContext[];
	public number(i: number): NumberContext;
	public number(i?: number): NumberContext | NumberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NumberContext);
		} else {
			return this.getRuleContext(i, NumberContext);
		}
	}
	constructor(ctx: TitleSelectorStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleSSITimes) {
			listener.enterTitleSSITimes(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleSSITimes) {
			listener.exitTitleSSITimes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleSSITimes) {
			return visitor.visitTitleSSITimes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TitleIndependentStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_titleIndependentStatementInner; }
	public copyFrom(ctx: TitleIndependentStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class TitleISIJsonContext extends TitleIndependentStatementInnerContext {
	public _pos!: Token;
	public json(): JsonContext {
		return this.getRuleContext(0, JsonContext);
	}
	public TITLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TITLE, 0); }
	public SUBTITLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SUBTITLE, 0); }
	public ACTIONBAR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ACTIONBAR, 0); }
	constructor(ctx: TitleIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleISIJson) {
			listener.enterTitleISIJson(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleISIJson) {
			listener.exitTitleISIJson(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleISIJson) {
			return visitor.visitTitleISIJson(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TitleISIClearContext extends TitleIndependentStatementInnerContext {
	public TITLE(): TerminalNode { return this.getToken(JustMCFParser.TITLE, 0); }
	public CLEAR(): TerminalNode { return this.getToken(JustMCFParser.CLEAR, 0); }
	constructor(ctx: TitleIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleISIClear) {
			listener.enterTitleISIClear(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleISIClear) {
			listener.exitTitleISIClear(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleISIClear) {
			return visitor.visitTitleISIClear(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TitleISIResetContext extends TitleIndependentStatementInnerContext {
	public TITLE(): TerminalNode { return this.getToken(JustMCFParser.TITLE, 0); }
	public RESET(): TerminalNode { return this.getToken(JustMCFParser.RESET, 0); }
	constructor(ctx: TitleIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleISIReset) {
			listener.enterTitleISIReset(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleISIReset) {
			listener.exitTitleISIReset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleISIReset) {
			return visitor.visitTitleISIReset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TitleISITimesContext extends TitleIndependentStatementInnerContext {
	public TITLE(): TerminalNode { return this.getToken(JustMCFParser.TITLE, 0); }
	public TIMES(): TerminalNode { return this.getToken(JustMCFParser.TIMES, 0); }
	public number(): NumberContext[];
	public number(i: number): NumberContext;
	public number(i?: number): NumberContext | NumberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NumberContext);
		} else {
			return this.getRuleContext(i, NumberContext);
		}
	}
	constructor(ctx: TitleIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTitleISITimes) {
			listener.enterTitleISITimes(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTitleISITimes) {
			listener.exitTitleISITimes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTitleISITimes) {
			return visitor.visitTitleISITimes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DisplayStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_displayStatement; }
	public copyFrom(ctx: DisplayStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class DisplaySCompoundContext extends DisplayStatementContext {
	public DISPLAY(): TerminalNode { return this.getToken(JustMCFParser.DISPLAY, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public displayStatementInner(): DisplayStatementInnerContext[];
	public displayStatementInner(i: number): DisplayStatementInnerContext;
	public displayStatementInner(i?: number): DisplayStatementInnerContext | DisplayStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DisplayStatementInnerContext);
		} else {
			return this.getRuleContext(i, DisplayStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: DisplayStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDisplaySCompound) {
			listener.enterDisplaySCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDisplaySCompound) {
			listener.exitDisplaySCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDisplaySCompound) {
			return visitor.visitDisplaySCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DisplaySSelectorCompoundContext extends DisplayStatementContext {
	public DISPLAY(): TerminalNode { return this.getToken(JustMCFParser.DISPLAY, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public displayIndependentStatementInner(): DisplayIndependentStatementInnerContext[];
	public displayIndependentStatementInner(i: number): DisplayIndependentStatementInnerContext;
	public displayIndependentStatementInner(i?: number): DisplayIndependentStatementInnerContext | DisplayIndependentStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DisplayIndependentStatementInnerContext);
		} else {
			return this.getRuleContext(i, DisplayIndependentStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: DisplayStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDisplaySSelectorCompound) {
			listener.enterDisplaySSelectorCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDisplaySSelectorCompound) {
			listener.exitDisplaySSelectorCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDisplaySSelectorCompound) {
			return visitor.visitDisplaySSelectorCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DisplayStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_displayStatementInner; }
	public copyFrom(ctx: DisplayStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class DisplaySIScbContext extends DisplayStatementInnerContext {
	public scbObjectiveStatement(): ScbObjectiveStatementContext {
		return this.getRuleContext(0, ScbObjectiveStatementContext);
	}
	constructor(ctx: DisplayStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDisplaySIScb) {
			listener.enterDisplaySIScb(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDisplaySIScb) {
			listener.exitDisplaySIScb(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDisplaySIScb) {
			return visitor.visitDisplaySIScb(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DisplaySIBossbarContext extends DisplayStatementInnerContext {
	public bossbarStatement(): BossbarStatementContext {
		return this.getRuleContext(0, BossbarStatementContext);
	}
	constructor(ctx: DisplayStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDisplaySIBossbar) {
			listener.enterDisplaySIBossbar(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDisplaySIBossbar) {
			listener.exitDisplaySIBossbar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDisplaySIBossbar) {
			return visitor.visitDisplaySIBossbar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DisplaySISelectorSingleContext extends DisplayStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public displayIndependentStatementInner(): DisplayIndependentStatementInnerContext {
		return this.getRuleContext(0, DisplayIndependentStatementInnerContext);
	}
	constructor(ctx: DisplayStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDisplaySISelectorSingle) {
			listener.enterDisplaySISelectorSingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDisplaySISelectorSingle) {
			listener.exitDisplaySISelectorSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDisplaySISelectorSingle) {
			return visitor.visitDisplaySISelectorSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DisplaySISelectorCompoundContext extends DisplayStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public displayIndependentStatementInner(): DisplayIndependentStatementInnerContext[];
	public displayIndependentStatementInner(i: number): DisplayIndependentStatementInnerContext;
	public displayIndependentStatementInner(i?: number): DisplayIndependentStatementInnerContext | DisplayIndependentStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DisplayIndependentStatementInnerContext);
		} else {
			return this.getRuleContext(i, DisplayIndependentStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: DisplayStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDisplaySISelectorCompound) {
			listener.enterDisplaySISelectorCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDisplaySISelectorCompound) {
			listener.exitDisplaySISelectorCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDisplaySISelectorCompound) {
			return visitor.visitDisplaySISelectorCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DisplayIndependentStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_displayIndependentStatementInner; }
	public copyFrom(ctx: DisplayIndependentStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class DisplayISITitleSingleContext extends DisplayIndependentStatementInnerContext {
	public titleIndependentStatementInner(): TitleIndependentStatementInnerContext {
		return this.getRuleContext(0, TitleIndependentStatementInnerContext);
	}
	constructor(ctx: DisplayIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDisplayISITitleSingle) {
			listener.enterDisplayISITitleSingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDisplayISITitleSingle) {
			listener.exitDisplayISITitleSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDisplayISITitleSingle) {
			return visitor.visitDisplayISITitleSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DisplayISITitleCompoundContext extends DisplayIndependentStatementInnerContext {
	public TITLE(): TerminalNode { return this.getToken(JustMCFParser.TITLE, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public titleSelectorStatementInner(): TitleSelectorStatementInnerContext[];
	public titleSelectorStatementInner(i: number): TitleSelectorStatementInnerContext;
	public titleSelectorStatementInner(i?: number): TitleSelectorStatementInnerContext | TitleSelectorStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TitleSelectorStatementInnerContext);
		} else {
			return this.getRuleContext(i, TitleSelectorStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: DisplayIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDisplayISITitleCompound) {
			listener.enterDisplayISITitleCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDisplayISITitleCompound) {
			listener.exitDisplayISITitleCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDisplayISITitleCompound) {
			return visitor.visitDisplayISITitleCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DisplayISITextContext extends DisplayIndependentStatementInnerContext {
	public TEXT(): TerminalNode { return this.getToken(JustMCFParser.TEXT, 0); }
	public json(): JsonContext {
		return this.getRuleContext(0, JsonContext);
	}
	constructor(ctx: DisplayIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDisplayISIText) {
			listener.enterDisplayISIText(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDisplayISIText) {
			listener.exitDisplayISIText(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDisplayISIText) {
			return visitor.visitDisplayISIText(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class DisplayISIBossbarContext extends DisplayIndependentStatementInnerContext {
	public BOSSBAR(): TerminalNode { return this.getToken(JustMCFParser.BOSSBAR, 0); }
	public nameSpaceBossbar(): NameSpaceBossbarContext {
		return this.getRuleContext(0, NameSpaceBossbarContext);
	}
	public json(): JsonContext | undefined {
		return this.tryGetRuleContext(0, JsonContext);
	}
	constructor(ctx: DisplayIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDisplayISIBossbar) {
			listener.enterDisplayISIBossbar(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDisplayISIBossbar) {
			listener.exitDisplayISIBossbar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDisplayISIBossbar) {
			return visitor.visitDisplayISIBossbar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ItemStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_itemStatement; }
	public copyFrom(ctx: ItemStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class ItemSCompoundContext extends ItemStatementContext {
	public ITEM(): TerminalNode { return this.getToken(JustMCFParser.ITEM, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public itemStatementInner(): ItemStatementInnerContext[];
	public itemStatementInner(i: number): ItemStatementInnerContext;
	public itemStatementInner(i?: number): ItemStatementInnerContext | ItemStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ItemStatementInnerContext);
		} else {
			return this.getRuleContext(i, ItemStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: ItemStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemSCompound) {
			listener.enterItemSCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemSCompound) {
			listener.exitItemSCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemSCompound) {
			return visitor.visitItemSCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ItemSSelectorCompoundContext extends ItemStatementContext {
	public ITEM(): TerminalNode { return this.getToken(JustMCFParser.ITEM, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public itemSelectorStatementInner(): ItemSelectorStatementInnerContext[];
	public itemSelectorStatementInner(i: number): ItemSelectorStatementInnerContext;
	public itemSelectorStatementInner(i?: number): ItemSelectorStatementInnerContext | ItemSelectorStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ItemSelectorStatementInnerContext);
		} else {
			return this.getRuleContext(i, ItemSelectorStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: ItemStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemSSelectorCompound) {
			listener.enterItemSSelectorCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemSSelectorCompound) {
			listener.exitItemSSelectorCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemSSelectorCompound) {
			return visitor.visitItemSSelectorCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LootStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_lootStatement; }
	public copyFrom(ctx: LootStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class LootSCompoundContext extends LootStatementContext {
	public LOOT(): TerminalNode { return this.getToken(JustMCFParser.LOOT, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public lootStatementInner(): LootStatementInnerContext[];
	public lootStatementInner(i: number): LootStatementInnerContext;
	public lootStatementInner(i?: number): LootStatementInnerContext | LootStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LootStatementInnerContext);
		} else {
			return this.getRuleContext(i, LootStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: LootStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSCompound) {
			listener.enterLootSCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSCompound) {
			listener.exitLootSCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSCompound) {
			return visitor.visitLootSCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSSelectorCompoundContext extends LootStatementContext {
	public LOOT(): TerminalNode { return this.getToken(JustMCFParser.LOOT, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public lootSelectorStatementInner(): LootSelectorStatementInnerContext[];
	public lootSelectorStatementInner(i: number): LootSelectorStatementInnerContext;
	public lootSelectorStatementInner(i?: number): LootSelectorStatementInnerContext | LootSelectorStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LootSelectorStatementInnerContext);
		} else {
			return this.getRuleContext(i, LootSelectorStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: LootStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSSelectorCompound) {
			listener.enterLootSSelectorCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSSelectorCompound) {
			listener.exitLootSSelectorCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSSelectorCompound) {
			return visitor.visitLootSSelectorCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LootStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_lootStatementInner; }
	public copyFrom(ctx: LootStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class LootSIInsertContext extends LootStatementInnerContext {
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public lootSource(): LootSourceContext {
		return this.getRuleContext(0, LootSourceContext);
	}
	constructor(ctx: LootStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSIInsert) {
			listener.enterLootSIInsert(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSIInsert) {
			listener.exitLootSIInsert(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSIInsert) {
			return visitor.visitLootSIInsert(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSISpawnContext extends LootStatementInnerContext {
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public lootSource(): LootSourceContext {
		return this.getRuleContext(0, LootSourceContext);
	}
	constructor(ctx: LootStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSISpawn) {
			listener.enterLootSISpawn(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSISpawn) {
			listener.exitLootSISpawn(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSISpawn) {
			return visitor.visitLootSISpawn(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSIReplaceBlockContext extends LootStatementInnerContext {
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public lootIndependentStatementInnerReplaceEntity(): LootIndependentStatementInnerReplaceEntityContext {
		return this.getRuleContext(0, LootIndependentStatementInnerReplaceEntityContext);
	}
	constructor(ctx: LootStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSIReplaceBlock) {
			listener.enterLootSIReplaceBlock(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSIReplaceBlock) {
			listener.exitLootSIReplaceBlock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSIReplaceBlock) {
			return visitor.visitLootSIReplaceBlock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSIGiveContext extends LootStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public lootIndependentStatementInnerGive(): LootIndependentStatementInnerGiveContext {
		return this.getRuleContext(0, LootIndependentStatementInnerGiveContext);
	}
	constructor(ctx: LootStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSIGive) {
			listener.enterLootSIGive(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSIGive) {
			listener.exitLootSIGive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSIGive) {
			return visitor.visitLootSIGive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSIReplaceEntityContext extends LootStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public lootIndependentStatementInnerReplaceEntity(): LootIndependentStatementInnerReplaceEntityContext {
		return this.getRuleContext(0, LootIndependentStatementInnerReplaceEntityContext);
	}
	constructor(ctx: LootStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSIReplaceEntity) {
			listener.enterLootSIReplaceEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSIReplaceEntity) {
			listener.exitLootSIReplaceEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSIReplaceEntity) {
			return visitor.visitLootSIReplaceEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSISelectorNestContext extends LootStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public lootSelectorStatementInner(): LootSelectorStatementInnerContext[];
	public lootSelectorStatementInner(i: number): LootSelectorStatementInnerContext;
	public lootSelectorStatementInner(i?: number): LootSelectorStatementInnerContext | LootSelectorStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LootSelectorStatementInnerContext);
		} else {
			return this.getRuleContext(i, LootSelectorStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: LootStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSISelectorNest) {
			listener.enterLootSISelectorNest(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSISelectorNest) {
			listener.exitLootSISelectorNest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSISelectorNest) {
			return visitor.visitLootSISelectorNest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LootSelectorStatementInnerContext extends ParserRuleContext {
	public lootIndependentStatementInnerGive(): LootIndependentStatementInnerGiveContext | undefined {
		return this.tryGetRuleContext(0, LootIndependentStatementInnerGiveContext);
	}
	public lootIndependentStatementInnerReplaceEntity(): LootIndependentStatementInnerReplaceEntityContext | undefined {
		return this.tryGetRuleContext(0, LootIndependentStatementInnerReplaceEntityContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_lootSelectorStatementInner; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSelectorStatementInner) {
			listener.enterLootSelectorStatementInner(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSelectorStatementInner) {
			listener.exitLootSelectorStatementInner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSelectorStatementInner) {
			return visitor.visitLootSelectorStatementInner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LootIndependentStatementInnerGiveContext extends ParserRuleContext {
	public lootSource(): LootSourceContext {
		return this.getRuleContext(0, LootSourceContext);
	}
	public GIVE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.GIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_lootIndependentStatementInnerGive; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootIndependentStatementInnerGive) {
			listener.enterLootIndependentStatementInnerGive(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootIndependentStatementInnerGive) {
			listener.exitLootIndependentStatementInnerGive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootIndependentStatementInnerGive) {
			return visitor.visitLootIndependentStatementInnerGive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LootIndependentStatementInnerReplaceEntityContext extends ParserRuleContext {
	public item_slot(): Item_slotContext {
		return this.getRuleContext(0, Item_slotContext);
	}
	public lootSource(): LootSourceContext {
		return this.getRuleContext(0, LootSourceContext);
	}
	public NUMBER_INT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_lootIndependentStatementInnerReplaceEntity; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootIndependentStatementInnerReplaceEntity) {
			listener.enterLootIndependentStatementInnerReplaceEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootIndependentStatementInnerReplaceEntity) {
			listener.exitLootIndependentStatementInnerReplaceEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootIndependentStatementInnerReplaceEntity) {
			return visitor.visitLootIndependentStatementInnerReplaceEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LootSourceContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_lootSource; }
	public copyFrom(ctx: LootSourceContext): void {
		super.copyFrom(ctx);
	}
}
export class LootSourceLootContext extends LootSourceContext {
	public LOOT(): TerminalNode { return this.getToken(JustMCFParser.LOOT, 0); }
	public nameSpaceLoot(): NameSpaceLootContext {
		return this.getRuleContext(0, NameSpaceLootContext);
	}
	constructor(ctx: LootSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSourceLoot) {
			listener.enterLootSourceLoot(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSourceLoot) {
			listener.exitLootSourceLoot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSourceLoot) {
			return visitor.visitLootSourceLoot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSourceFishHandContext extends LootSourceContext {
	public _hand!: Token;
	public FISH(): TerminalNode { return this.getToken(JustMCFParser.FISH, 0); }
	public nameSpaceLoot(): NameSpaceLootContext {
		return this.getRuleContext(0, NameSpaceLootContext);
	}
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public MAINHAND(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MAINHAND, 0); }
	public OFFHAND(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.OFFHAND, 0); }
	constructor(ctx: LootSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSourceFishHand) {
			listener.enterLootSourceFishHand(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSourceFishHand) {
			listener.exitLootSourceFishHand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSourceFishHand) {
			return visitor.visitLootSourceFishHand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSourceFishToolContext extends LootSourceContext {
	public FISH(): TerminalNode { return this.getToken(JustMCFParser.FISH, 0); }
	public nameSpaceLoot(): NameSpaceLootContext {
		return this.getRuleContext(0, NameSpaceLootContext);
	}
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public nameSpaceItem(): NameSpaceItemContext {
		return this.getRuleContext(0, NameSpaceItemContext);
	}
	constructor(ctx: LootSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSourceFishTool) {
			listener.enterLootSourceFishTool(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSourceFishTool) {
			listener.exitLootSourceFishTool(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSourceFishTool) {
			return visitor.visitLootSourceFishTool(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSourceKillContext extends LootSourceContext {
	public KILL(): TerminalNode { return this.getToken(JustMCFParser.KILL, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	constructor(ctx: LootSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSourceKill) {
			listener.enterLootSourceKill(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSourceKill) {
			listener.exitLootSourceKill(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSourceKill) {
			return visitor.visitLootSourceKill(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSourceMineHandContext extends LootSourceContext {
	public _hand!: Token;
	public MINE(): TerminalNode { return this.getToken(JustMCFParser.MINE, 0); }
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public MAINHAND(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MAINHAND, 0); }
	public OFFHAND(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.OFFHAND, 0); }
	constructor(ctx: LootSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSourceMineHand) {
			listener.enterLootSourceMineHand(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSourceMineHand) {
			listener.exitLootSourceMineHand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSourceMineHand) {
			return visitor.visitLootSourceMineHand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class LootSourceMineToolContext extends LootSourceContext {
	public MINE(): TerminalNode { return this.getToken(JustMCFParser.MINE, 0); }
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public nameSpaceItem(): NameSpaceItemContext {
		return this.getRuleContext(0, NameSpaceItemContext);
	}
	constructor(ctx: LootSourceContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterLootSourceMineTool) {
			listener.enterLootSourceMineTool(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitLootSourceMineTool) {
			listener.exitLootSourceMineTool(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitLootSourceMineTool) {
			return visitor.visitLootSourceMineTool(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ItemStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_itemStatementInner; }
	public copyFrom(ctx: ItemStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class ItemSIGiveAndClearContext extends ItemStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public giveAndClearIndependentStatementInner(): GiveAndClearIndependentStatementInnerContext {
		return this.getRuleContext(0, GiveAndClearIndependentStatementInnerContext);
	}
	constructor(ctx: ItemStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemSIGiveAndClear) {
			listener.enterItemSIGiveAndClear(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemSIGiveAndClear) {
			listener.exitItemSIGiveAndClear(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemSIGiveAndClear) {
			return visitor.visitItemSIGiveAndClear(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ItemSIEntityContext extends ItemStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public itemIndependentStatementInner(): ItemIndependentStatementInnerContext {
		return this.getRuleContext(0, ItemIndependentStatementInnerContext);
	}
	constructor(ctx: ItemStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemSIEntity) {
			listener.enterItemSIEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemSIEntity) {
			listener.exitItemSIEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemSIEntity) {
			return visitor.visitItemSIEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ItemSIBlockContext extends ItemStatementInnerContext {
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public itemIndependentStatementInner(): ItemIndependentStatementInnerContext {
		return this.getRuleContext(0, ItemIndependentStatementInnerContext);
	}
	constructor(ctx: ItemStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemSIBlock) {
			listener.enterItemSIBlock(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemSIBlock) {
			listener.exitItemSIBlock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemSIBlock) {
			return visitor.visitItemSIBlock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ItemSILootInnerContext extends ItemStatementInnerContext {
	public lootStatementInner(): LootStatementInnerContext {
		return this.getRuleContext(0, LootStatementInnerContext);
	}
	constructor(ctx: ItemStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemSILootInner) {
			listener.enterItemSILootInner(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemSILootInner) {
			listener.exitItemSILootInner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemSILootInner) {
			return visitor.visitItemSILootInner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ItemSISelectorNestContext extends ItemStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public itemSelectorStatementInner(): ItemSelectorStatementInnerContext[];
	public itemSelectorStatementInner(i: number): ItemSelectorStatementInnerContext;
	public itemSelectorStatementInner(i?: number): ItemSelectorStatementInnerContext | ItemSelectorStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ItemSelectorStatementInnerContext);
		} else {
			return this.getRuleContext(i, ItemSelectorStatementInnerContext);
		}
	}
	constructor(ctx: ItemStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemSISelectorNest) {
			listener.enterItemSISelectorNest(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemSISelectorNest) {
			listener.exitItemSISelectorNest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemSISelectorNest) {
			return visitor.visitItemSISelectorNest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ItemSelectorStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_itemSelectorStatementInner; }
	public copyFrom(ctx: ItemSelectorStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class ItemSSIGiveAndClearContext extends ItemSelectorStatementInnerContext {
	public giveAndClearIndependentStatementInner(): GiveAndClearIndependentStatementInnerContext {
		return this.getRuleContext(0, GiveAndClearIndependentStatementInnerContext);
	}
	constructor(ctx: ItemSelectorStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemSSIGiveAndClear) {
			listener.enterItemSSIGiveAndClear(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemSSIGiveAndClear) {
			listener.exitItemSSIGiveAndClear(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemSSIGiveAndClear) {
			return visitor.visitItemSSIGiveAndClear(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ItemSSIItemContext extends ItemSelectorStatementInnerContext {
	public itemIndependentStatementInner(): ItemIndependentStatementInnerContext {
		return this.getRuleContext(0, ItemIndependentStatementInnerContext);
	}
	constructor(ctx: ItemSelectorStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemSSIItem) {
			listener.enterItemSSIItem(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemSSIItem) {
			listener.exitItemSSIItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemSSIItem) {
			return visitor.visitItemSSIItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ItemSSILootInnerContext extends ItemSelectorStatementInnerContext {
	public lootSelectorStatementInner(): LootSelectorStatementInnerContext {
		return this.getRuleContext(0, LootSelectorStatementInnerContext);
	}
	constructor(ctx: ItemSelectorStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemSSILootInner) {
			listener.enterItemSSILootInner(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemSSILootInner) {
			listener.exitItemSSILootInner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemSSILootInner) {
			return visitor.visitItemSSILootInner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ItemIndependentStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_itemIndependentStatementInner; }
	public copyFrom(ctx: ItemIndependentStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class ItemISIReplaceWithContext extends ItemIndependentStatementInnerContext {
	public item_slot(): Item_slotContext {
		return this.getRuleContext(0, Item_slotContext);
	}
	public nameSpaceItem(): NameSpaceItemContext {
		return this.getRuleContext(0, NameSpaceItemContext);
	}
	public NUMBER_INT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: ItemIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemISIReplaceWith) {
			listener.enterItemISIReplaceWith(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemISIReplaceWith) {
			listener.exitItemISIReplaceWith(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemISIReplaceWith) {
			return visitor.visitItemISIReplaceWith(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ItemISIReplaceFromEntityContext extends ItemIndependentStatementInnerContext {
	public item_slot(): Item_slotContext[];
	public item_slot(i: number): Item_slotContext;
	public item_slot(i?: number): Item_slotContext | Item_slotContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Item_slotContext);
		} else {
			return this.getRuleContext(i, Item_slotContext);
		}
	}
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public nameSpaceItemModifier(): NameSpaceItemModifierContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceItemModifierContext);
	}
	constructor(ctx: ItemIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemISIReplaceFromEntity) {
			listener.enterItemISIReplaceFromEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemISIReplaceFromEntity) {
			listener.exitItemISIReplaceFromEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemISIReplaceFromEntity) {
			return visitor.visitItemISIReplaceFromEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ItemISIReplaceFromBlockContext extends ItemIndependentStatementInnerContext {
	public item_slot(): Item_slotContext[];
	public item_slot(i: number): Item_slotContext;
	public item_slot(i?: number): Item_slotContext | Item_slotContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Item_slotContext);
		} else {
			return this.getRuleContext(i, Item_slotContext);
		}
	}
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public nameSpaceItemModifier(): NameSpaceItemModifierContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceItemModifierContext);
	}
	constructor(ctx: ItemIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemISIReplaceFromBlock) {
			listener.enterItemISIReplaceFromBlock(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemISIReplaceFromBlock) {
			listener.exitItemISIReplaceFromBlock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemISIReplaceFromBlock) {
			return visitor.visitItemISIReplaceFromBlock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ItemISIModifyContext extends ItemIndependentStatementInnerContext {
	public item_slot(): Item_slotContext {
		return this.getRuleContext(0, Item_slotContext);
	}
	public nameSpaceItemModifier(): NameSpaceItemModifierContext {
		return this.getRuleContext(0, NameSpaceItemModifierContext);
	}
	constructor(ctx: ItemIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItemISIModify) {
			listener.enterItemISIModify(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItemISIModify) {
			listener.exitItemISIModify(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItemISIModify) {
			return visitor.visitItemISIModify(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GiveAndClearIndependentStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_giveAndClearIndependentStatementInner; }
	public copyFrom(ctx: GiveAndClearIndependentStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class GiveISIContext extends GiveAndClearIndependentStatementInnerContext {
	public nameSpaceItem(): NameSpaceItemContext {
		return this.getRuleContext(0, NameSpaceItemContext);
	}
	public NUMBER_INT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NUMBER_INT, 0); }
	public GIVE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.GIVE, 0); }
	constructor(ctx: GiveAndClearIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterGiveISI) {
			listener.enterGiveISI(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitGiveISI) {
			listener.exitGiveISI(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitGiveISI) {
			return visitor.visitGiveISI(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ClearISIContext extends GiveAndClearIndependentStatementInnerContext {
	public item_predicate(): Item_predicateContext {
		return this.getRuleContext(0, Item_predicateContext);
	}
	public NUMBER_INT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NUMBER_INT, 0); }
	public CLEAR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.CLEAR, 0); }
	constructor(ctx: GiveAndClearIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterClearISI) {
			listener.enterClearISI(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitClearISI) {
			listener.exitClearISI(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitClearISI) {
			return visitor.visitClearISI(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AttrStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_attrStatement; }
	public copyFrom(ctx: AttrStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class AttrSCompoundContext extends AttrStatementContext {
	public ATTR(): TerminalNode { return this.getToken(JustMCFParser.ATTR, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public attrStatementInner(): AttrStatementInnerContext[];
	public attrStatementInner(i: number): AttrStatementInnerContext;
	public attrStatementInner(i?: number): AttrStatementInnerContext | AttrStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AttrStatementInnerContext);
		} else {
			return this.getRuleContext(i, AttrStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: AttrStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAttrSCompound) {
			listener.enterAttrSCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAttrSCompound) {
			listener.exitAttrSCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAttrSCompound) {
			return visitor.visitAttrSCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AttrSSelectorCompoundContext extends AttrStatementContext {
	public ATTR(): TerminalNode { return this.getToken(JustMCFParser.ATTR, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public attrIndependentStatementInner(): AttrIndependentStatementInnerContext[];
	public attrIndependentStatementInner(i: number): AttrIndependentStatementInnerContext;
	public attrIndependentStatementInner(i?: number): AttrIndependentStatementInnerContext | AttrIndependentStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AttrIndependentStatementInnerContext);
		} else {
			return this.getRuleContext(i, AttrIndependentStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: AttrStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAttrSSelectorCompound) {
			listener.enterAttrSSelectorCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAttrSSelectorCompound) {
			listener.exitAttrSSelectorCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAttrSSelectorCompound) {
			return visitor.visitAttrSSelectorCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AttrStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_attrStatementInner; }
	public copyFrom(ctx: AttrStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class AttrSISingleContext extends AttrStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public attrIndependentStatementInner(): AttrIndependentStatementInnerContext {
		return this.getRuleContext(0, AttrIndependentStatementInnerContext);
	}
	constructor(ctx: AttrStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAttrSISingle) {
			listener.enterAttrSISingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAttrSISingle) {
			listener.exitAttrSISingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAttrSISingle) {
			return visitor.visitAttrSISingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AttrSISelectorCompoundContext extends AttrStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public attrIndependentStatementInner(): AttrIndependentStatementInnerContext[];
	public attrIndependentStatementInner(i: number): AttrIndependentStatementInnerContext;
	public attrIndependentStatementInner(i?: number): AttrIndependentStatementInnerContext | AttrIndependentStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AttrIndependentStatementInnerContext);
		} else {
			return this.getRuleContext(i, AttrIndependentStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: AttrStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAttrSISelectorCompound) {
			listener.enterAttrSISelectorCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAttrSISelectorCompound) {
			listener.exitAttrSISelectorCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAttrSISelectorCompound) {
			return visitor.visitAttrSISelectorCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AttrIndependentStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_attrIndependentStatementInner; }
	public copyFrom(ctx: AttrIndependentStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class AttrISIGetContext extends AttrIndependentStatementInnerContext {
	public registerName(): RegisterNameContext {
		return this.getRuleContext(0, RegisterNameContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ALL, 0); }
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	constructor(ctx: AttrIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAttrISIGet) {
			listener.enterAttrISIGet(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAttrISIGet) {
			listener.exitAttrISIGet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAttrISIGet) {
			return visitor.visitAttrISIGet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AttrISIGetBaseContext extends AttrIndependentStatementInnerContext {
	public registerName(): RegisterNameContext {
		return this.getRuleContext(0, RegisterNameContext);
	}
	public BASE(): TerminalNode { return this.getToken(JustMCFParser.BASE, 0); }
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	constructor(ctx: AttrIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAttrISIGetBase) {
			listener.enterAttrISIGetBase(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAttrISIGetBase) {
			listener.exitAttrISIGetBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAttrISIGetBase) {
			return visitor.visitAttrISIGetBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AttrISISetBaseContext extends AttrIndependentStatementInnerContext {
	public registerName(): RegisterNameContext {
		return this.getRuleContext(0, RegisterNameContext);
	}
	public BASE(): TerminalNode { return this.getToken(JustMCFParser.BASE, 0); }
	public number(): NumberContext {
		return this.getRuleContext(0, NumberContext);
	}
	constructor(ctx: AttrIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAttrISISetBase) {
			listener.enterAttrISISetBase(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAttrISISetBase) {
			listener.exitAttrISISetBase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAttrISISetBase) {
			return visitor.visitAttrISISetBase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AttrISIModifierAddContext extends AttrIndependentStatementInnerContext {
	public _op!: Token;
	public registerName(): RegisterNameContext {
		return this.getRuleContext(0, RegisterNameContext);
	}
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public UUID16_(): TerminalNode { return this.getToken(JustMCFParser.UUID16_, 0); }
	public string(): StringContext {
		return this.getRuleContext(0, StringContext);
	}
	public number(): NumberContext {
		return this.getRuleContext(0, NumberContext);
	}
	constructor(ctx: AttrIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAttrISIModifierAdd) {
			listener.enterAttrISIModifierAdd(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAttrISIModifierAdd) {
			listener.exitAttrISIModifierAdd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAttrISIModifierAdd) {
			return visitor.visitAttrISIModifierAdd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AttrISIModifierRemoveContext extends AttrIndependentStatementInnerContext {
	public registerName(): RegisterNameContext {
		return this.getRuleContext(0, RegisterNameContext);
	}
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public UUID16_(): TerminalNode { return this.getToken(JustMCFParser.UUID16_, 0); }
	constructor(ctx: AttrIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAttrISIModifierRemove) {
			listener.enterAttrISIModifierRemove(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAttrISIModifierRemove) {
			listener.exitAttrISIModifierRemove(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAttrISIModifierRemove) {
			return visitor.visitAttrISIModifierRemove(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class AttrISIModifierGetContext extends AttrIndependentStatementInnerContext {
	public registerName(): RegisterNameContext {
		return this.getRuleContext(0, RegisterNameContext);
	}
	public UUID16_(): TerminalNode { return this.getToken(JustMCFParser.UUID16_, 0); }
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	constructor(ctx: AttrIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAttrISIModifierGet) {
			listener.enterAttrISIModifierGet(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAttrISIModifierGet) {
			listener.exitAttrISIModifierGet(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAttrISIModifierGet) {
			return visitor.visitAttrISIModifierGet(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EntityStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_entityStatement; }
	public copyFrom(ctx: EntityStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class EntitySDeclarePlayerContext extends EntityStatementContext {
	public ENTITY(): TerminalNode { return this.getToken(JustMCFParser.ENTITY, 0); }
	public PLAYER(): TerminalNode { return this.getToken(JustMCFParser.PLAYER, 0); }
	public playerName(): PlayerNameContext[];
	public playerName(i: number): PlayerNameContext;
	public playerName(i?: number): PlayerNameContext | PlayerNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PlayerNameContext);
		} else {
			return this.getRuleContext(i, PlayerNameContext);
		}
	}
	constructor(ctx: EntityStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntitySDeclarePlayer) {
			listener.enterEntitySDeclarePlayer(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntitySDeclarePlayer) {
			listener.exitEntitySDeclarePlayer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntitySDeclarePlayer) {
			return visitor.visitEntitySDeclarePlayer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntitySDeclareContext extends EntityStatementContext {
	public _type!: NameSpaceEntityContext;
	public ENTITY(): TerminalNode { return this.getToken(JustMCFParser.ENTITY, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public nameSpaceEntity(): NameSpaceEntityContext {
		return this.getRuleContext(0, NameSpaceEntityContext);
	}
	public nbt(): NbtContext | undefined {
		return this.tryGetRuleContext(0, NbtContext);
	}
	public entityDeclareStatementInner(): EntityDeclareStatementInnerContext[];
	public entityDeclareStatementInner(i: number): EntityDeclareStatementInnerContext;
	public entityDeclareStatementInner(i?: number): EntityDeclareStatementInnerContext | EntityDeclareStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EntityDeclareStatementInnerContext);
		} else {
			return this.getRuleContext(i, EntityDeclareStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: EntityStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntitySDeclare) {
			listener.enterEntitySDeclare(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntitySDeclare) {
			listener.exitEntitySDeclare(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntitySDeclare) {
			return visitor.visitEntitySDeclare(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntitySDeclareWithNameContext extends EntityStatementContext {
	public _type!: NameSpaceEntityContext;
	public ENTITY(): TerminalNode { return this.getToken(JustMCFParser.ENTITY, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public nameSpaceEntity(): NameSpaceEntityContext {
		return this.getRuleContext(0, NameSpaceEntityContext);
	}
	public pos3Identifier(): Pos3IdentifierContext | undefined {
		return this.tryGetRuleContext(0, Pos3IdentifierContext);
	}
	public nbt(): NbtContext | undefined {
		return this.tryGetRuleContext(0, NbtContext);
	}
	public entityDeclareStatementInner(): EntityDeclareStatementInnerContext[];
	public entityDeclareStatementInner(i: number): EntityDeclareStatementInnerContext;
	public entityDeclareStatementInner(i?: number): EntityDeclareStatementInnerContext | EntityDeclareStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EntityDeclareStatementInnerContext);
		} else {
			return this.getRuleContext(i, EntityDeclareStatementInnerContext);
		}
	}
	public entityIndependentStatementInner(): EntityIndependentStatementInnerContext[];
	public entityIndependentStatementInner(i: number): EntityIndependentStatementInnerContext;
	public entityIndependentStatementInner(i?: number): EntityIndependentStatementInnerContext | EntityIndependentStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EntityIndependentStatementInnerContext);
		} else {
			return this.getRuleContext(i, EntityIndependentStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: EntityStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntitySDeclareWithName) {
			listener.enterEntitySDeclareWithName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntitySDeclareWithName) {
			listener.exitEntitySDeclareWithName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntitySDeclareWithName) {
			return visitor.visitEntitySDeclareWithName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntitySCompoundContext extends EntityStatementContext {
	public ENTITY(): TerminalNode { return this.getToken(JustMCFParser.ENTITY, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public entityStatementInner(): EntityStatementInnerContext[];
	public entityStatementInner(i: number): EntityStatementInnerContext;
	public entityStatementInner(i?: number): EntityStatementInnerContext | EntityStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EntityStatementInnerContext);
		} else {
			return this.getRuleContext(i, EntityStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: EntityStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntitySCompound) {
			listener.enterEntitySCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntitySCompound) {
			listener.exitEntitySCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntitySCompound) {
			return visitor.visitEntitySCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntitySSelectorCompoundContext extends EntityStatementContext {
	public ENTITY(): TerminalNode { return this.getToken(JustMCFParser.ENTITY, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public entityIndependentStatementInner(): EntityIndependentStatementInnerContext[];
	public entityIndependentStatementInner(i: number): EntityIndependentStatementInnerContext;
	public entityIndependentStatementInner(i?: number): EntityIndependentStatementInnerContext | EntityIndependentStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EntityIndependentStatementInnerContext);
		} else {
			return this.getRuleContext(i, EntityIndependentStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: EntityStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntitySSelectorCompound) {
			listener.enterEntitySSelectorCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntitySSelectorCompound) {
			listener.exitEntitySSelectorCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntitySSelectorCompound) {
			return visitor.visitEntitySSelectorCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PlayerNameContext extends ParserRuleContext {
	public _fake!: Token;
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_playerName; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterPlayerName) {
			listener.enterPlayerName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitPlayerName) {
			listener.exitPlayerName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitPlayerName) {
			return visitor.visitPlayerName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EntityDeclareStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_entityDeclareStatementInner; }
	public copyFrom(ctx: EntityDeclareStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class EntityDeclareSITagContext extends EntityDeclareStatementInnerContext {
	public TAG(): TerminalNode { return this.getToken(JustMCFParser.TAG, 0); }
	public nbtName(): NbtNameContext[];
	public nbtName(i: number): NbtNameContext;
	public nbtName(i?: number): NbtNameContext | NbtNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NbtNameContext);
		} else {
			return this.getRuleContext(i, NbtNameContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	constructor(ctx: EntityDeclareStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityDeclareSITag) {
			listener.enterEntityDeclareSITag(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityDeclareSITag) {
			listener.exitEntityDeclareSITag(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityDeclareSITag) {
			return visitor.visitEntityDeclareSITag(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TagIndependentStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_tagIndependentStatementInner; }
	public copyFrom(ctx: TagIndependentStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class TagISIAddContext extends TagIndependentStatementInnerContext {
	public TAG(): TerminalNode { return this.getToken(JustMCFParser.TAG, 0); }
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	public ADD(): TerminalNode { return this.getToken(JustMCFParser.ADD, 0); }
	constructor(ctx: TagIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTagISIAdd) {
			listener.enterTagISIAdd(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTagISIAdd) {
			listener.exitTagISIAdd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTagISIAdd) {
			return visitor.visitTagISIAdd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TagISIRemoveContext extends TagIndependentStatementInnerContext {
	public TAG(): TerminalNode { return this.getToken(JustMCFParser.TAG, 0); }
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	public REMOVE(): TerminalNode { return this.getToken(JustMCFParser.REMOVE, 0); }
	constructor(ctx: TagIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTagISIRemove) {
			listener.enterTagISIRemove(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTagISIRemove) {
			listener.exitTagISIRemove(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTagISIRemove) {
			return visitor.visitTagISIRemove(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TagISIListContext extends TagIndependentStatementInnerContext {
	public TAG(): TerminalNode { return this.getToken(JustMCFParser.TAG, 0); }
	public LIST(): TerminalNode { return this.getToken(JustMCFParser.LIST, 0); }
	constructor(ctx: TagIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTagISIList) {
			listener.enterTagISIList(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTagISIList) {
			listener.exitTagISIList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTagISIList) {
			return visitor.visitTagISIList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EffectIndependentStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_effectIndependentStatementInner; }
	public copyFrom(ctx: EffectIndependentStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class EffectISIClearContext extends EffectIndependentStatementInnerContext {
	public EFFECT(): TerminalNode { return this.getToken(JustMCFParser.EFFECT, 0); }
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public CLEAR(): TerminalNode { return this.getToken(JustMCFParser.CLEAR, 0); }
	constructor(ctx: EffectIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEffectISIClear) {
			listener.enterEffectISIClear(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEffectISIClear) {
			listener.exitEffectISIClear(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEffectISIClear) {
			return visitor.visitEffectISIClear(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EffectISIGiveContext extends EffectIndependentStatementInnerContext {
	public _second!: Token;
	public _amplifier!: Token;
	public EFFECT(): TerminalNode { return this.getToken(JustMCFParser.EFFECT, 0); }
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public GIVE(): TerminalNode { return this.getToken(JustMCFParser.GIVE, 0); }
	public boolValue(): BoolValueContext | undefined {
		return this.tryGetRuleContext(0, BoolValueContext);
	}
	public NUMBER_INT(): TerminalNode[];
	public NUMBER_INT(i: number): TerminalNode;
	public NUMBER_INT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NUMBER_INT);
		} else {
			return this.getToken(JustMCFParser.NUMBER_INT, i);
		}
	}
	constructor(ctx: EffectIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEffectISIGive) {
			listener.enterEffectISIGive(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEffectISIGive) {
			listener.exitEffectISIGive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEffectISIGive) {
			return visitor.visitEffectISIGive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EffectISIGiveSpContext extends EffectIndependentStatementInnerContext {
	public _amplifier!: Token;
	public _second!: Token;
	public EFFECT(): TerminalNode { return this.getToken(JustMCFParser.EFFECT, 0); }
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public GIVE(): TerminalNode { return this.getToken(JustMCFParser.GIVE, 0); }
	public boolValue(): BoolValueContext | undefined {
		return this.tryGetRuleContext(0, BoolValueContext);
	}
	public NUMBER_INT(): TerminalNode[];
	public NUMBER_INT(i: number): TerminalNode;
	public NUMBER_INT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NUMBER_INT);
		} else {
			return this.getToken(JustMCFParser.NUMBER_INT, i);
		}
	}
	constructor(ctx: EffectIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEffectISIGiveSp) {
			listener.enterEffectISIGiveSp(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEffectISIGiveSp) {
			listener.exitEffectISIGiveSp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEffectISIGiveSp) {
			return visitor.visitEffectISIGiveSp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EffectISIClearAllContext extends EffectIndependentStatementInnerContext {
	public EFFECT(): TerminalNode { return this.getToken(JustMCFParser.EFFECT, 0); }
	public CLEAR(): TerminalNode { return this.getToken(JustMCFParser.CLEAR, 0); }
	constructor(ctx: EffectIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEffectISIClearAll) {
			listener.enterEffectISIClearAll(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEffectISIClearAll) {
			listener.exitEffectISIClearAll(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEffectISIClearAll) {
			return visitor.visitEffectISIClearAll(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TpIndependentStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_tpIndependentStatementInner; }
	public copyFrom(ctx: TpIndependentStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class TpISIDestinationContext extends TpIndependentStatementInnerContext {
	public TP(): TerminalNode { return this.getToken(JustMCFParser.TP, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	constructor(ctx: TpIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTpISIDestination) {
			listener.enterTpISIDestination(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTpISIDestination) {
			listener.exitTpISIDestination(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTpISIDestination) {
			return visitor.visitTpISIDestination(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TpISIPosContext extends TpIndependentStatementInnerContext {
	public TP(): TerminalNode { return this.getToken(JustMCFParser.TP, 0); }
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	constructor(ctx: TpIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTpISIPos) {
			listener.enterTpISIPos(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTpISIPos) {
			listener.exitTpISIPos(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTpISIPos) {
			return visitor.visitTpISIPos(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TpISIRotatedContext extends TpIndependentStatementInnerContext {
	public TP(): TerminalNode { return this.getToken(JustMCFParser.TP, 0); }
	public pos5Identifier(): Pos5IdentifierContext {
		return this.getRuleContext(0, Pos5IdentifierContext);
	}
	constructor(ctx: TpIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTpISIRotated) {
			listener.enterTpISIRotated(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTpISIRotated) {
			listener.exitTpISIRotated(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTpISIRotated) {
			return visitor.visitTpISIRotated(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TpISIRotatedDivContext extends TpIndependentStatementInnerContext {
	public TP(): TerminalNode { return this.getToken(JustMCFParser.TP, 0); }
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public pos2Identifier(): Pos2IdentifierContext {
		return this.getRuleContext(0, Pos2IdentifierContext);
	}
	constructor(ctx: TpIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTpISIRotatedDiv) {
			listener.enterTpISIRotatedDiv(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTpISIRotatedDiv) {
			listener.exitTpISIRotatedDiv(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTpISIRotatedDiv) {
			return visitor.visitTpISIRotatedDiv(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TpISIFacingContext extends TpIndependentStatementInnerContext {
	public TP(): TerminalNode { return this.getToken(JustMCFParser.TP, 0); }
	public pos3Identifier(): Pos3IdentifierContext[];
	public pos3Identifier(i: number): Pos3IdentifierContext;
	public pos3Identifier(i?: number): Pos3IdentifierContext | Pos3IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Pos3IdentifierContext);
		} else {
			return this.getRuleContext(i, Pos3IdentifierContext);
		}
	}
	public FACING(): TerminalNode { return this.getToken(JustMCFParser.FACING, 0); }
	constructor(ctx: TpIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTpISIFacing) {
			listener.enterTpISIFacing(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTpISIFacing) {
			listener.exitTpISIFacing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTpISIFacing) {
			return visitor.visitTpISIFacing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class TpISIFacingEntityContext extends TpIndependentStatementInnerContext {
	public _anchor!: Token;
	public TP(): TerminalNode { return this.getToken(JustMCFParser.TP, 0); }
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public FACING(): TerminalNode { return this.getToken(JustMCFParser.FACING, 0); }
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public ENTITY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ENTITY, 0); }
	public EYES(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.EYES, 0); }
	public FEET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FEET, 0); }
	constructor(ctx: TpIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTpISIFacingEntity) {
			listener.enterTpISIFacingEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTpISIFacingEntity) {
			listener.exitTpISIFacingEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTpISIFacingEntity) {
			return visitor.visitTpISIFacingEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EntityIndependentStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_entityIndependentStatementInner; }
	public copyFrom(ctx: EntityIndependentStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class EntityISIGiveAndClearContext extends EntityIndependentStatementInnerContext {
	public giveAndClearIndependentStatementInner(): GiveAndClearIndependentStatementInnerContext {
		return this.getRuleContext(0, GiveAndClearIndependentStatementInnerContext);
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISIGiveAndClear) {
			listener.enterEntityISIGiveAndClear(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISIGiveAndClear) {
			listener.exitEntityISIGiveAndClear(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISIGiveAndClear) {
			return visitor.visitEntityISIGiveAndClear(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISIKillContext extends EntityIndependentStatementInnerContext {
	public KILL(): TerminalNode { return this.getToken(JustMCFParser.KILL, 0); }
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISIKill) {
			listener.enterEntityISIKill(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISIKill) {
			listener.exitEntityISIKill(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISIKill) {
			return visitor.visitEntityISIKill(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISITagContext extends EntityIndependentStatementInnerContext {
	public tagIndependentStatementInner(): TagIndependentStatementInnerContext {
		return this.getRuleContext(0, TagIndependentStatementInnerContext);
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISITag) {
			listener.enterEntityISITag(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISITag) {
			listener.exitEntityISITag(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISITag) {
			return visitor.visitEntityISITag(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISIEffectContext extends EntityIndependentStatementInnerContext {
	public effectIndependentStatementInner(): EffectIndependentStatementInnerContext {
		return this.getRuleContext(0, EffectIndependentStatementInnerContext);
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISIEffect) {
			listener.enterEntityISIEffect(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISIEffect) {
			listener.exitEntityISIEffect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISIEffect) {
			return visitor.visitEntityISIEffect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISITpContext extends EntityIndependentStatementInnerContext {
	public tpIndependentStatementInner(): TpIndependentStatementInnerContext {
		return this.getRuleContext(0, TpIndependentStatementInnerContext);
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISITp) {
			listener.enterEntityISITp(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISITp) {
			listener.exitEntityISITp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISITp) {
			return visitor.visitEntityISITp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISITitleCompoundContext extends EntityIndependentStatementInnerContext {
	public TITLE(): TerminalNode { return this.getToken(JustMCFParser.TITLE, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public titleSelectorStatementInner(): TitleSelectorStatementInnerContext[];
	public titleSelectorStatementInner(i: number): TitleSelectorStatementInnerContext;
	public titleSelectorStatementInner(i?: number): TitleSelectorStatementInnerContext | TitleSelectorStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TitleSelectorStatementInnerContext);
		} else {
			return this.getRuleContext(i, TitleSelectorStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISITitleCompound) {
			listener.enterEntityISITitleCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISITitleCompound) {
			listener.exitEntityISITitleCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISITitleCompound) {
			return visitor.visitEntityISITitleCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISIDisplayCompoundContext extends EntityIndependentStatementInnerContext {
	public DISPLAY(): TerminalNode { return this.getToken(JustMCFParser.DISPLAY, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public displayIndependentStatementInner(): DisplayIndependentStatementInnerContext[];
	public displayIndependentStatementInner(i: number): DisplayIndependentStatementInnerContext;
	public displayIndependentStatementInner(i?: number): DisplayIndependentStatementInnerContext | DisplayIndependentStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DisplayIndependentStatementInnerContext);
		} else {
			return this.getRuleContext(i, DisplayIndependentStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISIDisplayCompound) {
			listener.enterEntityISIDisplayCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISIDisplayCompound) {
			listener.exitEntityISIDisplayCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISIDisplayCompound) {
			return visitor.visitEntityISIDisplayCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISIDisplaySingleContext extends EntityIndependentStatementInnerContext {
	public displayIndependentStatementInner(): DisplayIndependentStatementInnerContext {
		return this.getRuleContext(0, DisplayIndependentStatementInnerContext);
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISIDisplaySingle) {
			listener.enterEntityISIDisplaySingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISIDisplaySingle) {
			listener.exitEntityISIDisplaySingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISIDisplaySingle) {
			return visitor.visitEntityISIDisplaySingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISIItemSingleContext extends EntityIndependentStatementInnerContext {
	public ITEM(): TerminalNode { return this.getToken(JustMCFParser.ITEM, 0); }
	public itemIndependentStatementInner(): ItemIndependentStatementInnerContext {
		return this.getRuleContext(0, ItemIndependentStatementInnerContext);
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISIItemSingle) {
			listener.enterEntityISIItemSingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISIItemSingle) {
			listener.exitEntityISIItemSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISIItemSingle) {
			return visitor.visitEntityISIItemSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISILootGiveSingleContext extends EntityIndependentStatementInnerContext {
	public lootIndependentStatementInnerGive(): LootIndependentStatementInnerGiveContext {
		return this.getRuleContext(0, LootIndependentStatementInnerGiveContext);
	}
	public LOOT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.LOOT, 0); }
	public ITEM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ITEM, 0); }
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISILootGiveSingle) {
			listener.enterEntityISILootGiveSingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISILootGiveSingle) {
			listener.exitEntityISILootGiveSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISILootGiveSingle) {
			return visitor.visitEntityISILootGiveSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISILootSingleContext extends EntityIndependentStatementInnerContext {
	public lootIndependentStatementInnerReplaceEntity(): LootIndependentStatementInnerReplaceEntityContext {
		return this.getRuleContext(0, LootIndependentStatementInnerReplaceEntityContext);
	}
	public LOOT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.LOOT, 0); }
	public ITEM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ITEM, 0); }
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISILootSingle) {
			listener.enterEntityISILootSingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISILootSingle) {
			listener.exitEntityISILootSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISILootSingle) {
			return visitor.visitEntityISILootSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISIItemCompoundContext extends EntityIndependentStatementInnerContext {
	public ITEM(): TerminalNode { return this.getToken(JustMCFParser.ITEM, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public itemSelectorStatementInner(): ItemSelectorStatementInnerContext[];
	public itemSelectorStatementInner(i: number): ItemSelectorStatementInnerContext;
	public itemSelectorStatementInner(i?: number): ItemSelectorStatementInnerContext | ItemSelectorStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ItemSelectorStatementInnerContext);
		} else {
			return this.getRuleContext(i, ItemSelectorStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISIItemCompound) {
			listener.enterEntityISIItemCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISIItemCompound) {
			listener.exitEntityISIItemCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISIItemCompound) {
			return visitor.visitEntityISIItemCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISILootCompoundContext extends EntityIndependentStatementInnerContext {
	public LOOT(): TerminalNode { return this.getToken(JustMCFParser.LOOT, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public lootSelectorStatementInner(): LootSelectorStatementInnerContext[];
	public lootSelectorStatementInner(i: number): LootSelectorStatementInnerContext;
	public lootSelectorStatementInner(i?: number): LootSelectorStatementInnerContext | LootSelectorStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LootSelectorStatementInnerContext);
		} else {
			return this.getRuleContext(i, LootSelectorStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISILootCompound) {
			listener.enterEntityISILootCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISILootCompound) {
			listener.exitEntityISILootCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISILootCompound) {
			return visitor.visitEntityISILootCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISIAttrSingleContext extends EntityIndependentStatementInnerContext {
	public ATTR(): TerminalNode { return this.getToken(JustMCFParser.ATTR, 0); }
	public attrIndependentStatementInner(): AttrIndependentStatementInnerContext {
		return this.getRuleContext(0, AttrIndependentStatementInnerContext);
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISIAttrSingle) {
			listener.enterEntityISIAttrSingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISIAttrSingle) {
			listener.exitEntityISIAttrSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISIAttrSingle) {
			return visitor.visitEntityISIAttrSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISIAttrCompoundContext extends EntityIndependentStatementInnerContext {
	public ATTR(): TerminalNode { return this.getToken(JustMCFParser.ATTR, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public attrIndependentStatementInner(): AttrIndependentStatementInnerContext[];
	public attrIndependentStatementInner(i: number): AttrIndependentStatementInnerContext;
	public attrIndependentStatementInner(i?: number): AttrIndependentStatementInnerContext | AttrIndependentStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AttrIndependentStatementInnerContext);
		} else {
			return this.getRuleContext(i, AttrIndependentStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISIAttrCompound) {
			listener.enterEntityISIAttrCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISIAttrCompound) {
			listener.exitEntityISIAttrCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISIAttrCompound) {
			return visitor.visitEntityISIAttrCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntityISIExecContext extends EntityIndependentStatementInnerContext {
	public execStatement(): ExecStatementContext {
		return this.getRuleContext(0, ExecStatementContext);
	}
	constructor(ctx: EntityIndependentStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityISIExec) {
			listener.enterEntityISIExec(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityISIExec) {
			listener.exitEntityISIExec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityISIExec) {
			return visitor.visitEntityISIExec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EntityStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_entityStatementInner; }
	public copyFrom(ctx: EntityStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class EntitySIEntityExpressionContext extends EntityStatementInnerContext {
	public entityExpression(): EntityExpressionContext {
		return this.getRuleContext(0, EntityExpressionContext);
	}
	constructor(ctx: EntityStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntitySIEntityExpression) {
			listener.enterEntitySIEntityExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntitySIEntityExpression) {
			listener.exitEntitySIEntityExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntitySIEntityExpression) {
			return visitor.visitEntitySIEntityExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class EntitySISelectorCompoundContext extends EntityStatementInnerContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public entityIndependentStatementInner(): EntityIndependentStatementInnerContext[];
	public entityIndependentStatementInner(i: number): EntityIndependentStatementInnerContext;
	public entityIndependentStatementInner(i?: number): EntityIndependentStatementInnerContext | EntityIndependentStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EntityIndependentStatementInnerContext);
		} else {
			return this.getRuleContext(i, EntityIndependentStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(ctx: EntityStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntitySISelectorCompound) {
			listener.enterEntitySISelectorCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntitySISelectorCompound) {
			listener.exitEntitySISelectorCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntitySISelectorCompound) {
			return visitor.visitEntitySISelectorCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EntityExpressionContext extends ParserRuleContext {
	public selector(): SelectorContext {
		return this.getRuleContext(0, SelectorContext);
	}
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public entityIndependentStatementInner(): EntityIndependentStatementInnerContext {
		return this.getRuleContext(0, EntityIndependentStatementInnerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_entityExpression; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEntityExpression) {
			listener.enterEntityExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEntityExpression) {
			listener.exitEntityExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEntityExpression) {
			return visitor.visitEntityExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockStatementContext extends ParserRuleContext {
	public BLOCK(): TerminalNode { return this.getToken(JustMCFParser.BLOCK, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public blockStatementInner(): BlockStatementInnerContext[];
	public blockStatementInner(i: number): BlockStatementInnerContext;
	public blockStatementInner(i?: number): BlockStatementInnerContext | BlockStatementInnerContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BlockStatementInnerContext);
		} else {
			return this.getRuleContext(i, BlockStatementInnerContext);
		}
	}
	public ends(): EndsContext[];
	public ends(i: number): EndsContext;
	public ends(i?: number): EndsContext | EndsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(EndsContext);
		} else {
			return this.getRuleContext(i, EndsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_blockStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlockStatement) {
			listener.enterBlockStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlockStatement) {
			listener.exitBlockStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlockStatement) {
			return visitor.visitBlockStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockStatementInnerContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_blockStatementInner; }
	public copyFrom(ctx: BlockStatementInnerContext): void {
		super.copyFrom(ctx);
	}
}
export class BlockSISetblockContext extends BlockStatementInnerContext {
	public _mod!: Token;
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	public blockIdentifier(): BlockIdentifierContext {
		return this.getRuleContext(0, BlockIdentifierContext);
	}
	public DESTROY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DESTROY, 0); }
	public KEEP(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.KEEP, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.REPLACE, 0); }
	constructor(ctx: BlockStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlockSISetblock) {
			listener.enterBlockSISetblock(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlockSISetblock) {
			listener.exitBlockSISetblock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlockSISetblock) {
			return visitor.visitBlockSISetblock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BlockSIFillContext extends BlockStatementInnerContext {
	public _mod!: Token;
	public pos3Identifier(): Pos3IdentifierContext[];
	public pos3Identifier(i: number): Pos3IdentifierContext;
	public pos3Identifier(i?: number): Pos3IdentifierContext | Pos3IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Pos3IdentifierContext);
		} else {
			return this.getRuleContext(i, Pos3IdentifierContext);
		}
	}
	public blockIdentifier(): BlockIdentifierContext {
		return this.getRuleContext(0, BlockIdentifierContext);
	}
	public DESTROY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DESTROY, 0); }
	public HOLLOW(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.HOLLOW, 0); }
	public KEEP(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.KEEP, 0); }
	public OUTLINE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.OUTLINE, 0); }
	constructor(ctx: BlockStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlockSIFill) {
			listener.enterBlockSIFill(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlockSIFill) {
			listener.exitBlockSIFill(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlockSIFill) {
			return visitor.visitBlockSIFill(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BlockSIFillReplaceContext extends BlockStatementInnerContext {
	public pos3Identifier(): Pos3IdentifierContext[];
	public pos3Identifier(i: number): Pos3IdentifierContext;
	public pos3Identifier(i?: number): Pos3IdentifierContext | Pos3IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Pos3IdentifierContext);
		} else {
			return this.getRuleContext(i, Pos3IdentifierContext);
		}
	}
	public blockIdentifier(): BlockIdentifierContext {
		return this.getRuleContext(0, BlockIdentifierContext);
	}
	public REPLACE(): TerminalNode { return this.getToken(JustMCFParser.REPLACE, 0); }
	public block_predicate(): Block_predicateContext {
		return this.getRuleContext(0, Block_predicateContext);
	}
	constructor(ctx: BlockStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlockSIFillReplace) {
			listener.enterBlockSIFillReplace(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlockSIFillReplace) {
			listener.exitBlockSIFillReplace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlockSIFillReplace) {
			return visitor.visitBlockSIFillReplace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BlockSICloneContext extends BlockStatementInnerContext {
	public _masked_mod!: Token;
	public _mod!: Token;
	public pos3Identifier(): Pos3IdentifierContext[];
	public pos3Identifier(i: number): Pos3IdentifierContext;
	public pos3Identifier(i?: number): Pos3IdentifierContext | Pos3IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Pos3IdentifierContext);
		} else {
			return this.getRuleContext(i, Pos3IdentifierContext);
		}
	}
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.REPLACE, 0); }
	public MASKED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MASKED, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FORCE, 0); }
	public MOVE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MOVE, 0); }
	public NORMAL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NORMAL, 0); }
	constructor(ctx: BlockStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlockSIClone) {
			listener.enterBlockSIClone(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlockSIClone) {
			listener.exitBlockSIClone(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlockSIClone) {
			return visitor.visitBlockSIClone(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class BlockSICloneFilteredContext extends BlockStatementInnerContext {
	public _mod!: Token;
	public pos3Identifier(): Pos3IdentifierContext[];
	public pos3Identifier(i: number): Pos3IdentifierContext;
	public pos3Identifier(i?: number): Pos3IdentifierContext | Pos3IdentifierContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Pos3IdentifierContext);
		} else {
			return this.getRuleContext(i, Pos3IdentifierContext);
		}
	}
	public FILTERED(): TerminalNode { return this.getToken(JustMCFParser.FILTERED, 0); }
	public block_predicate(): Block_predicateContext {
		return this.getRuleContext(0, Block_predicateContext);
	}
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FORCE, 0); }
	public MOVE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MOVE, 0); }
	public NORMAL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NORMAL, 0); }
	constructor(ctx: BlockStatementInnerContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlockSICloneFiltered) {
			listener.enterBlockSICloneFiltered(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlockSICloneFiltered) {
			listener.exitBlockSICloneFiltered(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlockSICloneFiltered) {
			return visitor.visitBlockSICloneFiltered(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InterfaceStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_interfaceStatement; }
	public copyFrom(ctx: InterfaceStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class InterfaceSNamespaceContext extends InterfaceStatementContext {
	public INTERFACE(): TerminalNode { return this.getToken(JustMCFParser.INTERFACE, 0); }
	public nameSpaceStorage(): NameSpaceStorageContext {
		return this.getRuleContext(0, NameSpaceStorageContext);
	}
	public nbt(): NbtContext {
		return this.getRuleContext(0, NbtContext);
	}
	constructor(ctx: InterfaceStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterInterfaceSNamespace) {
			listener.enterInterfaceSNamespace(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitInterfaceSNamespace) {
			listener.exitInterfaceSNamespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitInterfaceSNamespace) {
			return visitor.visitInterfaceSNamespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class InterfaceSIdentifierContext extends InterfaceStatementContext {
	public INTERFACE(): TerminalNode { return this.getToken(JustMCFParser.INTERFACE, 0); }
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public nbt(): NbtContext {
		return this.getRuleContext(0, NbtContext);
	}
	constructor(ctx: InterfaceStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterInterfaceSIdentifier) {
			listener.enterInterfaceSIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitInterfaceSIdentifier) {
			listener.exitInterfaceSIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitInterfaceSIdentifier) {
			return visitor.visitInterfaceSIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DataAssignExistExpressionContext extends ParserRuleContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	public existExpression(): ExistExpressionContext {
		return this.getRuleContext(0, ExistExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_dataAssignExistExpression; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterDataAssignExistExpression) {
			listener.enterDataAssignExistExpression(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitDataAssignExistExpression) {
			listener.exitDataAssignExistExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitDataAssignExistExpression) {
			return visitor.visitDataAssignExistExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExistExpressionContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_existExpression; }
	public copyFrom(ctx: ExistExpressionContext): void {
		super.copyFrom(ctx);
	}
}
export class ExistExpressionExecContext extends ExistExpressionContext {
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public execChild(): ExecChildContext[];
	public execChild(i: number): ExecChildContext;
	public execChild(i?: number): ExecChildContext | ExecChildContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExecChildContext);
		} else {
			return this.getRuleContext(i, ExecChildContext);
		}
	}
	public pn_(): Pn_Context[];
	public pn_(i: number): Pn_Context;
	public pn_(i?: number): Pn_Context | Pn_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Pn_Context);
		} else {
			return this.getRuleContext(i, Pn_Context);
		}
	}
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExistExpressionExec) {
			listener.enterExistExpressionExec(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExistExpressionExec) {
			listener.exitExistExpressionExec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExistExpressionExec) {
			return visitor.visitExistExpressionExec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistExpressionIdContext extends ExistExpressionContext {
	public dataIdentifier(): DataIdentifierContext {
		return this.getRuleContext(0, DataIdentifierContext);
	}
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExistExpressionId) {
			listener.enterExistExpressionId(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExistExpressionId) {
			listener.exitExistExpressionId(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExistExpressionId) {
			return visitor.visitExistExpressionId(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExisitExpressionFuncRunContext extends ExistExpressionContext {
	public funcImproveRunExpression(): FuncImproveRunExpressionContext {
		return this.getRuleContext(0, FuncImproveRunExpressionContext);
	}
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExisitExpressionFuncRun) {
			listener.enterExisitExpressionFuncRun(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExisitExpressionFuncRun) {
			listener.exitExisitExpressionFuncRun(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExisitExpressionFuncRun) {
			return visitor.visitExisitExpressionFuncRun(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistExpressionTrueContext extends ExistExpressionContext {
	public TRUE(): TerminalNode { return this.getToken(JustMCFParser.TRUE, 0); }
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExistExpressionTrue) {
			listener.enterExistExpressionTrue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExistExpressionTrue) {
			listener.exitExistExpressionTrue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExistExpressionTrue) {
			return visitor.visitExistExpressionTrue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistExpressionFalseContext extends ExistExpressionContext {
	public FALSE(): TerminalNode { return this.getToken(JustMCFParser.FALSE, 0); }
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExistExpressionFalse) {
			listener.enterExistExpressionFalse(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExistExpressionFalse) {
			listener.exitExistExpressionFalse(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExistExpressionFalse) {
			return visitor.visitExistExpressionFalse(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistExpressionNotContext extends ExistExpressionContext {
	public existExpression(): ExistExpressionContext {
		return this.getRuleContext(0, ExistExpressionContext);
	}
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExistExpressionNot) {
			listener.enterExistExpressionNot(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExistExpressionNot) {
			listener.exitExistExpressionNot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExistExpressionNot) {
			return visitor.visitExistExpressionNot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistExpressionBitAndContext extends ExistExpressionContext {
	public _op!: Token;
	public existExpression(): ExistExpressionContext[];
	public existExpression(i: number): ExistExpressionContext;
	public existExpression(i?: number): ExistExpressionContext | ExistExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExistExpressionContext);
		} else {
			return this.getRuleContext(i, ExistExpressionContext);
		}
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExistExpressionBitAnd) {
			listener.enterExistExpressionBitAnd(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExistExpressionBitAnd) {
			listener.exitExistExpressionBitAnd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExistExpressionBitAnd) {
			return visitor.visitExistExpressionBitAnd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistExpressionBitOrContext extends ExistExpressionContext {
	public _op!: Token;
	public existExpression(): ExistExpressionContext[];
	public existExpression(i: number): ExistExpressionContext;
	public existExpression(i?: number): ExistExpressionContext | ExistExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExistExpressionContext);
		} else {
			return this.getRuleContext(i, ExistExpressionContext);
		}
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExistExpressionBitOr) {
			listener.enterExistExpressionBitOr(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExistExpressionBitOr) {
			listener.exitExistExpressionBitOr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExistExpressionBitOr) {
			return visitor.visitExistExpressionBitOr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistExpressionAndContext extends ExistExpressionContext {
	public _op!: Token;
	public existExpression(): ExistExpressionContext[];
	public existExpression(i: number): ExistExpressionContext;
	public existExpression(i?: number): ExistExpressionContext | ExistExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExistExpressionContext);
		} else {
			return this.getRuleContext(i, ExistExpressionContext);
		}
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExistExpressionAnd) {
			listener.enterExistExpressionAnd(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExistExpressionAnd) {
			listener.exitExistExpressionAnd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExistExpressionAnd) {
			return visitor.visitExistExpressionAnd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistExpressionOrContext extends ExistExpressionContext {
	public _op!: Token;
	public existExpression(): ExistExpressionContext[];
	public existExpression(i: number): ExistExpressionContext;
	public existExpression(i?: number): ExistExpressionContext | ExistExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExistExpressionContext);
		} else {
			return this.getRuleContext(i, ExistExpressionContext);
		}
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExistExpressionOr) {
			listener.enterExistExpressionOr(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExistExpressionOr) {
			listener.exitExistExpressionOr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExistExpressionOr) {
			return visitor.visitExistExpressionOr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExistExpressionParenContext extends ExistExpressionContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public existExpression(): ExistExpressionContext {
		return this.getRuleContext(0, ExistExpressionContext);
	}
	constructor(ctx: ExistExpressionContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterExistExpressionParen) {
			listener.enterExistExpressionParen(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitExistExpressionParen) {
			listener.exitExistExpressionParen(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitExistExpressionParen) {
			return visitor.visitExistExpressionParen(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfStatementContext extends ParserRuleContext {
	public IF(): TerminalNode { return this.getToken(JustMCFParser.IF, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public existExpression(): ExistExpressionContext {
		return this.getRuleContext(0, ExistExpressionContext);
	}
	public execRunChild(): ExecRunChildContext {
		return this.getRuleContext(0, ExecRunChildContext);
	}
	public ifElseStatement(): IfElseStatementContext | undefined {
		return this.tryGetRuleContext(0, IfElseStatementContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_ifStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterIfStatement) {
			listener.enterIfStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitIfStatement) {
			listener.exitIfStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitIfStatement) {
			return visitor.visitIfStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IfElseStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_ifElseStatement; }
	public copyFrom(ctx: IfElseStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class IfElseExecContext extends IfElseStatementContext {
	public ELSE(): TerminalNode { return this.getToken(JustMCFParser.ELSE, 0); }
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public execRunChild(): ExecRunChildContext {
		return this.getRuleContext(0, ExecRunChildContext);
	}
	constructor(ctx: IfElseStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterIfElseExec) {
			listener.enterIfElseExec(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitIfElseExec) {
			listener.exitIfElseExec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitIfElseExec) {
			return visitor.visitIfElseExec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IfElseSIfSContext extends IfElseStatementContext {
	public ELSE(): TerminalNode { return this.getToken(JustMCFParser.ELSE, 0); }
	public s_(): S_Context {
		return this.getRuleContext(0, S_Context);
	}
	public ifStatement(): IfStatementContext {
		return this.getRuleContext(0, IfStatementContext);
	}
	constructor(ctx: IfElseStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterIfElseSIfS) {
			listener.enterIfElseSIfS(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitIfElseSIfS) {
			listener.exitIfElseSIfS(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitIfElseSIfS) {
			return visitor.visitIfElseSIfS(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhileStatementContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_whileStatement; }
	public copyFrom(ctx: WhileStatementContext): void {
		super.copyFrom(ctx);
	}
}
export class WhileStatementExecContext extends WhileStatementContext {
	public WHILE(): TerminalNode { return this.getToken(JustMCFParser.WHILE, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public execRunChild(): ExecRunChildContext {
		return this.getRuleContext(0, ExecRunChildContext);
	}
	public execChild(): ExecChildContext[];
	public execChild(i: number): ExecChildContext;
	public execChild(i?: number): ExecChildContext | ExecChildContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExecChildContext);
		} else {
			return this.getRuleContext(i, ExecChildContext);
		}
	}
	public pn_(): Pn_Context[];
	public pn_(i: number): Pn_Context;
	public pn_(i?: number): Pn_Context | Pn_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Pn_Context);
		} else {
			return this.getRuleContext(i, Pn_Context);
		}
	}
	constructor(ctx: WhileStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterWhileStatementExec) {
			listener.enterWhileStatementExec(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitWhileStatementExec) {
			listener.exitWhileStatementExec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitWhileStatementExec) {
			return visitor.visitWhileStatementExec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class WhileStatementExistContext extends WhileStatementContext {
	public WHILE(): TerminalNode { return this.getToken(JustMCFParser.WHILE, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public existExpression(): ExistExpressionContext {
		return this.getRuleContext(0, ExistExpressionContext);
	}
	public execRunChild(): ExecRunChildContext {
		return this.getRuleContext(0, ExecRunChildContext);
	}
	constructor(ctx: WhileStatementContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterWhileStatementExist) {
			listener.enterWhileStatementExist(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitWhileStatementExist) {
			listener.exitWhileStatementExist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitWhileStatementExist) {
			return visitor.visitWhileStatementExist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ForStatementContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(JustMCFParser.FOR, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public dataOperationExpression(): DataOperationExpressionContext {
		return this.getRuleContext(0, DataOperationExpressionContext);
	}
	public execRunChild(): ExecRunChildContext {
		return this.getRuleContext(0, ExecRunChildContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_forStatement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterForStatement) {
			listener.enterForStatement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitForStatement) {
			listener.exitForStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitForStatement) {
			return visitor.visitForStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtContext extends ParserRuleContext {
	public snbtValue(): SnbtValueContext {
		return this.getRuleContext(0, SnbtValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbt; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbt) {
			listener.enterNbt(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbt) {
			listener.exitNbt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbt) {
			return visitor.visitNbt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonContext extends ParserRuleContext {
	public jsonTextValue(): JsonTextValueContext {
		return this.getRuleContext(0, JsonTextValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_json; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterJson) {
			listener.enterJson(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitJson) {
			listener.exitJson(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitJson) {
			return visitor.visitJson(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtPathWithoutCompoundContext extends ParserRuleContext {
	public nbtName(): NbtNameContext | undefined {
		return this.tryGetRuleContext(0, NbtNameContext);
	}
	public nbtCompound(): NbtCompoundContext | undefined {
		return this.tryGetRuleContext(0, NbtCompoundContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public NUMBER_INT(): TerminalNode[];
	public NUMBER_INT(i: number): TerminalNode;
	public NUMBER_INT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NUMBER_INT);
		} else {
			return this.getToken(JustMCFParser.NUMBER_INT, i);
		}
	}
	public nbtPath(): NbtPathContext[];
	public nbtPath(i: number): NbtPathContext;
	public nbtPath(i?: number): NbtPathContext | NbtPathContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NbtPathContext);
		} else {
			return this.getRuleContext(i, NbtPathContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtPathWithoutCompound; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtPathWithoutCompound) {
			listener.enterNbtPathWithoutCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtPathWithoutCompound) {
			listener.exitNbtPathWithoutCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtPathWithoutCompound) {
			return visitor.visitNbtPathWithoutCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtPathContext extends ParserRuleContext {
	public nbtName(): NbtNameContext | undefined {
		return this.tryGetRuleContext(0, NbtNameContext);
	}
	public nbtCompound(): NbtCompoundContext | undefined {
		return this.tryGetRuleContext(0, NbtCompoundContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public NUMBER_INT(): TerminalNode[];
	public NUMBER_INT(i: number): TerminalNode;
	public NUMBER_INT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NUMBER_INT);
		} else {
			return this.getToken(JustMCFParser.NUMBER_INT, i);
		}
	}
	public nbtPath(): NbtPathContext[];
	public nbtPath(i: number): NbtPathContext;
	public nbtPath(i?: number): NbtPathContext | NbtPathContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NbtPathContext);
		} else {
			return this.getRuleContext(i, NbtPathContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtPath; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtPath) {
			listener.enterNbtPath(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtPath) {
			listener.exitNbtPath(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtPath) {
			return visitor.visitNbtPath(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SnbtValueContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public nbtPair(): NbtPairContext[];
	public nbtPair(i: number): NbtPairContext;
	public nbtPair(i?: number): NbtPairContext | NbtPairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NbtPairContext);
		} else {
			return this.getRuleContext(i, NbtPairContext);
		}
	}
	public nbtValue(): NbtValueContext[];
	public nbtValue(i: number): NbtValueContext;
	public nbtValue(i?: number): NbtValueContext | NbtValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NbtValueContext);
		} else {
			return this.getRuleContext(i, NbtValueContext);
		}
	}
	public ByteNumber(): TerminalNode[];
	public ByteNumber(i: number): TerminalNode;
	public ByteNumber(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.ByteNumber);
		} else {
			return this.getToken(JustMCFParser.ByteNumber, i);
		}
	}
	public NUMBER_INT(): TerminalNode[];
	public NUMBER_INT(i: number): TerminalNode;
	public NUMBER_INT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NUMBER_INT);
		} else {
			return this.getToken(JustMCFParser.NUMBER_INT, i);
		}
	}
	public LongNumber(): TerminalNode[];
	public LongNumber(i: number): TerminalNode;
	public LongNumber(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.LongNumber);
		} else {
			return this.getToken(JustMCFParser.LongNumber, i);
		}
	}
	public nbtString(): NbtStringContext | undefined {
		return this.tryGetRuleContext(0, NbtStringContext);
	}
	public ShortNumber(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ShortNumber, 0); }
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	public FloatNumber(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FloatNumber, 0); }
	public DoubleNumber(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DoubleNumber, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_snbtValue; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSnbtValue) {
			listener.enterSnbtValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSnbtValue) {
			listener.exitSnbtValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSnbtValue) {
			return visitor.visitSnbtValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SnbtContext extends ParserRuleContext {
	public nbtValue(): NbtValueContext {
		return this.getRuleContext(0, NbtValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_snbt; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSnbt) {
			listener.enterSnbt(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSnbt) {
			listener.exitSnbt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSnbt) {
			return visitor.visitSnbt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtCompoundContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public nbtPair(): NbtPairContext[];
	public nbtPair(i: number): NbtPairContext;
	public nbtPair(i?: number): NbtPairContext | NbtPairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NbtPairContext);
		} else {
			return this.getRuleContext(i, NbtPairContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtCompound; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtCompound) {
			listener.enterNbtCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtCompound) {
			listener.exitNbtCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtCompound) {
			return visitor.visitNbtCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtPairContext extends ParserRuleContext {
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public nbtValue(): NbtValueContext {
		return this.getRuleContext(0, NbtValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtPair; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtPair) {
			listener.enterNbtPair(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtPair) {
			listener.exitNbtPair(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtPair) {
			return visitor.visitNbtPair(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtListContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public nbtValue(): NbtValueContext[];
	public nbtValue(i: number): NbtValueContext;
	public nbtValue(i?: number): NbtValueContext | NbtValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NbtValueContext);
		} else {
			return this.getRuleContext(i, NbtValueContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtList; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtList) {
			listener.enterNbtList(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtList) {
			listener.exitNbtList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtList) {
			return visitor.visitNbtList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtValueContext extends ParserRuleContext {
	public nbtCompound(): NbtCompoundContext | undefined {
		return this.tryGetRuleContext(0, NbtCompoundContext);
	}
	public nbtList(): NbtListContext | undefined {
		return this.tryGetRuleContext(0, NbtListContext);
	}
	public nbtByteArr(): NbtByteArrContext | undefined {
		return this.tryGetRuleContext(0, NbtByteArrContext);
	}
	public nbtIntArr(): NbtIntArrContext | undefined {
		return this.tryGetRuleContext(0, NbtIntArrContext);
	}
	public nbtLongArr(): NbtLongArrContext | undefined {
		return this.tryGetRuleContext(0, NbtLongArrContext);
	}
	public nbtString(): NbtStringContext | undefined {
		return this.tryGetRuleContext(0, NbtStringContext);
	}
	public ByteNumber(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ByteNumber, 0); }
	public ShortNumber(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ShortNumber, 0); }
	public LongNumber(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.LongNumber, 0); }
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	public FloatNumber(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FloatNumber, 0); }
	public DoubleNumber(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DoubleNumber, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtValue; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtValue) {
			listener.enterNbtValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtValue) {
			listener.exitNbtValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtValue) {
			return visitor.visitNbtValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtByteArrContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public ByteNumber(): TerminalNode[];
	public ByteNumber(i: number): TerminalNode;
	public ByteNumber(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.ByteNumber);
		} else {
			return this.getToken(JustMCFParser.ByteNumber, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtByteArr; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtByteArr) {
			listener.enterNbtByteArr(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtByteArr) {
			listener.exitNbtByteArr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtByteArr) {
			return visitor.visitNbtByteArr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtIntArrContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public NUMBER_INT(): TerminalNode[];
	public NUMBER_INT(i: number): TerminalNode;
	public NUMBER_INT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NUMBER_INT);
		} else {
			return this.getToken(JustMCFParser.NUMBER_INT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtIntArr; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtIntArr) {
			listener.enterNbtIntArr(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtIntArr) {
			listener.exitNbtIntArr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtIntArr) {
			return visitor.visitNbtIntArr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtLongArrContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public LongNumber(): TerminalNode[];
	public LongNumber(i: number): TerminalNode;
	public LongNumber(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.LongNumber);
		} else {
			return this.getToken(JustMCFParser.LongNumber, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtLongArr; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtLongArr) {
			listener.enterNbtLongArr(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtLongArr) {
			listener.exitNbtLongArr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtLongArr) {
			return visitor.visitNbtLongArr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtStringContext extends ParserRuleContext {
	public STRING(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STRING, 0); }
	public STRING2(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STRING2, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtString; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtString) {
			listener.enterNbtString(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtString) {
			listener.exitNbtString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtString) {
			return visitor.visitNbtString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonTextValueContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public jsonPair(): JsonPairContext[];
	public jsonPair(i: number): JsonPairContext;
	public jsonPair(i?: number): JsonPairContext | JsonPairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonPairContext);
		} else {
			return this.getRuleContext(i, JsonPairContext);
		}
	}
	public jsonValue(): JsonValueContext[];
	public jsonValue(i: number): JsonValueContext;
	public jsonValue(i?: number): JsonValueContext | JsonValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonValueContext);
		} else {
			return this.getRuleContext(i, JsonValueContext);
		}
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STRING, 0); }
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FALSE, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_jsonTextValue; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterJsonTextValue) {
			listener.enterJsonTextValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitJsonTextValue) {
			listener.exitJsonTextValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitJsonTextValue) {
			return visitor.visitJsonTextValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonTextContext extends ParserRuleContext {
	public jsonValue(): JsonValueContext {
		return this.getRuleContext(0, JsonValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_jsonText; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterJsonText) {
			listener.enterJsonText(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitJsonText) {
			listener.exitJsonText(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitJsonText) {
			return visitor.visitJsonText(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonObjContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public jsonPair(): JsonPairContext[];
	public jsonPair(i: number): JsonPairContext;
	public jsonPair(i?: number): JsonPairContext | JsonPairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonPairContext);
		} else {
			return this.getRuleContext(i, JsonPairContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_jsonObj; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterJsonObj) {
			listener.enterJsonObj(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitJsonObj) {
			listener.exitJsonObj(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitJsonObj) {
			return visitor.visitJsonObj(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonPairContext extends ParserRuleContext {
	public STRING(): TerminalNode { return this.getToken(JustMCFParser.STRING, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public jsonValue(): JsonValueContext {
		return this.getRuleContext(0, JsonValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_jsonPair; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterJsonPair) {
			listener.enterJsonPair(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitJsonPair) {
			listener.exitJsonPair(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitJsonPair) {
			return visitor.visitJsonPair(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonArrContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public jsonValue(): JsonValueContext[];
	public jsonValue(i: number): JsonValueContext;
	public jsonValue(i?: number): JsonValueContext | JsonValueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(JsonValueContext);
		} else {
			return this.getRuleContext(i, JsonValueContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_jsonArr; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterJsonArr) {
			listener.enterJsonArr(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitJsonArr) {
			listener.exitJsonArr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitJsonArr) {
			return visitor.visitJsonArr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class JsonValueContext extends ParserRuleContext {
	public STRING(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STRING, 0); }
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	public jsonObj(): JsonObjContext | undefined {
		return this.tryGetRuleContext(0, JsonObjContext);
	}
	public jsonArr(): JsonArrContext | undefined {
		return this.tryGetRuleContext(0, JsonArrContext);
	}
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FALSE, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_jsonValue; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterJsonValue) {
			listener.enterJsonValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitJsonValue) {
			listener.exitJsonValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitJsonValue) {
			return visitor.visitJsonValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BoolValueContext extends ParserRuleContext {
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FALSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_boolValue; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBoolValue) {
			listener.enterBoolValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBoolValue) {
			listener.exitBoolValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBoolValue) {
			return visitor.visitBoolValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NumberContext extends ParserRuleContext {
	public NUMBER_INT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NUMBER_INT, 0); }
	public NUMBER(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NUMBER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_number; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNumber) {
			listener.enterNumber(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNumber) {
			listener.exitNumber(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNumber) {
			return visitor.visitNumber(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EndContext extends ParserRuleContext {
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NL);
		} else {
			return this.getToken(JustMCFParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_end; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEnd) {
			listener.enterEnd(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEnd) {
			listener.exitEnd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEnd) {
			return visitor.visitEnd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EndsContext extends ParserRuleContext {
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NL);
		} else {
			return this.getToken(JustMCFParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_ends; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterEnds) {
			listener.enterEnds(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitEnds) {
			listener.exitEnds(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitEnds) {
			return visitor.visitEnds(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class P_Context extends ParserRuleContext {
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NL);
		} else {
			return this.getToken(JustMCFParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_p_; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterP_) {
			listener.enterP_(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitP_) {
			listener.exitP_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitP_) {
			return visitor.visitP_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pn_Context extends ParserRuleContext {
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NL);
		} else {
			return this.getToken(JustMCFParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_pn_; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterPn_) {
			listener.enterPn_(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitPn_) {
			listener.exitPn_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitPn_) {
			return visitor.visitPn_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class S_Context extends ParserRuleContext {
	public NL(): TerminalNode[];
	public NL(i: number): TerminalNode;
	public NL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NL);
		} else {
			return this.getToken(JustMCFParser.NL, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_s_; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterS_) {
			listener.enterS_(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitS_) {
			listener.exitS_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitS_) {
			return visitor.visitS_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class KeyContext extends ParserRuleContext {
	public NAMSP(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NAMSP, 0); }
	public NAMESPACE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NAMESPACE, 0); }
	public LOCAL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.LOCAL, 0); }
	public EXEC(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.EXEC, 0); }
	public ALIGN(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ALIGN, 0); }
	public ANCHORED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ANCHORED, 0); }
	public EYES(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.EYES, 0); }
	public FEET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FEET, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.IN, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.AS, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.AT, 0); }
	public FACING(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FACING, 0); }
	public POSITIONED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.POSITIONED, 0); }
	public POS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.POS, 0); }
	public ROTATED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ROTATED, 0); }
	public ROT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ROT, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.IF, 0); }
	public UNLESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.UNLESS, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ALL, 0); }
	public MASKED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MASKED, 0); }
	public BIOME(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BIOME, 0); }
	public VALUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.VALUE, 0); }
	public MAX(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MAX, 0); }
	public RUN(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RUN, 0); }
	public STORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STORE, 0); }
	public ENTITY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ENTITY, 0); }
	public SCORE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SCORE, 0); }
	public PREDICATE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PREDICATE, 0); }
	public BLOCK(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BLOCK, 0); }
	public BLOCKS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BLOCKS, 0); }
	public SCB(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SCB, 0); }
	public DISPLAYNAME(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DISPLAYNAME, 0); }
	public RENDERTYPE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RENDERTYPE, 0); }
	public DISPLAY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DISPLAY, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ENABLE, 0); }
	public LIST(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.LIST, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DATA, 0); }
	public RESET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RESET, 0); }
	public ADD(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ADD, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.REMOVE, 0); }
	public STORAGE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STORAGE, 0); }
	public RESULT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RESULT, 0); }
	public SUCCESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SUCCESS, 0); }
	public FUNC(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FUNC, 0); }
	public TAGGED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TAGGED, 0); }
	public DEFAULT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DEFAULT, 0); }
	public PLAYER(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PLAYER, 0); }
	public PLAYERS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PLAYERS, 0); }
	public BOSSBAR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BOSSBAR, 0); }
	public VISIBLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.VISIBLE, 0); }
	public BLUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BLUE, 0); }
	public GREEN(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.GREEN, 0); }
	public PINK(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PINK, 0); }
	public PURPLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PURPLE, 0); }
	public RED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RED, 0); }
	public WHITE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.WHITE, 0); }
	public YELLOW(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.YELLOW, 0); }
	public COLOR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.COLOR, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NAME, 0); }
	public STYLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STYLE, 0); }
	public NOTCHED_6(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NOTCHED_6, 0); }
	public NOTCHED_10(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NOTCHED_10, 0); }
	public NOTCHED_12(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NOTCHED_12, 0); }
	public NOTCHED_20(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NOTCHED_20, 0); }
	public PROGRESS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.PROGRESS, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SET, 0); }
	public TITLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TITLE, 0); }
	public SUBTITLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SUBTITLE, 0); }
	public ACTIONBAR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ACTIONBAR, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TIMES, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TEXT, 0); }
	public ITEM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ITEM, 0); }
	public LOOT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.LOOT, 0); }
	public GIVE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.GIVE, 0); }
	public CLEAR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.CLEAR, 0); }
	public FISH(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FISH, 0); }
	public KILL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.KILL, 0); }
	public MINE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MINE, 0); }
	public MAINHAND(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MAINHAND, 0); }
	public OFFHAND(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.OFFHAND, 0); }
	public EFFECT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.EFFECT, 0); }
	public TAG(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TAG, 0); }
	public TP(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TP, 0); }
	public ATTR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ATTR, 0); }
	public BASE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BASE, 0); }
	public DESTROY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DESTROY, 0); }
	public KEEP(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.KEEP, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.REPLACE, 0); }
	public HOLLOW(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.HOLLOW, 0); }
	public OUTLINE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.OUTLINE, 0); }
	public FORCE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FORCE, 0); }
	public MOVE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.MOVE, 0); }
	public NORMAL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NORMAL, 0); }
	public GET(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.GET, 0); }
	public INTERFACE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.INTERFACE, 0); }
	public WHILE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.WHILE, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FOR, 0); }
	public YIELD(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.YIELD, 0); }
	public BREAK(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BREAK, 0); }
	public RETURN(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RETURN, 0); }
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.CONTINUE, 0); }
	public FILTERED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FILTERED, 0); }
	public REPLACED(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.REPLACED, 0); }
	public DIM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DIM, 0); }
	public DIMENSION(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DIMENSION, 0); }
	public ITEM_MODIFIER(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ITEM_MODIFIER, 0); }
	public BYTE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BYTE, 0); }
	public SHORT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SHORT, 0); }
	public INT_(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.INT_, 0); }
	public LONG(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.LONG, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FLOAT, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DOUBLE, 0); }
	public DPOS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DPOS, 0); }
	public X(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.X, 0); }
	public Y(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.Y, 0); }
	public Z(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.Z, 0); }
	public DX(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DX, 0); }
	public DY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DY, 0); }
	public DZ(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DZ, 0); }
	public X_ROTATION(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.X_ROTATION, 0); }
	public Y_ROTATION(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.Y_ROTATION, 0); }
	public DISTANCE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DISTANCE, 0); }
	public NBT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NBT, 0); }
	public SCORES(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SCORES, 0); }
	public TEAM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TEAM, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.TYPE, 0); }
	public LEVEL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.LEVEL, 0); }
	public GAMEMODE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.GAMEMODE, 0); }
	public SPECTATOR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SPECTATOR, 0); }
	public SURVIVAL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SURVIVAL, 0); }
	public CREATIVE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.CREATIVE, 0); }
	public ADVENTURE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ADVENTURE, 0); }
	public ADVANCEMENTS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ADVANCEMENTS, 0); }
	public LIMIT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.LIMIT, 0); }
	public SORT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SORT, 0); }
	public NEAREST(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NEAREST, 0); }
	public FURTHEST(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FURTHEST, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RANDOM, 0); }
	public ARBITRARY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ARBITRARY, 0); }
	public ADVANCEMENT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ADVANCEMENT, 0); }
	public ADVM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ADVM, 0); }
	public SelectorKey(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SelectorKey, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_key; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterKey) {
			listener.enterKey(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitKey) {
			listener.exitKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitKey) {
			return visitor.visitKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos3IdentifierContext extends ParserRuleContext {
	public pos1(): Pos1Context[];
	public pos1(i: number): Pos1Context;
	public pos1(i?: number): Pos1Context | Pos1Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Pos1Context);
		} else {
			return this.getRuleContext(i, Pos1Context);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_pos3Identifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterPos3Identifier) {
			listener.enterPos3Identifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitPos3Identifier) {
			listener.exitPos3Identifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitPos3Identifier) {
			return visitor.visitPos3Identifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos2IdentifierContext extends ParserRuleContext {
	public pos1(): Pos1Context[];
	public pos1(i: number): Pos1Context;
	public pos1(i?: number): Pos1Context | Pos1Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Pos1Context);
		} else {
			return this.getRuleContext(i, Pos1Context);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_pos2Identifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterPos2Identifier) {
			listener.enterPos2Identifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitPos2Identifier) {
			listener.exitPos2Identifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitPos2Identifier) {
			return visitor.visitPos2Identifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos5IdentifierContext extends ParserRuleContext {
	public pos1(): Pos1Context[];
	public pos1(i: number): Pos1Context;
	public pos1(i?: number): Pos1Context | Pos1Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Pos1Context);
		} else {
			return this.getRuleContext(i, Pos1Context);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_pos5Identifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterPos5Identifier) {
			listener.enterPos5Identifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitPos5Identifier) {
			listener.exitPos5Identifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitPos5Identifier) {
			return visitor.visitPos5Identifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pos1Context extends ParserRuleContext {
	public Pos1(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.Pos1, 0); }
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_pos1; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterPos1) {
			listener.enterPos1(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitPos1) {
			listener.exitPos1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitPos1) {
			return visitor.visitPos1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockIdentifierContext extends ParserRuleContext {
	public nameSpaceBlock(): NameSpaceBlockContext {
		return this.getRuleContext(0, NameSpaceBlockContext);
	}
	public blockstate(): BlockstateContext | undefined {
		return this.tryGetRuleContext(0, BlockstateContext);
	}
	public nbt(): NbtContext | undefined {
		return this.tryGetRuleContext(0, NbtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_blockIdentifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlockIdentifier) {
			listener.enterBlockIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlockIdentifier) {
			listener.exitBlockIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlockIdentifier) {
			return visitor.visitBlockIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockstateContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public blockstateParam(): BlockstateParamContext[];
	public blockstateParam(i: number): BlockstateParamContext;
	public blockstateParam(i?: number): BlockstateParamContext | BlockstateParamContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BlockstateParamContext);
		} else {
			return this.getRuleContext(i, BlockstateParamContext);
		}
	}
	public p_(): P_Context | undefined {
		return this.tryGetRuleContext(0, P_Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_blockstate; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlockstate) {
			listener.enterBlockstate(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlockstate) {
			listener.exitBlockstate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlockstate) {
			return visitor.visitBlockstate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockstateValueContext extends ParserRuleContext {
	public boolValue(): BoolValueContext | undefined {
		return this.tryGetRuleContext(0, BoolValueContext);
	}
	public NUMBER_INT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NUMBER_INT, 0); }
	public acceptableName(): AcceptableNameContext | undefined {
		return this.tryGetRuleContext(0, AcceptableNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_blockstateValue; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlockstateValue) {
			listener.enterBlockstateValue(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlockstateValue) {
			listener.exitBlockstateValue(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlockstateValue) {
			return visitor.visitBlockstateValue(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BlockstateParamContext extends ParserRuleContext {
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public blockstateValue(): BlockstateValueContext {
		return this.getRuleContext(0, BlockstateValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_blockstateParam; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlockstateParam) {
			listener.enterBlockstateParam(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlockstateParam) {
			listener.exitBlockstateParam(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlockstateParam) {
			return visitor.visitBlockstateParam(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceContext extends ParserRuleContext {
	public _op!: Token;
	public acceptableName(): AcceptableNameContext | undefined {
		return this.tryGetRuleContext(0, AcceptableNameContext);
	}
	public resourceLocation(): ResourceLocationContext {
		return this.getRuleContext(0, ResourceLocationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpace; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpace) {
			listener.enterNameSpace(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpace) {
			listener.exitNameSpace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpace) {
			return visitor.visitNameSpace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceBlockContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceBlock; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceBlock) {
			listener.enterNameSpaceBlock(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceBlock) {
			listener.exitNameSpaceBlock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceBlock) {
			return visitor.visitNameSpaceBlock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceFuncContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceFunc; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceFunc) {
			listener.enterNameSpaceFunc(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceFunc) {
			listener.exitNameSpaceFunc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceFunc) {
			return visitor.visitNameSpaceFunc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceStorageContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceStorage; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceStorage) {
			listener.enterNameSpaceStorage(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceStorage) {
			listener.exitNameSpaceStorage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceStorage) {
			return visitor.visitNameSpaceStorage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceBossbarContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceBossbar; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceBossbar) {
			listener.enterNameSpaceBossbar(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceBossbar) {
			listener.exitNameSpaceBossbar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceBossbar) {
			return visitor.visitNameSpaceBossbar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceBiomeContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceBiome; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceBiome) {
			listener.enterNameSpaceBiome(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceBiome) {
			listener.exitNameSpaceBiome(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceBiome) {
			return visitor.visitNameSpaceBiome(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceDimContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceDim; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceDim) {
			listener.enterNameSpaceDim(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceDim) {
			listener.exitNameSpaceDim(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceDim) {
			return visitor.visitNameSpaceDim(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpacePredicateContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpacePredicate; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpacePredicate) {
			listener.enterNameSpacePredicate(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpacePredicate) {
			listener.exitNameSpacePredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpacePredicate) {
			return visitor.visitNameSpacePredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceItemContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceItem; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceItem) {
			listener.enterNameSpaceItem(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceItem) {
			listener.exitNameSpaceItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceItem) {
			return visitor.visitNameSpaceItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceEntityContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceEntity; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceEntity) {
			listener.enterNameSpaceEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceEntity) {
			listener.exitNameSpaceEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceEntity) {
			return visitor.visitNameSpaceEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceLootContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceLoot; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceLoot) {
			listener.enterNameSpaceLoot(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceLoot) {
			listener.exitNameSpaceLoot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceLoot) {
			return visitor.visitNameSpaceLoot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceItemModifierContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceItemModifier; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceItemModifier) {
			listener.enterNameSpaceItemModifier(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceItemModifier) {
			listener.exitNameSpaceItemModifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceItemModifier) {
			return visitor.visitNameSpaceItemModifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameSpaceAdvancementContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nameSpaceAdvancement; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNameSpaceAdvancement) {
			listener.enterNameSpaceAdvancement(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNameSpaceAdvancement) {
			listener.exitNameSpaceAdvancement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNameSpaceAdvancement) {
			return visitor.visitNameSpaceAdvancement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TagNameSpaceContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_tagNameSpace; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTagNameSpace) {
			listener.enterTagNameSpace(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTagNameSpace) {
			listener.exitTagNameSpace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTagNameSpace) {
			return visitor.visitTagNameSpace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TagNameSpaceItemContext extends ParserRuleContext {
	public tagNameSpace(): TagNameSpaceContext {
		return this.getRuleContext(0, TagNameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_tagNameSpaceItem; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTagNameSpaceItem) {
			listener.enterTagNameSpaceItem(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTagNameSpaceItem) {
			listener.exitTagNameSpaceItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTagNameSpaceItem) {
			return visitor.visitTagNameSpaceItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TagNameSpaceBlockContext extends ParserRuleContext {
	public tagNameSpace(): TagNameSpaceContext {
		return this.getRuleContext(0, TagNameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_tagNameSpaceBlock; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTagNameSpaceBlock) {
			listener.enterTagNameSpaceBlock(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTagNameSpaceBlock) {
			listener.exitTagNameSpaceBlock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTagNameSpaceBlock) {
			return visitor.visitTagNameSpaceBlock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TagNameSpaceFuncContext extends ParserRuleContext {
	public tagNameSpace(): TagNameSpaceContext {
		return this.getRuleContext(0, TagNameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_tagNameSpaceFunc; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTagNameSpaceFunc) {
			listener.enterTagNameSpaceFunc(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTagNameSpaceFunc) {
			listener.exitTagNameSpaceFunc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTagNameSpaceFunc) {
			return visitor.visitTagNameSpaceFunc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TagNameSpaceEntityContext extends ParserRuleContext {
	public tagNameSpace(): TagNameSpaceContext {
		return this.getRuleContext(0, TagNameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_tagNameSpaceEntity; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTagNameSpaceEntity) {
			listener.enterTagNameSpaceEntity(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTagNameSpaceEntity) {
			listener.exitTagNameSpaceEntity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTagNameSpaceEntity) {
			return visitor.visitTagNameSpaceEntity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RegisterNameContext extends ParserRuleContext {
	public acceptableName(): AcceptableNameContext[];
	public acceptableName(i: number): AcceptableNameContext;
	public acceptableName(i?: number): AcceptableNameContext | AcceptableNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AcceptableNameContext);
		} else {
			return this.getRuleContext(i, AcceptableNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_registerName; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterRegisterName) {
			listener.enterRegisterName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitRegisterName) {
			listener.exitRegisterName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitRegisterName) {
			return visitor.visitRegisterName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NumberTypeContext extends ParserRuleContext {
	public BYTE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.BYTE, 0); }
	public SHORT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SHORT, 0); }
	public INT_(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.INT_, 0); }
	public LONG(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.LONG, 0); }
	public FLOAT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FLOAT, 0); }
	public DOUBLE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DOUBLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_numberType; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNumberType) {
			listener.enterNumberType(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNumberType) {
			listener.exitNumberType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNumberType) {
			return visitor.visitNumberType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AcceptableNameWithoutPointWithKeyContext extends ParserRuleContext {
	public AcceptableName(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.AcceptableName, 0); }
	public key(): KeyContext | undefined {
		return this.tryGetRuleContext(0, KeyContext);
	}
	public numberType(): NumberTypeContext | undefined {
		return this.tryGetRuleContext(0, NumberTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_acceptableNameWithoutPointWithKey; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAcceptableNameWithoutPointWithKey) {
			listener.enterAcceptableNameWithoutPointWithKey(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAcceptableNameWithoutPointWithKey) {
			listener.exitAcceptableNameWithoutPointWithKey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAcceptableNameWithoutPointWithKey) {
			return visitor.visitAcceptableNameWithoutPointWithKey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CriterionContext extends ParserRuleContext {
	public nameSpace(): NameSpaceContext {
		return this.getRuleContext(0, NameSpaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_criterion; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterCriterion) {
			listener.enterCriterion(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitCriterion) {
			listener.exitCriterion(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitCriterion) {
			return visitor.visitCriterion(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NbtNameContext extends ParserRuleContext {
	public acceptableNameWithoutPointWithKey(): AcceptableNameWithoutPointWithKeyContext | undefined {
		return this.tryGetRuleContext(0, AcceptableNameWithoutPointWithKeyContext);
	}
	public NBTName(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NBTName, 0); }
	public nbtName(): NbtNameContext | undefined {
		return this.tryGetRuleContext(0, NbtNameContext);
	}
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_nbtName; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNbtName) {
			listener.enterNbtName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNbtName) {
			listener.exitNbtName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNbtName) {
			return visitor.visitNbtName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AcceptableNameContext extends ParserRuleContext {
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_acceptableName; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAcceptableName) {
			listener.enterAcceptableName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAcceptableName) {
			listener.exitAcceptableName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAcceptableName) {
			return visitor.visitAcceptableName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AcceptableNameWithNumberContext extends ParserRuleContext {
	public acceptableName(): AcceptableNameContext | undefined {
		return this.tryGetRuleContext(0, AcceptableNameContext);
	}
	public number(): NumberContext | undefined {
		return this.tryGetRuleContext(0, NumberContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_acceptableNameWithNumber; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterAcceptableNameWithNumber) {
			listener.enterAcceptableNameWithNumber(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitAcceptableNameWithNumber) {
			listener.exitAcceptableNameWithNumber(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitAcceptableNameWithNumber) {
			return visitor.visitAcceptableNameWithNumber(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ResourceLocationContext extends ParserRuleContext {
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public acceptableNameWithNumber(): AcceptableNameWithNumberContext[];
	public acceptableNameWithNumber(i: number): AcceptableNameWithNumberContext;
	public acceptableNameWithNumber(i?: number): AcceptableNameWithNumberContext | AcceptableNameWithNumberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AcceptableNameWithNumberContext);
		} else {
			return this.getRuleContext(i, AcceptableNameWithNumberContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_resourceLocation; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterResourceLocation) {
			listener.enterResourceLocation(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitResourceLocation) {
			listener.exitResourceLocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitResourceLocation) {
			return visitor.visitResourceLocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypeNameContext extends ParserRuleContext {
	public nbtName(): NbtNameContext[];
	public nbtName(i: number): NbtNameContext;
	public nbtName(i?: number): NbtNameContext | NbtNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NbtNameContext);
		} else {
			return this.getRuleContext(i, NbtNameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_typeName; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterTypeName) {
			listener.enterTypeName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitTypeName) {
			listener.exitTypeName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitTypeName) {
			return visitor.visitTypeName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Item_slotContext extends ParserRuleContext {
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_item_slot; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItem_slot) {
			listener.enterItem_slot(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItem_slot) {
			listener.exitItem_slot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItem_slot) {
			return visitor.visitItem_slot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringContext extends ParserRuleContext {
	public nbtName(): NbtNameContext | undefined {
		return this.tryGetRuleContext(0, NbtNameContext);
	}
	public STRING(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.STRING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_string; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterString) {
			listener.enterString(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitString) {
			listener.exitString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitString) {
			return visitor.visitString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Item_predicateContext extends ParserRuleContext {
	public nameSpaceItem(): NameSpaceItemContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceItemContext);
	}
	public tagNameSpaceItem(): TagNameSpaceItemContext | undefined {
		return this.tryGetRuleContext(0, TagNameSpaceItemContext);
	}
	public snbt(): SnbtContext | undefined {
		return this.tryGetRuleContext(0, SnbtContext);
	}
	public nbt(): NbtContext | undefined {
		return this.tryGetRuleContext(0, NbtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_item_predicate; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterItem_predicate) {
			listener.enterItem_predicate(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitItem_predicate) {
			listener.exitItem_predicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitItem_predicate) {
			return visitor.visitItem_predicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Block_predicateContext extends ParserRuleContext {
	public nameSpaceBlock(): NameSpaceBlockContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceBlockContext);
	}
	public tagNameSpaceBlock(): TagNameSpaceBlockContext | undefined {
		return this.tryGetRuleContext(0, TagNameSpaceBlockContext);
	}
	public blockstate(): BlockstateContext | undefined {
		return this.tryGetRuleContext(0, BlockstateContext);
	}
	public snbt(): SnbtContext | undefined {
		return this.tryGetRuleContext(0, SnbtContext);
	}
	public nbt(): NbtContext | undefined {
		return this.tryGetRuleContext(0, NbtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_block_predicate; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterBlock_predicate) {
			listener.enterBlock_predicate(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitBlock_predicate) {
			listener.exitBlock_predicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitBlock_predicate) {
			return visitor.visitBlock_predicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IntRangeContext extends ParserRuleContext {
	public NUMBER_INT(): TerminalNode[];
	public NUMBER_INT(i: number): TerminalNode;
	public NUMBER_INT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(JustMCFParser.NUMBER_INT);
		} else {
			return this.getToken(JustMCFParser.NUMBER_INT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_intRange; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterIntRange) {
			listener.enterIntRange(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitIntRange) {
			listener.exitIntRange(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitIntRange) {
			return visitor.visitIntRange(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PositiveNumberRangeContext extends ParserRuleContext {
	public number(): NumberContext[];
	public number(i: number): NumberContext;
	public number(i?: number): NumberContext | NumberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NumberContext);
		} else {
			return this.getRuleContext(i, NumberContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_positiveNumberRange; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterPositiveNumberRange) {
			listener.enterPositiveNumberRange(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitPositiveNumberRange) {
			listener.exitPositiveNumberRange(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitPositiveNumberRange) {
			return visitor.visitPositiveNumberRange(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NumberRangeContext extends ParserRuleContext {
	public number(): NumberContext[];
	public number(i: number): NumberContext;
	public number(i?: number): NumberContext | NumberContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NumberContext);
		} else {
			return this.getRuleContext(i, NumberContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_numberRange; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterNumberRange) {
			listener.enterNumberRange(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitNumberRange) {
			listener.exitNumberRange(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitNumberRange) {
			return visitor.visitNumberRange(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectorContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_selector; }
	public copyFrom(ctx: SelectorContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectorParamsContext extends SelectorContext {
	public selectorWithParams(): SelectorWithParamsContext {
		return this.getRuleContext(0, SelectorWithParamsContext);
	}
	constructor(ctx: SelectorContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParams) {
			listener.enterSelectorParams(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParams) {
			listener.exitSelectorParams(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParams) {
			return visitor.visitSelectorParams(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorNameContext extends SelectorContext {
	public acceptableNameWithoutPointWithKey(): AcceptableNameWithoutPointWithKeyContext {
		return this.getRuleContext(0, AcceptableNameWithoutPointWithKeyContext);
	}
	constructor(ctx: SelectorContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorName) {
			listener.enterSelectorName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorName) {
			listener.exitSelectorName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorName) {
			return visitor.visitSelectorName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorFakeNameContext extends SelectorContext {
	public acceptableNameWithoutPointWithKey(): AcceptableNameWithoutPointWithKeyContext {
		return this.getRuleContext(0, AcceptableNameWithoutPointWithKeyContext);
	}
	constructor(ctx: SelectorContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorFakeName) {
			listener.enterSelectorFakeName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorFakeName) {
			listener.exitSelectorFakeName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorFakeName) {
			return visitor.visitSelectorFakeName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectorWithParamsContext extends ParserRuleContext {
	public SelectorKey(): TerminalNode { return this.getToken(JustMCFParser.SelectorKey, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public selectorTypes(): SelectorTypesContext | undefined {
		return this.tryGetRuleContext(0, SelectorTypesContext);
	}
	public selectorParam(): SelectorParamContext[];
	public selectorParam(i: number): SelectorParamContext;
	public selectorParam(i?: number): SelectorParamContext | SelectorParamContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectorParamContext);
		} else {
			return this.getRuleContext(i, SelectorParamContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_selectorWithParams; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorWithParams) {
			listener.enterSelectorWithParams(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorWithParams) {
			listener.exitSelectorWithParams(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorWithParams) {
			return visitor.visitSelectorWithParams(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectorParamContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_selectorParam; }
	public copyFrom(ctx: SelectorParamContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectorParamPosContext extends SelectorParamContext {
	public POS(): TerminalNode { return this.getToken(JustMCFParser.POS, 0); }
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamPos) {
			listener.enterSelectorParamPos(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamPos) {
			listener.exitSelectorParamPos(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamPos) {
			return visitor.visitSelectorParamPos(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamDPosContext extends SelectorParamContext {
	public DPOS(): TerminalNode { return this.getToken(JustMCFParser.DPOS, 0); }
	public pos3Identifier(): Pos3IdentifierContext {
		return this.getRuleContext(0, Pos3IdentifierContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamDPos) {
			listener.enterSelectorParamDPos(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamDPos) {
			listener.exitSelectorParamDPos(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamDPos) {
			return visitor.visitSelectorParamDPos(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamRotContext extends SelectorParamContext {
	public ROT(): TerminalNode { return this.getToken(JustMCFParser.ROT, 0); }
	public pos2Identifier(): Pos2IdentifierContext {
		return this.getRuleContext(0, Pos2IdentifierContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamRot) {
			listener.enterSelectorParamRot(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamRot) {
			listener.exitSelectorParamRot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamRot) {
			return visitor.visitSelectorParamRot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamXYZContext extends SelectorParamContext {
	public number(): NumberContext {
		return this.getRuleContext(0, NumberContext);
	}
	public X(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.X, 0); }
	public Y(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.Y, 0); }
	public Z(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.Z, 0); }
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamXYZ) {
			listener.enterSelectorParamXYZ(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamXYZ) {
			listener.exitSelectorParamXYZ(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamXYZ) {
			return visitor.visitSelectorParamXYZ(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamDXYZContext extends SelectorParamContext {
	public number(): NumberContext {
		return this.getRuleContext(0, NumberContext);
	}
	public DX(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DX, 0); }
	public DY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DY, 0); }
	public DZ(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.DZ, 0); }
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamDXYZ) {
			listener.enterSelectorParamDXYZ(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamDXYZ) {
			listener.exitSelectorParamDXYZ(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamDXYZ) {
			return visitor.visitSelectorParamDXYZ(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamRotationContext extends SelectorParamContext {
	public numberRange(): NumberRangeContext {
		return this.getRuleContext(0, NumberRangeContext);
	}
	public X_ROTATION(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.X_ROTATION, 0); }
	public Y_ROTATION(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.Y_ROTATION, 0); }
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamRotation) {
			listener.enterSelectorParamRotation(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamRotation) {
			listener.exitSelectorParamRotation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamRotation) {
			return visitor.visitSelectorParamRotation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamDistanceContext extends SelectorParamContext {
	public DISTANCE(): TerminalNode { return this.getToken(JustMCFParser.DISTANCE, 0); }
	public positiveNumberRange(): PositiveNumberRangeContext {
		return this.getRuleContext(0, PositiveNumberRangeContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamDistance) {
			listener.enterSelectorParamDistance(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamDistance) {
			listener.exitSelectorParamDistance(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamDistance) {
			return visitor.visitSelectorParamDistance(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamNbtContext extends SelectorParamContext {
	public NBT(): TerminalNode { return this.getToken(JustMCFParser.NBT, 0); }
	public nbtCompound(): NbtCompoundContext | undefined {
		return this.tryGetRuleContext(0, NbtCompoundContext);
	}
	public selectorNbtCompound(): SelectorNbtCompoundContext | undefined {
		return this.tryGetRuleContext(0, SelectorNbtCompoundContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamNbt) {
			listener.enterSelectorParamNbt(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamNbt) {
			listener.exitSelectorParamNbt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamNbt) {
			return visitor.visitSelectorParamNbt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamScoresContext extends SelectorParamContext {
	public SCORES(): TerminalNode { return this.getToken(JustMCFParser.SCORES, 0); }
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public selectorScoresPart(): SelectorScoresPartContext[];
	public selectorScoresPart(i: number): SelectorScoresPartContext;
	public selectorScoresPart(i?: number): SelectorScoresPartContext | SelectorScoresPartContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectorScoresPartContext);
		} else {
			return this.getRuleContext(i, SelectorScoresPartContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamScores) {
			listener.enterSelectorParamScores(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamScores) {
			listener.exitSelectorParamScores(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamScores) {
			return visitor.visitSelectorParamScores(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamTagContext extends SelectorParamContext {
	public _not!: Token;
	public TAG(): TerminalNode { return this.getToken(JustMCFParser.TAG, 0); }
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamTag) {
			listener.enterSelectorParamTag(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamTag) {
			listener.exitSelectorParamTag(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamTag) {
			return visitor.visitSelectorParamTag(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamTeamContext extends SelectorParamContext {
	public _not!: Token;
	public TEAM(): TerminalNode { return this.getToken(JustMCFParser.TEAM, 0); }
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamTeam) {
			listener.enterSelectorParamTeam(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamTeam) {
			listener.exitSelectorParamTeam(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamTeam) {
			return visitor.visitSelectorParamTeam(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamNameContext extends SelectorParamContext {
	public _not!: Token;
	public NAME(): TerminalNode { return this.getToken(JustMCFParser.NAME, 0); }
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamName) {
			listener.enterSelectorParamName(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamName) {
			listener.exitSelectorParamName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamName) {
			return visitor.visitSelectorParamName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamTypeContext extends SelectorParamContext {
	public _not!: Token;
	public TYPE(): TerminalNode { return this.getToken(JustMCFParser.TYPE, 0); }
	public selectorType(): SelectorTypeContext {
		return this.getRuleContext(0, SelectorTypeContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamType) {
			listener.enterSelectorParamType(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamType) {
			listener.exitSelectorParamType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamType) {
			return visitor.visitSelectorParamType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamLevelContext extends SelectorParamContext {
	public LEVEL(): TerminalNode { return this.getToken(JustMCFParser.LEVEL, 0); }
	public intRange(): IntRangeContext {
		return this.getRuleContext(0, IntRangeContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamLevel) {
			listener.enterSelectorParamLevel(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamLevel) {
			listener.exitSelectorParamLevel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamLevel) {
			return visitor.visitSelectorParamLevel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamPredicateContext extends SelectorParamContext {
	public _not!: Token;
	public PREDICATE(): TerminalNode { return this.getToken(JustMCFParser.PREDICATE, 0); }
	public nameSpacePredicate(): NameSpacePredicateContext {
		return this.getRuleContext(0, NameSpacePredicateContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamPredicate) {
			listener.enterSelectorParamPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamPredicate) {
			listener.exitSelectorParamPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamPredicate) {
			return visitor.visitSelectorParamPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamGamemodeContext extends SelectorParamContext {
	public _not!: Token;
	public GAMEMODE(): TerminalNode { return this.getToken(JustMCFParser.GAMEMODE, 0); }
	public SPECTATOR(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SPECTATOR, 0); }
	public SURVIVAL(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.SURVIVAL, 0); }
	public CREATIVE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.CREATIVE, 0); }
	public ADVENTURE(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ADVENTURE, 0); }
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamGamemode) {
			listener.enterSelectorParamGamemode(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamGamemode) {
			listener.exitSelectorParamGamemode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamGamemode) {
			return visitor.visitSelectorParamGamemode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamAdvmContext extends SelectorParamContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public selectorAdvancementsPart(): SelectorAdvancementsPartContext[];
	public selectorAdvancementsPart(i: number): SelectorAdvancementsPartContext;
	public selectorAdvancementsPart(i?: number): SelectorAdvancementsPartContext | SelectorAdvancementsPartContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectorAdvancementsPartContext);
		} else {
			return this.getRuleContext(i, SelectorAdvancementsPartContext);
		}
	}
	public ADVANCEMENTS(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ADVANCEMENTS, 0); }
	public ADVM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ADVM, 0); }
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamAdvm) {
			listener.enterSelectorParamAdvm(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamAdvm) {
			listener.exitSelectorParamAdvm(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamAdvm) {
			return visitor.visitSelectorParamAdvm(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamLimitContext extends SelectorParamContext {
	public LIMIT(): TerminalNode { return this.getToken(JustMCFParser.LIMIT, 0); }
	public NUMBER_INT(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamLimit) {
			listener.enterSelectorParamLimit(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamLimit) {
			listener.exitSelectorParamLimit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamLimit) {
			return visitor.visitSelectorParamLimit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamLimitInfContext extends SelectorParamContext {
	public LIMIT(): TerminalNode { return this.getToken(JustMCFParser.LIMIT, 0); }
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamLimitInf) {
			listener.enterSelectorParamLimitInf(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamLimitInf) {
			listener.exitSelectorParamLimitInf(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamLimitInf) {
			return visitor.visitSelectorParamLimitInf(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamSortContext extends SelectorParamContext {
	public SORT(): TerminalNode { return this.getToken(JustMCFParser.SORT, 0); }
	public NEAREST(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.NEAREST, 0); }
	public FURTHEST(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.FURTHEST, 0); }
	public RANDOM(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.RANDOM, 0); }
	public ARBITRARY(): TerminalNode | undefined { return this.tryGetToken(JustMCFParser.ARBITRARY, 0); }
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamSort) {
			listener.enterSelectorParamSort(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamSort) {
			listener.exitSelectorParamSort(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamSort) {
			return visitor.visitSelectorParamSort(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamLimitNumberContext extends SelectorParamContext {
	public NUMBER_INT(): TerminalNode { return this.getToken(JustMCFParser.NUMBER_INT, 0); }
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamLimitNumber) {
			listener.enterSelectorParamLimitNumber(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamLimitNumber) {
			listener.exitSelectorParamLimitNumber(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamLimitNumber) {
			return visitor.visitSelectorParamLimitNumber(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamNbtCompoundContext extends SelectorParamContext {
	public selectorNbtCompound(): SelectorNbtCompoundContext {
		return this.getRuleContext(0, SelectorNbtCompoundContext);
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamNbtCompound) {
			listener.enterSelectorParamNbtCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamNbtCompound) {
			listener.exitSelectorParamNbtCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamNbtCompound) {
			return visitor.visitSelectorParamNbtCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorParamScoreCompoundContext extends SelectorParamContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public selectorScoresPartImprove(): SelectorScoresPartImproveContext[];
	public selectorScoresPartImprove(i: number): SelectorScoresPartImproveContext;
	public selectorScoresPartImprove(i?: number): SelectorScoresPartImproveContext | SelectorScoresPartImproveContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectorScoresPartImproveContext);
		} else {
			return this.getRuleContext(i, SelectorScoresPartImproveContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	constructor(ctx: SelectorParamContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorParamScoreCompound) {
			listener.enterSelectorParamScoreCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorParamScoreCompound) {
			listener.exitSelectorParamScoreCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorParamScoreCompound) {
			return visitor.visitSelectorParamScoreCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectorTypeContext extends ParserRuleContext {
	public nameSpaceEntity(): NameSpaceEntityContext | undefined {
		return this.tryGetRuleContext(0, NameSpaceEntityContext);
	}
	public tagNameSpaceEntity(): TagNameSpaceEntityContext | undefined {
		return this.tryGetRuleContext(0, TagNameSpaceEntityContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_selectorType; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorType) {
			listener.enterSelectorType(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorType) {
			listener.exitSelectorType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorType) {
			return visitor.visitSelectorType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectorTypesContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_selectorTypes; }
	public copyFrom(ctx: SelectorTypesContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectorTypeSingleContext extends SelectorTypesContext {
	public selectorType(): SelectorTypeContext {
		return this.getRuleContext(0, SelectorTypeContext);
	}
	constructor(ctx: SelectorTypesContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorTypeSingle) {
			listener.enterSelectorTypeSingle(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorTypeSingle) {
			listener.exitSelectorTypeSingle(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorTypeSingle) {
			return visitor.visitSelectorTypeSingle(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorTypeNotContext extends SelectorTypesContext {
	public selectorType(): SelectorTypeContext[];
	public selectorType(i: number): SelectorTypeContext;
	public selectorType(i?: number): SelectorTypeContext | SelectorTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectorTypeContext);
		} else {
			return this.getRuleContext(i, SelectorTypeContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	constructor(ctx: SelectorTypesContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorTypeNot) {
			listener.enterSelectorTypeNot(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorTypeNot) {
			listener.exitSelectorTypeNot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorTypeNot) {
			return visitor.visitSelectorTypeNot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectorNbtCompoundContext extends ParserRuleContext {
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public nbtPair(): NbtPairContext[];
	public nbtPair(i: number): NbtPairContext;
	public nbtPair(i?: number): NbtPairContext | NbtPairContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NbtPairContext);
		} else {
			return this.getRuleContext(i, NbtPairContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_selectorNbtCompound; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorNbtCompound) {
			listener.enterSelectorNbtCompound(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorNbtCompound) {
			listener.exitSelectorNbtCompound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorNbtCompound) {
			return visitor.visitSelectorNbtCompound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectorScoresPartContext extends ParserRuleContext {
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	public intRange(): IntRangeContext {
		return this.getRuleContext(0, IntRangeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_selectorScoresPart; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorScoresPart) {
			listener.enterSelectorScoresPart(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorScoresPart) {
			listener.exitSelectorScoresPart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorScoresPart) {
			return visitor.visitSelectorScoresPart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectorScoresPartImproveContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_selectorScoresPartImprove; }
	public copyFrom(ctx: SelectorScoresPartImproveContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectorScoresPartCompareContext extends SelectorScoresPartImproveContext {
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	public scbCompareNumber(): ScbCompareNumberContext {
		return this.getRuleContext(0, ScbCompareNumberContext);
	}
	constructor(ctx: SelectorScoresPartImproveContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorScoresPartCompare) {
			listener.enterSelectorScoresPartCompare(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorScoresPartCompare) {
			listener.exitSelectorScoresPartCompare(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorScoresPartCompare) {
			return visitor.visitSelectorScoresPartCompare(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorScoresPartRangeContext extends SelectorScoresPartImproveContext {
	public nbtName(): NbtNameContext {
		return this.getRuleContext(0, NbtNameContext);
	}
	public intRange(): IntRangeContext {
		return this.getRuleContext(0, IntRangeContext);
	}
	constructor(ctx: SelectorScoresPartImproveContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorScoresPartRange) {
			listener.enterSelectorScoresPartRange(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorScoresPartRange) {
			listener.exitSelectorScoresPartRange(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorScoresPartRange) {
			return visitor.visitSelectorScoresPartRange(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectorAdvancementsPartContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_selectorAdvancementsPart; }
	public copyFrom(ctx: SelectorAdvancementsPartContext): void {
		super.copyFrom(ctx);
	}
}
export class SelectorAdvmPartDirectContext extends SelectorAdvancementsPartContext {
	public nameSpaceAdvancement(): NameSpaceAdvancementContext {
		return this.getRuleContext(0, NameSpaceAdvancementContext);
	}
	public boolValue(): BoolValueContext {
		return this.getRuleContext(0, BoolValueContext);
	}
	constructor(ctx: SelectorAdvancementsPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorAdvmPartDirect) {
			listener.enterSelectorAdvmPartDirect(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorAdvmPartDirect) {
			listener.exitSelectorAdvmPartDirect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorAdvmPartDirect) {
			return visitor.visitSelectorAdvmPartDirect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class SelectorAdvmPartCriteriaContext extends SelectorAdvancementsPartContext {
	public nameSpaceAdvancement(): NameSpaceAdvancementContext {
		return this.getRuleContext(0, NameSpaceAdvancementContext);
	}
	public s_(): S_Context[];
	public s_(i: number): S_Context;
	public s_(i?: number): S_Context | S_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(S_Context);
		} else {
			return this.getRuleContext(i, S_Context);
		}
	}
	public selectorAdvancementsCriteria(): SelectorAdvancementsCriteriaContext[];
	public selectorAdvancementsCriteria(i: number): SelectorAdvancementsCriteriaContext;
	public selectorAdvancementsCriteria(i?: number): SelectorAdvancementsCriteriaContext | SelectorAdvancementsCriteriaContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SelectorAdvancementsCriteriaContext);
		} else {
			return this.getRuleContext(i, SelectorAdvancementsCriteriaContext);
		}
	}
	public p_(): P_Context[];
	public p_(i: number): P_Context;
	public p_(i?: number): P_Context | P_Context[] {
		if (i === undefined) {
			return this.getRuleContexts(P_Context);
		} else {
			return this.getRuleContext(i, P_Context);
		}
	}
	constructor(ctx: SelectorAdvancementsPartContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorAdvmPartCriteria) {
			listener.enterSelectorAdvmPartCriteria(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorAdvmPartCriteria) {
			listener.exitSelectorAdvmPartCriteria(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorAdvmPartCriteria) {
			return visitor.visitSelectorAdvmPartCriteria(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectorAdvancementsCriteriaContext extends ParserRuleContext {
	public acceptableName(): AcceptableNameContext {
		return this.getRuleContext(0, AcceptableNameContext);
	}
	public boolValue(): BoolValueContext {
		return this.getRuleContext(0, BoolValueContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return JustMCFParser.RULE_selectorAdvancementsCriteria; }
	// @Override
	public enterRule(listener: JustMCFListener): void {
		if (listener.enterSelectorAdvancementsCriteria) {
			listener.enterSelectorAdvancementsCriteria(this);
		}
	}
	// @Override
	public exitRule(listener: JustMCFListener): void {
		if (listener.exitSelectorAdvancementsCriteria) {
			listener.exitSelectorAdvancementsCriteria(this);
		}
	}
	// @Override
	public accept<Result>(visitor: JustMCFVisitor<Result>): Result {
		if (visitor.visitSelectorAdvancementsCriteria) {
			return visitor.visitSelectorAdvancementsCriteria(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


